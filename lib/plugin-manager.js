"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const results_db_1 = require("./results-db");
const output_panel_1 = require("./output-panel");
const config_params_1 = require("./config-params");
const editor_control_1 = require("./editor-control");
const linter_support_1 = require("./linter-support");
const tooltip_registry_1 = require("./tooltip-registry");
const check_results_provider_1 = require("./check-results-provider");
class PluginManager {
    constructor(state) {
        this.disposables = new atom_1.CompositeDisposable();
        this.emitter = new atom_1.Emitter();
        this.disposables.add(this.emitter);
        this.controllers = new WeakMap();
        this.controllerClasses = new Set();
        this.editorDispMap = new WeakMap();
        this.resultsDB = new results_db_1.ResultsDB();
        this.outputPanel = new output_panel_1.OutputPanel(state.outputView, this.resultsDB);
        this.tooltipRegistry = new tooltip_registry_1.TooltipRegistry(this);
        this.configParamManager = new config_params_1.ConfigParamManager(this.outputPanel, state.configParams);
        this.addEditorController(editor_control_1.EditorControl, this.controllers);
        if (atom.config.get('ide-haskell.messageDisplayFrontend') === 'builtin') {
            this.addEditorController(check_results_provider_1.CheckResultsProvider);
        }
        this.subscribeEditorController();
    }
    deactivate() {
        this.resultsDB.destroy();
        this.disposables.dispose();
        this.deleteEditorControllers();
        this.outputPanel.destroy();
        this.configParamManager.destroy();
        if (this.linterSupport) {
            this.linterSupport.destroy();
            this.linterSupport = undefined;
        }
    }
    serialize() {
        return {
            outputView: this.outputPanel.serialize(),
            configParams: this.configParamManager.serialize()
        };
    }
    onWillSaveBuffer(callback) {
        return this.emitter.on('will-save-buffer', callback);
    }
    onDidSaveBuffer(callback) {
        return this.emitter.on('did-save-buffer', callback);
    }
    onDidStopChanging(callback) {
        return this.emitter.on('did-stop-changing', callback);
    }
    willSaveBuffer(buffer) {
        return this.emitter.emit('will-save-buffer', buffer);
    }
    didSaveBuffer(buffer) {
        return this.emitter.emit('did-save-buffer', buffer);
    }
    didStopChanging(buffer) {
        return this.emitter.emit('did-stop-changing', buffer);
    }
    togglePanel() {
        this.outputPanel.toggle();
    }
    controller(editor) {
        return this.controllers.get(editor);
    }
    setLinter(linter) {
        if (atom.config.get('ide-haskell.messageDisplayFrontend') !== 'linter') {
            return;
        }
        this.linterSupport = new linter_support_1.LinterSupport(linter, this.resultsDB);
    }
    nextError() {
        if (atom.config.get('ide-haskell.messageDisplayFrontend') !== 'builtin') {
            return;
        }
        this.outputPanel.showNextError();
    }
    prevError() {
        if (atom.config.get('ide-haskell.messageDisplayFrontend') !== 'builtin') {
            return;
        }
        this.outputPanel.showPrevError();
    }
    removeController(editor) {
        const disp = this.editorDispMap.get(editor);
        if (disp) {
            disp.dispose();
            this.disposables.remove(disp);
            this.editorDispMap.delete(editor);
        }
    }
    addEditorController(factory, map) {
        this.controllerClasses.add({ map, factory });
    }
    controllerOnGrammar(editor, grammar) {
        if (grammar.scopeName.match(/haskell$/)) {
            this.addController(editor);
        }
        else {
            this.removeController(editor);
        }
    }
    subscribeEditorController() {
        this.disposables.add(atom.workspace.observeTextEditors((editor) => {
            this.disposables.add(editor.onDidChangeGrammar((grammar) => {
                this.controllerOnGrammar(editor, grammar);
            }));
            this.controllerOnGrammar(editor, editor.getGrammar());
        }));
    }
    deleteEditorControllers() {
        for (const editor of atom.workspace.getTextEditors()) {
            this.removeController(editor);
        }
    }
    addController(editor) {
        const disp = this.editorDispMap.get(editor) || new atom_1.CompositeDisposable();
        if (!this.editorDispMap.has(editor)) {
            disp.add(editor.onDidDestroy(() => this.removeController(editor)));
            this.editorDispMap.set(editor, disp);
            this.disposables.add(disp);
        }
        for (const { map, factory } of this.controllerClasses) {
            if (!map || !map.has(editor)) {
                const controller = new factory(editor, this);
                if (map) {
                    map.set(editor, controller);
                }
                disp.add(new atom_1.Disposable(() => {
                    if (map) {
                        map.delete(editor);
                    }
                    controller.destroy();
                }));
            }
        }
    }
}
exports.PluginManager = PluginManager;
//# sourceMappingURL=data:application/json;base64,