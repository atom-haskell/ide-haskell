"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const results_db_1 = require("./results-db");
const output_panel_1 = require("./output-panel");
const config_params_1 = require("./config-params");
const editor_control_1 = require("./editor-control");
const linter_support_1 = require("./linter-support");
class PluginManager {
    constructor(state) {
        this.checkResults = new results_db_1.ResultsDB();
        this.disposables = new atom_1.CompositeDisposable();
        this.controllers = new WeakMap();
        this.emitter = new atom_1.Emitter();
        this.disposables.add(this.emitter);
        if (atom.config.get('ide-haskell.messageDisplayFrontend') === 'builtin') {
            this.disposables.add(this.onResultsUpdated(({ types }) => this.updateEditorsWithResults(types)));
        }
        this.outputView = new output_panel_1.OutputPanel(state.outputView, this.checkResults);
        this.subscribeEditorController();
        this.configParamManager = new config_params_1.ConfigParamManager(this.outputView, state.configParams);
        this.linterSupport = null;
    }
    deactivate() {
        this.checkResults.destroy();
        this.disposables.dispose();
        this.deleteEditorControllers();
        this.outputView.destroy();
        this.configParamManager.destroy();
        if (this.linterSupport) {
            this.linterSupport.destroy();
            this.linterSupport = null;
        }
    }
    serialize() {
        return {
            outputView: this.outputView.serialize(),
            configParams: this.configParamManager.serialize()
        };
    }
    onShouldShowTooltip(callback) {
        return this.emitter.on('should-show-tooltip', callback);
    }
    onWillSaveBuffer(callback) {
        return this.emitter.on('will-save-buffer', callback);
    }
    onDidSaveBuffer(callback) {
        return this.emitter.on('did-save-buffer', callback);
    }
    onDidStopChanging(callback) {
        return this.emitter.on('did-stop-changing', callback);
    }
    togglePanel() {
        this.outputView.toggle();
    }
    onResultsUpdated(callback) {
        return this.checkResults.onDidUpdate(callback);
    }
    controller(editor) {
        return this.controllers.get(editor);
    }
    setLinter(linter) {
        if (atom.config.get('ide-haskell.messageDisplayFrontend') !== 'linter') {
            return;
        }
        this.linterSupport = new linter_support_1.LinterSupport(linter, this.checkResults);
    }
    nextError() {
        if (atom.config.get('ide-haskell.messageDisplayFrontend') !== 'builtin') {
            return;
        }
        this.outputView.showNextError();
    }
    prevError() {
        if (atom.config.get('ide-haskell.messageDisplayFrontend') !== 'builtin') {
            return;
        }
        this.outputView.showPrevError();
    }
    removeController(editor) {
        const controller = this.controllers.get(editor);
        if (controller) {
            controller.deactivate();
            this.controllers.delete(editor);
        }
    }
    controllerOnGrammar(editor, grammar) {
        if (grammar.scopeName.match(/haskell$/)) {
            this.addController(editor);
        }
        else {
            this.removeController(editor);
        }
    }
    subscribeEditorController() {
        this.disposables.add(atom.workspace.observeTextEditors((editor) => {
            this.disposables.add(editor.onDidChangeGrammar((grammar) => {
                this.controllerOnGrammar(editor, grammar);
            }));
            this.controllerOnGrammar(editor, editor.getGrammar());
        }));
    }
    deleteEditorControllers() {
        for (const editor of atom.workspace.getTextEditors()) {
            this.removeController(editor);
        }
    }
    updateEditorsWithResults(types) {
        for (const ed of atom.workspace.getTextEditors()) {
            const ctrl = this.controller(ed);
            const filtered = this.checkResults.filter(({ uri }) => uri === ed.getPath());
            if (ctrl) {
                ctrl.updateResults(filtered, types);
            }
        }
    }
    addController(editor) {
        if (!this.controllers.has(editor)) {
            const controller = new editor_control_1.EditorControl(editor);
            this.controllers.set(editor, controller);
            controller.disposables.add(editor.onDidDestroy(() => this.removeController(editor)), controller.onShouldShowTooltip((params) => this.emitter.emit('should-show-tooltip', params)), controller.onWillSaveBuffer((buffer) => this.emitter.emit('will-save-buffer', buffer)), controller.onDidSaveBuffer((buffer) => this.emitter.emit('did-save-buffer', buffer)), controller.onDidStopChanging((ed) => this.emitter.emit('did-stop-changing', ed.getBuffer())));
            controller.updateResults(this.checkResults.filter(({ uri }) => uri === editor.getPath()));
        }
    }
}
exports.PluginManager = PluginManager;
//# sourceMappingURL=data:application/json;base64,