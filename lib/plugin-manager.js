"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const results_db_1 = require("./results-db");
const output_panel_1 = require("./output-panel");
const config_params_1 = require("./config-params");
const editor_control_1 = require("./editor-control");
const linter_support_1 = require("./linter-support");
const tooltip_registry_1 = require("./tooltip-registry");
const check_results_provider_1 = require("./check-results-provider");
class PluginManager {
    constructor(state) {
        this.disposables = new atom_1.CompositeDisposable();
        this.emitter = new atom_1.Emitter();
        this.disposables.add(this.emitter);
        this.controllers = new WeakMap();
        this.controllerClasses = new Set();
        this.editorDispMap = new WeakMap();
        this.resultsDB = new results_db_1.ResultsDB();
        this.outputPanel = new output_panel_1.OutputPanel(state.outputView, this.resultsDB);
        this.tooltipRegistry = new tooltip_registry_1.TooltipRegistry(this);
        this.configParamManager = new config_params_1.ConfigParamManager(this.outputPanel, state.configParams);
        this.addEditorController(editor_control_1.EditorControl, this.controllers);
        this.addEditorController(check_results_provider_1.CheckResultsProvider);
        this.subscribeEditorController();
    }
    deactivate() {
        this.resultsDB.destroy();
        this.disposables.dispose();
        this.deleteEditorControllers();
        this.outputPanel.destroy();
        this.configParamManager.destroy();
        if (this.linterSupport) {
            this.linterSupport.destroy();
            this.linterSupport = undefined;
        }
    }
    serialize() {
        return {
            outputView: this.outputPanel.serialize(),
            configParams: this.configParamManager.serialize()
        };
    }
    onWillSaveBuffer(callback) {
        return this.emitter.on('will-save-buffer', callback);
    }
    onDidSaveBuffer(callback) {
        return this.emitter.on('did-save-buffer', callback);
    }
    onDidStopChanging(callback) {
        return this.emitter.on('did-stop-changing', callback);
    }
    willSaveBuffer(buffer) {
        return this.emitter.emit('will-save-buffer', buffer);
    }
    didSaveBuffer(buffer) {
        return this.emitter.emit('did-save-buffer', buffer);
    }
    didStopChanging(buffer) {
        return this.emitter.emit('did-stop-changing', buffer);
    }
    togglePanel() {
        this.outputPanel.toggle();
    }
    controller(editor) {
        return this.controllers.get(editor);
    }
    setLinter(linter) {
        if (atom.config.get('ide-haskell.messageDisplayFrontend') !== 'linter') {
            return;
        }
        this.linterSupport = new linter_support_1.LinterSupport(linter, this.resultsDB);
    }
    nextError() {
        if (atom.config.get('ide-haskell.messageDisplayFrontend') !== 'builtin') {
            return;
        }
        this.outputPanel.showNextError();
    }
    prevError() {
        if (atom.config.get('ide-haskell.messageDisplayFrontend') !== 'builtin') {
            return;
        }
        this.outputPanel.showPrevError();
    }
    removeController(editor) {
        const disp = this.editorDispMap.get(editor);
        if (disp) {
            disp.dispose();
            this.disposables.remove(disp);
            this.editorDispMap.delete(editor);
        }
    }
    addEditorController(factory, map) {
        this.controllerClasses.add({ map, factory });
    }
    controllerOnGrammar(editor, grammar) {
        if (grammar.scopeName.match(/haskell$/)) {
            this.addController(editor);
        }
        else {
            this.removeController(editor);
        }
    }
    subscribeEditorController() {
        this.disposables.add(atom.workspace.observeTextEditors((editor) => {
            this.disposables.add(editor.onDidChangeGrammar((grammar) => {
                this.controllerOnGrammar(editor, grammar);
            }));
            this.controllerOnGrammar(editor, editor.getGrammar());
        }));
    }
    deleteEditorControllers() {
        for (const editor of atom.workspace.getTextEditors()) {
            this.removeController(editor);
        }
    }
    addController(editor) {
        const disp = this.editorDispMap.get(editor) || new atom_1.CompositeDisposable();
        if (!this.editorDispMap.has(editor)) {
            disp.add(editor.onDidDestroy(() => this.removeController(editor)));
            this.editorDispMap.set(editor, disp);
            this.disposables.add(disp);
        }
        for (const { map, factory } of this.controllerClasses) {
            if (!map || !map.has(editor)) {
                const controller = new factory(editor, this);
                if (map) {
                    map.set(editor, controller);
                }
                disp.add(new atom_1.Disposable(() => {
                    if (map) {
                        map.delete(editor);
                    }
                    controller.destroy();
                }));
            }
        }
    }
}
exports.PluginManager = PluginManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLW1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcGx1Z2luLW1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBcUc7QUFDckcsNkNBQXNDO0FBQ3RDLGlEQUEwQztBQUMxQyxtREFBeUU7QUFDekUscURBQW1FO0FBQ25FLHFEQUE4QztBQUM5Qyx5REFBa0Q7QUFDbEQscUVBQTZEO0FBd0I3RDtJQVdFLFlBQWEsS0FBYTtRQUN4QixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksMEJBQW1CLEVBQUUsQ0FBQTtRQUM1QyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksY0FBTyxFQUFFLENBQUE7UUFDNUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBRWxDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQTtRQUNoQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQTtRQUNsQyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUE7UUFFbEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLHNCQUFTLEVBQUUsQ0FBQTtRQUNoQyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksMEJBQVcsQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUNwRSxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksa0NBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNoRCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxrQ0FBa0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUV0RixJQUFJLENBQUMsbUJBQW1CLENBQUMsOEJBQWEsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUE7UUFDekQsSUFBSSxDQUFD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LElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDN0IsTUFBTSxVQUFVLEdBQUcsSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFBO2dCQUM1QyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO29CQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFBO2dCQUFDLENBQUM7Z0JBQ3hDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxpQkFBVSxDQUFDO29CQUN0QixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO3dCQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUE7b0JBQUMsQ0FBQztvQkFDL0IsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFBO2dCQUN0QixDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ0wsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUEzSkQsc0NBMkpDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb3NpdGVEaXNwb3NhYmxlLCBFbWl0dGVyLCBUZXh0RWRpdG9yLCBQb2ludCwgVGV4dEJ1ZmZlciwgR3JhbW1hciwgRGlzcG9zYWJsZX0gZnJvbSAnYXRvbSdcbmltcG9ydCB7UmVzdWx0c0RCfSBmcm9tICcuL3Jlc3VsdHMtZGInXG5pbXBvcnQge091dHB1dFBhbmVsfSBmcm9tICcuL291dHB1dC1wYW5lbCdcbmltcG9ydCB7Q29uZmlnUGFyYW1NYW5hZ2VyLCBJU3RhdGUgYXMgSVBhcmFtU3RhdGV9IGZyb20gJy4vY29uZmlnLXBhcmFtcydcbmltcG9ydCB7RWRpdG9yQ29udHJvbCwgVFRleHRCdWZmZXJDYWxsYmFja30gZnJvbSAnLi9lZGl0b3ItY29udHJvbCdcbmltcG9ydCB7TGludGVyU3VwcG9ydH0gZnJvbSAnLi9saW50ZXItc3VwcG9ydCdcbmltcG9ydCB7VG9vbHRpcFJlZ2lzdHJ5fSBmcm9tICcuL3Rvb2x0aXAtcmVnaXN0cnknXG5pbXBvcnQge0NoZWNrUmVzdWx0c1Byb3ZpZGVyfSBmcm9tICcuL2NoZWNrLXJlc3VsdHMtcHJvdmlkZXInXG5cbnR5cGUgTGludGVyID0gYW55IC8vIFRPRE86IFN0ZWFsIHRoaXMgZnJvbSBhdG9tLXR5cGVzY3JpcHRcblxuZXhwb3J0IHR5cGUgVEV2ZW50VHlwZSA9ICdrZXlib2FyZCcgfCAnY29udGV4dCcgfCAnbW91c2UnIHwgJ3NlbGVjdGlvbidcbnR5cGUgVFNob3dUb29sdGlwQ2FsbGJhY2tQYXJhbXMgPSB7ZWRpdG9yOiBUZXh0RWRpdG9yLCBwb3M6IFBvaW50LCBldmVudFR5cGU6IFRFdmVudFR5cGV9XG50eXBlIFRTaG93VG9vbHRpcENhbGxiYWNrID0gKHBhcnM6IFRTaG93VG9vbHRpcENhbGxiYWNrUGFyYW1zKSA9PiB2b2lkXG5cbnR5cGUgSU91dHB1dFZpZXdTdGF0ZSA9IGFueVxuZXhwb3J0IGludGVyZmFjZSBJU3RhdGUge1xuICBvdXRwdXRWaWV3OiBJT3V0cHV0Vmlld1N0YXRlXG4gIGNvbmZpZ1BhcmFtczogSVBhcmFtU3RhdGVcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRWRpdG9yQ29udHJvbGxlciB7XG4gIGRlc3Ryb3kgKCk6IHZvaWRcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRWRpdG9yQ29udHJvbGxlckZhY3Rvcnkge1xuICBuZXcgKGVkaXRvcjogVGV4dEVkaXRvciwgbWFuYWdlcjogUGx1Z2luTWFuYWdlcik6IElFZGl0b3JDb250cm9sbGVyXG59XG5cbnR5cGUgRUNNYXA8VCBleHRlbmRzIElFZGl0b3JDb250cm9sbGVyPiA9IFdlYWtNYXA8VGV4dEVkaXRvciwgVD5cblxuZXhwb3J0IGNsYXNzIFBsdWdpbk1hbmFnZXIge1xuICBwdWJsaWMgcmVzdWx0c0RCOiBSZXN1bHRzREJcbiAgcHVibGljIG91dHB1dFBhbmVsOiBPdXRwdXRQYW5lbFxuICBwdWJsaWMgY29uZmlnUGFyYW1NYW5hZ2VyOiBDb25maWdQYXJhbU1hbmFnZXJcbiAgcHVibGljIHRvb2x0aXBSZWdpc3RyeTogVG9vbHRpcFJlZ2lzdHJ5XG4gIHByaXZhdGUgbGludGVyU3VwcG9ydD86IExpbnRlclN1cHBvcnRcbiAgcHJpdmF0ZSBkaXNwb3NhYmxlczogQ29tcG9zaXRlRGlzcG9zYWJsZVxuICBwcml2YXRlIGVtaXR0ZXI6IEVtaXR0ZXJcbiAgcHJpdmF0ZSBjb250cm9sbGVyczogRUNNYXA8RWRpdG9yQ29udHJvbD5cbiAgcHJpdmF0ZSBjb250cm9sbGVyQ2xhc3NlczogU2V0PHttYXA/OiBFQ01hcDxJRWRpdG9yQ29udHJvbGxlcj4sIGZhY3Rvcnk6IElFZGl0b3JDb250cm9sbGVyRmFjdG9yeX0+XG4gIHByaXZhdGUgZWRpdG9yRGlzcE1hcDogV2Vha01hcDxUZXh0RWRpdG9yLCBDb21wb3NpdGVEaXNwb3NhYmxlPlxuICBjb25zdHJ1Y3RvciAoc3RhdGU6IElTdGF0ZSkge1xuICAgIHRoaXMuZGlzcG9zYWJsZXMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG4gICAgdGhpcy5lbWl0dGVyID0gbmV3IEVtaXR0ZXIoKVxuICAgIHRoaXMuZGlzcG9zYWJsZXMuYWRkKHRoaXMuZW1pdHRlcilcblxuICAgIHRoaXMuY29udHJvbGxlcnMgPSBuZXcgV2Vha01hcCgpXG4gICAgdGhpcy5jb250cm9sbGVyQ2xhc3NlcyA9IG5ldyBTZXQoKVxuICAgIHRoaXMuZWRpdG9yRGlzcE1hcCA9IG5ldyBXZWFrTWFwKClcblxuICAgIHRoaXMucmVzdWx0c0RCID0gbmV3IFJlc3VsdHNEQigpXG4gICAgdGhpcy5vdXRwdXRQYW5lbCA9IG5ldyBPdXRwdXRQYW5lbChzdGF0ZS5vdXRwdXRWaWV3LCB0aGlzLnJlc3VsdHNEQilcbiAgICB0aGlzLnRvb2x0aXBSZWdpc3RyeSA9IG5ldyBUb29sdGlwUmVnaXN0cnkodGhpcylcbiAgICB0aGlzLmNvbmZpZ1BhcmFtTWFuYWdlciA9IG5ldyBDb25maWdQYXJhbU1hbmFnZXIodGhpcy5vdXRwdXRQYW5lbCwgc3RhdGUuY29uZmlnUGFyYW1zKVxuXG4gICAgdGhpcy5hZGRFZGl0b3JDb250cm9sbGVyKEVkaXRvckNvbnRyb2wsIHRoaXMuY29udHJvbGxlcnMpXG4gICAgdGhpcy5hZGRFZGl0b3JDb250cm9sbGVyKENoZWNrUmVzdWx0c1Byb3ZpZGVyKVxuXG4gICAgdGhpcy5zdWJzY3JpYmVFZGl0b3JDb250cm9sbGVyKClcbiAgfVxuXG4gIHB1YmxpYyBkZWFjdGl2YXRlICgpIHtcbiAgICB0aGlzLnJlc3VsdHNEQi5kZXN0cm95KClcbiAgICB0aGlzLmRpc3Bvc2FibGVzLmRpc3Bvc2UoKVxuXG4gICAgdGhpcy5kZWxldGVFZGl0b3JDb250cm9sbGVycygpXG4gICAgdGhpcy5vdXRwdXRQYW5lbC5kZXN0cm95KClcbiAgICB0aGlzLmNvbmZpZ1BhcmFtTWFuYWdlci5kZXN0cm95KClcbiAgICBpZiAodGhpcy5saW50ZXJTdXBwb3J0KSB7XG4gICAgICB0aGlzLmxpbnRlclN1cHBvcnQuZGVzdHJveSgpXG4gICAgICB0aGlzLmxpbnRlclN1cHBvcnQgPSB1bmRlZmluZWRcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc2VyaWFsaXplICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb3V0cHV0VmlldzogdGhpcy5vdXRwdXRQYW5lbC5zZXJpYWxpemUoKSxcbiAgICAgIGNvbmZpZ1BhcmFtczogdGhpcy5jb25maWdQYXJhbU1hbmFnZXIuc2VyaWFsaXplKClcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgb25XaWxsU2F2ZUJ1ZmZlciAoY2FsbGJhY2s6IFRUZXh0QnVmZmVyQ2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyLm9uKCd3aWxsLXNhdmUtYnVmZmVyJywgY2FsbGJhY2spXG4gIH1cblxuICBwdWJsaWMgb25EaWRTYXZlQnVmZmVyIChjYWxsYmFjazogVFRleHRCdWZmZXJDYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIub24oJ2RpZC1zYXZlLWJ1ZmZlcicsIGNhbGxiYWNrKVxuICB9XG5cbiAgcHVibGljIG9uRGlkU3RvcENoYW5naW5nIChjYWxsYmFjazogVFRleHRCdWZmZXJDYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIub24oJ2RpZC1zdG9wLWNoYW5naW5nJywgY2FsbGJhY2spXG4gIH1cblxuICBwdWJsaWMgd2lsbFNhdmVCdWZmZXIgKGJ1ZmZlcjogVGV4dEJ1ZmZlcikge1xuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIuZW1pdCgnd2lsbC1zYXZlLWJ1ZmZlcicsIGJ1ZmZlcilcbiAgfVxuXG4gIHB1YmxpYyBkaWRTYXZlQnVmZmVyIChidWZmZXI6IFRleHRCdWZmZXIpIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyLmVtaXQoJ2RpZC1zYXZlLWJ1ZmZlcicsIGJ1ZmZlcilcbiAgfVxuXG4gIHB1YmxpYyBkaWRTdG9wQ2hhbmdpbmcgKGJ1ZmZlcjogVGV4dEJ1ZmZlcikge1xuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIuZW1pdCgnZGlkLXN0b3AtY2hhbmdpbmcnLCBidWZmZXIpXG4gIH1cblxuICBwdWJsaWMgdG9nZ2xlUGFuZWwgKCkge1xuICAgIHRoaXMub3V0cHV0UGFuZWwudG9nZ2xlKClcbiAgfVxuXG4gIHB1YmxpYyBjb250cm9sbGVyIChlZGl0b3I6IFRleHRFZGl0b3IpIHtcbiAgICByZXR1cm4gdGhpcy5jb250cm9sbGVycy5nZXQoZWRpdG9yKVxuICB9XG5cbiAgcHVibGljIHNldExpbnRlciAobGludGVyOiBMaW50ZXIpIHtcbiAgICBpZiAoYXRvbS5jb25maWcuZ2V0KCdpZGUtaGFza2VsbC5tZXNzYWdlRGlzcGxheUZyb250ZW5kJykgIT09ICdsaW50ZXInKSB7IHJldHVybiB9XG4gICAgdGhpcy5saW50ZXJTdXBwb3J0ID0gbmV3IExpbnRlclN1cHBvcnQobGludGVyLCB0aGlzLnJlc3VsdHNEQilcbiAgfVxuXG4gIHB1YmxpYyBuZXh0RXJyb3IgKCkge1xuICAgIGlmIChhdG9tLmNvbmZpZy5nZXQoJ2lkZS1oYXNrZWxsLm1lc3NhZ2VEaXNwbGF5RnJvbnRlbmQnKSAhPT0gJ2J1aWx0aW4nKSB7IHJldHVybiB9XG4gICAgdGhpcy5vdXRwdXRQYW5lbC5zaG93TmV4dEVycm9yKClcbiAgfVxuXG4gIHB1YmxpYyBwcmV2RXJyb3IgKCkge1xuICAgIGlmIChhdG9tLmNvbmZpZy5nZXQoJ2lkZS1oYXNrZWxsLm1lc3NhZ2VEaXNwbGF5RnJvbnRlbmQnKSAhPT0gJ2J1aWx0aW4nKSB7IHJldHVybiB9XG4gICAgdGhpcy5vdXRwdXRQYW5lbC5zaG93UHJldkVycm9yKClcbiAgfVxuXG4gIHB1YmxpYyByZW1vdmVDb250cm9sbGVyIChlZGl0b3I6IFRleHRFZGl0b3IpIHtcbiAgICBjb25zdCBkaXNwID0gdGhpcy5lZGl0b3JEaXNwTWFwLmdldChlZGl0b3IpXG4gICAgaWYgKGRpc3ApIHtcbiAgICAgIGRpc3AuZGlzcG9zZSgpXG4gICAgICB0aGlzLmRpc3Bvc2FibGVzLnJlbW92ZShkaXNwKVxuICAgICAgdGhpcy5lZGl0b3JEaXNwTWFwLmRlbGV0ZShlZGl0b3IpXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhZGRFZGl0b3JDb250cm9sbGVyIChmYWN0b3J5OiBJRWRpdG9yQ29udHJvbGxlckZhY3RvcnksIG1hcD86IEVDTWFwPElFZGl0b3JDb250cm9sbGVyPikge1xuICAgIHRoaXMuY29udHJvbGxlckNsYXNzZXMuYWRkKHttYXAsIGZhY3Rvcnl9KVxuICB9XG5cbiAgcHJpdmF0ZSBjb250cm9sbGVyT25HcmFtbWFyIChlZGl0b3I6IFRleHRFZGl0b3IsIGdyYW1tYXI6IEdyYW1tYXIpIHtcbiAgICBpZiAoZ3JhbW1hci5zY29wZU5hbWUubWF0Y2goL2hhc2tlbGwkLykpIHtcbiAgICAgIHRoaXMuYWRkQ29udHJvbGxlcihlZGl0b3IpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVtb3ZlQ29udHJvbGxlcihlZGl0b3IpXG4gICAgfVxuICB9XG5cbiAgLy8gT2JzZXJ2ZSB0ZXh0IGVkaXRvcnMgdG8gYXR0YWNoIGNvbnRyb2xsZXJcbiAgcHJpdmF0ZSBzdWJzY3JpYmVFZGl0b3JDb250cm9sbGVyICgpIHtcbiAgICB0aGlzLmRpc3Bvc2FibGVzLmFkZChcbiAgICAgIGF0b20ud29ya3NwYWNlLm9ic2VydmVUZXh0RWRpdG9ycygoZWRpdG9yKSA9PiB7XG4gICAgICAgIHRoaXMuZGlzcG9zYWJsZXMuYWRkKFxuICAgICAgICAgIGVkaXRvci5vbkRpZENoYW5nZUdyYW1tYXIoKGdyYW1tYXIpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbGxlck9uR3JhbW1hcihlZGl0b3IsIGdyYW1tYXIpXG4gICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJPbkdyYW1tYXIoZWRpdG9yLCBlZGl0b3IuZ2V0R3JhbW1hcigpKVxuICAgICAgfSlcbiAgICApXG4gIH1cblxuICBwcml2YXRlIGRlbGV0ZUVkaXRvckNvbnRyb2xsZXJzICgpIHtcbiAgICBmb3IgKGNvbnN0IGVkaXRvciBvZiBhdG9tLndvcmtzcGFjZS5nZXRUZXh0RWRpdG9ycygpKSB7IHRoaXMucmVtb3ZlQ29udHJvbGxlcihlZGl0b3IpIH1cbiAgfVxuXG4gIHByaXZhdGUgYWRkQ29udHJvbGxlciAoZWRpdG9yOiBUZXh0RWRpdG9yKSB7XG4gICAgY29uc3QgZGlzcCA9IHRoaXMuZWRpdG9yRGlzcE1hcC5nZXQoZWRpdG9yKSB8fCBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG4gICAgaWYgKCF0aGlzLmVkaXRvckRpc3BNYXAuaGFzKGVkaXRvcikpIHtcbiAgICAgIGRpc3AuYWRkKGVkaXRvci5vbkRpZERlc3Ryb3koKCkgPT4gdGhpcy5yZW1vdmVDb250cm9sbGVyKGVkaXRvcikpKVxuICAgICAgdGhpcy5lZGl0b3JEaXNwTWFwLnNldChlZGl0b3IsIGRpc3ApXG4gICAgICB0aGlzLmRpc3Bvc2FibGVzLmFkZChkaXNwKVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IHttYXAsIGZhY3Rvcnl9IG9mIHRoaXMuY29udHJvbGxlckNsYXNzZXMpIHtcbiAgICAgIGlmICghbWFwIHx8ICFtYXAuaGFzKGVkaXRvcikpIHtcbiAgICAgICAgY29uc3QgY29udHJvbGxlciA9IG5ldyBmYWN0b3J5KGVkaXRvciwgdGhpcylcbiAgICAgICAgaWYgKG1hcCkgeyBtYXAuc2V0KGVkaXRvciwgY29udHJvbGxlcikgfVxuICAgICAgICBkaXNwLmFkZChuZXcgRGlzcG9zYWJsZSgoKSA9PiB7XG4gICAgICAgICAgaWYgKG1hcCkgeyBtYXAuZGVsZXRlKGVkaXRvcikgfVxuICAgICAgICAgIGNvbnRyb2xsZXIuZGVzdHJveSgpXG4gICAgICAgIH0pKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl19