"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const results_db_1 = require("./results-db");
const output_panel_1 = require("./output-panel");
const config_params_1 = require("./config-params");
const editor_control_1 = require("./editor-control");
const linter_support_1 = require("./linter-support");
const tooltip_registry_1 = require("./tooltip-registry");
const check_results_provider_1 = require("./check-results-provider");
class PluginManager {
    constructor(state) {
        this.disposables = new atom_1.CompositeDisposable();
        this.emitter = new atom_1.Emitter();
        this.disposables.add(this.emitter);
        this.controllers = new WeakMap();
        this.checkResultsControllers = new WeakMap();
        this.controllerClasses = new Set();
        this.checkResults = new results_db_1.ResultsDB();
        this.outputView = new output_panel_1.OutputPanel(state.outputView, this.checkResults);
        this.tooltipRegistry = new tooltip_registry_1.TooltipRegistry(this);
        this.configParamManager = new config_params_1.ConfigParamManager(this.outputView, state.configParams);
        this.addEditorController(this.controllers, editor_control_1.EditorControl);
        this.addEditorController(this.checkResultsControllers, check_results_provider_1.CheckResultsProvider);
        this.subscribeEditorController();
    }
    addEditorController(map, factory) {
        this.controllerClasses.add({ map, factory });
    }
    deactivate() {
        this.checkResults.destroy();
        this.disposables.dispose();
        this.deleteEditorControllers();
        this.outputView.destroy();
        this.configParamManager.destroy();
        if (this.linterSupport) {
            this.linterSupport.destroy();
            this.linterSupport = undefined;
        }
    }
    serialize() {
        return {
            outputView: this.outputView.serialize(),
            configParams: this.configParamManager.serialize()
        };
    }
    onWillSaveBuffer(callback) {
        return this.emitter.on('will-save-buffer', callback);
    }
    onDidSaveBuffer(callback) {
        return this.emitter.on('did-save-buffer', callback);
    }
    onDidStopChanging(callback) {
        return this.emitter.on('did-stop-changing', callback);
    }
    willSaveBuffer(buffer) {
        return this.emitter.emit('will-save-buffer', buffer);
    }
    didSaveBuffer(buffer) {
        return this.emitter.emit('did-save-buffer', buffer);
    }
    didStopChanging(buffer) {
        return this.emitter.emit('did-stop-changing', buffer);
    }
    togglePanel() {
        this.outputView.toggle();
    }
    controller(editor) {
        return this.controllers.get(editor);
    }
    setLinter(linter) {
        if (atom.config.get('ide-haskell.messageDisplayFrontend') !== 'linter') {
            return;
        }
        this.linterSupport = new linter_support_1.LinterSupport(linter, this.checkResults);
    }
    nextError() {
        if (atom.config.get('ide-haskell.messageDisplayFrontend') !== 'builtin') {
            return;
        }
        this.outputView.showNextError();
    }
    prevError() {
        if (atom.config.get('ide-haskell.messageDisplayFrontend') !== 'builtin') {
            return;
        }
        this.outputView.showPrevError();
    }
    removeController(editor) {
        for (const { map } of this.controllerClasses) {
            const controller = map.get(editor);
            if (controller) {
                controller.destroy();
                map.delete(editor);
            }
        }
    }
    controllerOnGrammar(editor, grammar) {
        if (grammar.scopeName.match(/haskell$/)) {
            this.addController(editor);
        }
        else {
            this.removeController(editor);
        }
    }
    subscribeEditorController() {
        this.disposables.add(atom.workspace.observeTextEditors((editor) => {
            this.disposables.add(editor.onDidChangeGrammar((grammar) => {
                this.controllerOnGrammar(editor, grammar);
            }));
            this.controllerOnGrammar(editor, editor.getGrammar());
        }));
    }
    deleteEditorControllers() {
        for (const editor of atom.workspace.getTextEditors()) {
            this.removeController(editor);
        }
    }
    addController(editor) {
        for (const { map, factory } of this.controllerClasses) {
            if (!map.has(editor)) {
                const controller = new factory(editor, this);
                map.set(editor, controller);
            }
        }
    }
}
exports.PluginManager = PluginManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLW1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcGx1Z2luLW1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBeUY7QUFDekYsNkNBQXNDO0FBQ3RDLGlEQUEwQztBQUMxQyxtREFBeUU7QUFDekUscURBQW1FO0FBQ25FLHFEQUE4QztBQUM5Qyx5REFBa0Q7QUFDbEQscUVBQTZEO0FBd0I3RDtJQVdFLFlBQWEsS0FBYTtRQUN4QixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksMEJBQW1CLEVBQUUsQ0FBQTtRQUM1QyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksY0FBTyxFQUFFLENBQUE7UUFDNUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBRWxDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQTtRQUNoQyxJQUFJLENBQUMsdUJBQXVCLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQTtRQUM1QyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQTtRQUVsQyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksc0JBQVMsRUFBRSxDQUFBO1FBQ25DLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSwwQkFBVyxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFBO1FBQ3RFLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxrQ0FBZSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ2hELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLGtDQUFrQixDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFBO1FBRXJGLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLDhCQUFhLENBQUMsQ0FBQTtRQUN6RCxJQUFJLENB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QUMsTUFBTTtZQUN2QyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FDbEIsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUMsT0FBTztnQkFDaEMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQTtZQUMzQyxDQUFDLENBQUMsQ0FDSCxDQUFBO1lBQ0QsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQTtRQUN2RCxDQUFDLENBQUMsQ0FDSCxDQUFBO0lBQ0gsQ0FBQztJQUVPLHVCQUF1QjtRQUM3QixHQUFHLENBQUMsQ0FBQyxNQUFNLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUFDLENBQUM7SUFDekYsQ0FBQztJQUVPLGFBQWEsQ0FBRSxNQUFrQjtRQUN2QyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUMsR0FBRyxFQUFFLE9BQU8sRUFBQyxJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7WUFDcEQsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDckIsTUFBTSxVQUFVLEdBQUcsSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFBO2dCQUM1QyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQTtZQUM3QixDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7Q0FDRjtBQW5KRCxzQ0FtSkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvc2l0ZURpc3Bvc2FibGUsIEVtaXR0ZXIsIFRleHRFZGl0b3IsIFBvaW50LCBUZXh0QnVmZmVyLCBHcmFtbWFyfSBmcm9tICdhdG9tJ1xuaW1wb3J0IHtSZXN1bHRzREJ9IGZyb20gJy4vcmVzdWx0cy1kYidcbmltcG9ydCB7T3V0cHV0UGFuZWx9IGZyb20gJy4vb3V0cHV0LXBhbmVsJ1xuaW1wb3J0IHtDb25maWdQYXJhbU1hbmFnZXIsIElTdGF0ZSBhcyBJUGFyYW1TdGF0ZX0gZnJvbSAnLi9jb25maWctcGFyYW1zJ1xuaW1wb3J0IHtFZGl0b3JDb250cm9sLCBUVGV4dEJ1ZmZlckNhbGxiYWNrfSBmcm9tICcuL2VkaXRvci1jb250cm9sJ1xuaW1wb3J0IHtMaW50ZXJTdXBwb3J0fSBmcm9tICcuL2xpbnRlci1zdXBwb3J0J1xuaW1wb3J0IHtUb29sdGlwUmVnaXN0cnl9IGZyb20gJy4vdG9vbHRpcC1yZWdpc3RyeSdcbmltcG9ydCB7Q2hlY2tSZXN1bHRzUHJvdmlkZXJ9IGZyb20gJy4vY2hlY2stcmVzdWx0cy1wcm92aWRlcidcblxudHlwZSBMaW50ZXIgPSBhbnkgLy8gVE9ETzogU3RlYWwgdGhpcyBmcm9tIGF0b20tdHlwZXNjcmlwdFxuXG5leHBvcnQgdHlwZSBURXZlbnRUeXBlID0gJ2tleWJvYXJkJyB8ICdjb250ZXh0JyB8ICdtb3VzZScgfCAnc2VsZWN0aW9uJ1xudHlwZSBUU2hvd1Rvb2x0aXBDYWxsYmFja1BhcmFtcyA9IHtlZGl0b3I6IFRleHRFZGl0b3IsIHBvczogUG9pbnQsIGV2ZW50VHlwZTogVEV2ZW50VHlwZX1cbnR5cGUgVFNob3dUb29sdGlwQ2FsbGJhY2sgPSAocGFyczogVFNob3dUb29sdGlwQ2FsbGJhY2tQYXJhbXMpID0+IHZvaWRcblxudHlwZSBJT3V0cHV0Vmlld1N0YXRlID0gYW55XG5leHBvcnQgaW50ZXJmYWNlIElTdGF0ZSB7XG4gIG91dHB1dFZpZXc6IElPdXRwdXRWaWV3U3RhdGVcbiAgY29uZmlnUGFyYW1zOiBJUGFyYW1TdGF0ZVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElFZGl0b3JDb250cm9sbGVyIHtcbiAgZGVzdHJveSAoKTogdm9pZFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElFZGl0b3JDb250cm9sbGVyRmFjdG9yeSB7XG4gIG5ldyAoZWRpdG9yOiBUZXh0RWRpdG9yLCBtYW5hZ2VyOiBQbHVnaW5NYW5hZ2VyKTogSUVkaXRvckNvbnRyb2xsZXJcbn1cblxudHlwZSBFQ01hcDxUIGV4dGVuZHMgSUVkaXRvckNvbnRyb2xsZXI+ID0gV2Vha01hcDxUZXh0RWRpdG9yLCBUPlxuXG5leHBvcnQgY2xhc3MgUGx1Z2luTWFuYWdlciB7XG4gIHB1YmxpYyBjaGVja1Jlc3VsdHM6IFJlc3VsdHNEQlxuICBwdWJsaWMgb3V0cHV0VmlldzogT3V0cHV0UGFuZWxcbiAgcHVibGljIGNvbmZpZ1BhcmFtTWFuYWdlcjogQ29uZmlnUGFyYW1NYW5hZ2VyXG4gIHB1YmxpYyBsaW50ZXJTdXBwb3J0PzogTGludGVyU3VwcG9ydFxuICBwdWJsaWMgdG9vbHRpcFJlZ2lzdHJ5OiBUb29sdGlwUmVnaXN0cnlcbiAgcHJpdmF0ZSBkaXNwb3NhYmxlczogQ29tcG9zaXRlRGlzcG9zYWJsZVxuICBwcml2YXRlIGVtaXR0ZXI6IEVtaXR0ZXJcbiAgcHJpdmF0ZSBjb250cm9sbGVyczogRUNNYXA8RWRpdG9yQ29udHJvbD5cbiAgcHJpdmF0ZSBjaGVja1Jlc3VsdHNDb250cm9sbGVyczogRUNNYXA8Q2hlY2tSZXN1bHRzUHJvdmlkZXI+XG4gIHByaXZhdGUgY29udHJvbGxlckNsYXNzZXM6IFNldDx7bWFwOiBFQ01hcDxJRWRpdG9yQ29udHJvbGxlcj4sIGZhY3Rvcnk6IElFZGl0b3JDb250cm9sbGVyRmFjdG9yeX0+XG4gIGNvbnN0cnVjdG9yIChzdGF0ZTogSVN0YXRlKSB7XG4gICAgdGhpcy5kaXNwb3NhYmxlcyA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKClcbiAgICB0aGlzLmVtaXR0ZXIgPSBuZXcgRW1pdHRlcigpXG4gICAgdGhpcy5kaXNwb3NhYmxlcy5hZGQodGhpcy5lbWl0dGVyKVxuXG4gICAgdGhpcy5jb250cm9sbGVycyA9IG5ldyBXZWFrTWFwKClcbiAgICB0aGlzLmNoZWNrUmVzdWx0c0NvbnRyb2xsZXJzID0gbmV3IFdlYWtNYXAoKVxuICAgIHRoaXMuY29udHJvbGxlckNsYXNzZXMgPSBuZXcgU2V0KClcblxuICAgIHRoaXMuY2hlY2tSZXN1bHRzID0gbmV3IFJlc3VsdHNEQigpXG4gICAgdGhpcy5vdXRwdXRWaWV3ID0gbmV3IE91dHB1dFBhbmVsKHN0YXRlLm91dHB1dFZpZXcsIHRoaXMuY2hlY2tSZXN1bHRzKVxuICAgIHRoaXMudG9vbHRpcFJlZ2lzdHJ5ID0gbmV3IFRvb2x0aXBSZWdpc3RyeSh0aGlzKVxuICAgIHRoaXMuY29uZmlnUGFyYW1NYW5hZ2VyID0gbmV3IENvbmZpZ1BhcmFtTWFuYWdlcih0aGlzLm91dHB1dFZpZXcsIHN0YXRlLmNvbmZpZ1BhcmFtcylcblxuICAgIHRoaXMuYWRkRWRpdG9yQ29udHJvbGxlcih0aGlzLmNvbnRyb2xsZXJzLCBFZGl0b3JDb250cm9sKVxuICAgIHRoaXMuYWRkRWRpdG9yQ29udHJvbGxlcih0aGlzLmNoZWNrUmVzdWx0c0NvbnRyb2xsZXJzLCBDaGVja1Jlc3VsdHNQcm92aWRlcilcblxuICAgIHRoaXMuc3Vic2NyaWJlRWRpdG9yQ29udHJvbGxlcigpXG4gIH1cblxuICBwdWJsaWMgYWRkRWRpdG9yQ29udHJvbGxlciAobWFwOiBXZWFrTWFwPFRleHRFZGl0b3IsIElFZGl0b3JDb250cm9sbGVyPiwgZmFjdG9yeTogSUVkaXRvckNvbnRyb2xsZXJGYWN0b3J5KSB7XG4gICAgdGhpcy5jb250cm9sbGVyQ2xhc3Nlcy5hZGQoe21hcCwgZmFjdG9yeX0pXG4gICAgLy8gVE9ETzogc3Vic2NyaWJlP1xuICB9XG5cbiAgcHVibGljIGRlYWN0aXZhdGUgKCkge1xuICAgIHRoaXMuY2hlY2tSZXN1bHRzLmRlc3Ryb3koKVxuICAgIHRoaXMuZGlzcG9zYWJsZXMuZGlzcG9zZSgpXG5cbiAgICB0aGlzLmRlbGV0ZUVkaXRvckNvbnRyb2xsZXJzKClcbiAgICB0aGlzLm91dHB1dFZpZXcuZGVzdHJveSgpXG4gICAgdGhpcy5jb25maWdQYXJhbU1hbmFnZXIuZGVzdHJveSgpXG4gICAgaWYgKHRoaXMubGludGVyU3VwcG9ydCkge1xuICAgICAgdGhpcy5saW50ZXJTdXBwb3J0LmRlc3Ryb3koKVxuICAgICAgdGhpcy5saW50ZXJTdXBwb3J0ID0gdW5kZWZpbmVkXG4gICAgfVxuICB9XG5cbiAgcHVibGljIHNlcmlhbGl6ZSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG91dHB1dFZpZXc6IHRoaXMub3V0cHV0Vmlldy5zZXJpYWxpemUoKSxcbiAgICAgIGNvbmZpZ1BhcmFtczogdGhpcy5jb25maWdQYXJhbU1hbmFnZXIuc2VyaWFsaXplKClcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgb25XaWxsU2F2ZUJ1ZmZlciAoY2FsbGJhY2s6IFRUZXh0QnVmZmVyQ2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyLm9uKCd3aWxsLXNhdmUtYnVmZmVyJywgY2FsbGJhY2spXG4gIH1cblxuICBwdWJsaWMgb25EaWRTYXZlQnVmZmVyIChjYWxsYmFjazogVFRleHRCdWZmZXJDYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIub24oJ2RpZC1zYXZlLWJ1ZmZlcicsIGNhbGxiYWNrKVxuICB9XG5cbiAgcHVibGljIG9uRGlkU3RvcENoYW5naW5nIChjYWxsYmFjazogVFRleHRCdWZmZXJDYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIub24oJ2RpZC1zdG9wLWNoYW5naW5nJywgY2FsbGJhY2spXG4gIH1cblxuICBwdWJsaWMgd2lsbFNhdmVCdWZmZXIgKGJ1ZmZlcjogVGV4dEJ1ZmZlcikge1xuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIuZW1pdCgnd2lsbC1zYXZlLWJ1ZmZlcicsIGJ1ZmZlcilcbiAgfVxuXG4gIHB1YmxpYyBkaWRTYXZlQnVmZmVyIChidWZmZXI6IFRleHRCdWZmZXIpIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyLmVtaXQoJ2RpZC1zYXZlLWJ1ZmZlcicsIGJ1ZmZlcilcbiAgfVxuXG4gIHB1YmxpYyBkaWRTdG9wQ2hhbmdpbmcgKGJ1ZmZlcjogVGV4dEJ1ZmZlcikge1xuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIuZW1pdCgnZGlkLXN0b3AtY2hhbmdpbmcnLCBidWZmZXIpXG4gIH1cblxuICBwdWJsaWMgdG9nZ2xlUGFuZWwgKCkge1xuICAgIHRoaXMub3V0cHV0Vmlldy50b2dnbGUoKVxuICB9XG5cbiAgcHVibGljIGNvbnRyb2xsZXIgKGVkaXRvcjogVGV4dEVkaXRvcikge1xuICAgIHJldHVybiB0aGlzLmNvbnRyb2xsZXJzLmdldChlZGl0b3IpXG4gIH1cblxuICBwdWJsaWMgc2V0TGludGVyIChsaW50ZXI6IExpbnRlcikge1xuICAgIGlmIChhdG9tLmNvbmZpZy5nZXQoJ2lkZS1oYXNrZWxsLm1lc3NhZ2VEaXNwbGF5RnJvbnRlbmQnKSAhPT0gJ2xpbnRlcicpIHsgcmV0dXJuIH1cbiAgICB0aGlzLmxpbnRlclN1cHBvcnQgPSBuZXcgTGludGVyU3VwcG9ydChsaW50ZXIsIHRoaXMuY2hlY2tSZXN1bHRzKVxuICB9XG5cbiAgcHVibGljIG5leHRFcnJvciAoKSB7XG4gICAgaWYgKGF0b20uY29uZmlnLmdldCgnaWRlLWhhc2tlbGwubWVzc2FnZURpc3BsYXlGcm9udGVuZCcpICE9PSAnYnVpbHRpbicpIHsgcmV0dXJuIH1cbiAgICB0aGlzLm91dHB1dFZpZXcuc2hvd05leHRFcnJvcigpXG4gIH1cblxuICBwdWJsaWMgcHJldkVycm9yICgpIHtcbiAgICBpZiAoYXRvbS5jb25maWcuZ2V0KCdpZGUtaGFza2VsbC5tZXNzYWdlRGlzcGxheUZyb250ZW5kJykgIT09ICdidWlsdGluJykgeyByZXR1cm4gfVxuICAgIHRoaXMub3V0cHV0Vmlldy5zaG93UHJldkVycm9yKClcbiAgfVxuXG4gIHB1YmxpYyByZW1vdmVDb250cm9sbGVyIChlZGl0b3I6IFRleHRFZGl0b3IpIHtcbiAgICBmb3IgKGNvbnN0IHttYXB9IG9mIHRoaXMuY29udHJvbGxlckNsYXNzZXMpIHtcbiAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBtYXAuZ2V0KGVkaXRvcilcbiAgICAgIGlmIChjb250cm9sbGVyKSB7XG4gICAgICAgIGNvbnRyb2xsZXIuZGVzdHJveSgpXG4gICAgICAgIG1hcC5kZWxldGUoZWRpdG9yKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY29udHJvbGxlck9uR3JhbW1hciAoZWRpdG9yOiBUZXh0RWRpdG9yLCBncmFtbWFyOiBHcmFtbWFyKSB7XG4gICAgaWYgKGdyYW1tYXIuc2NvcGVOYW1lLm1hdGNoKC9oYXNrZWxsJC8pKSB7XG4gICAgICB0aGlzLmFkZENvbnRyb2xsZXIoZWRpdG9yKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbW92ZUNvbnRyb2xsZXIoZWRpdG9yKVxuICAgIH1cbiAgfVxuXG4gIC8vIE9ic2VydmUgdGV4dCBlZGl0b3JzIHRvIGF0dGFjaCBjb250cm9sbGVyXG4gIHByaXZhdGUgc3Vic2NyaWJlRWRpdG9yQ29udHJvbGxlciAoKSB7XG4gICAgdGhpcy5kaXNwb3NhYmxlcy5hZGQoXG4gICAgICBhdG9tLndvcmtzcGFjZS5vYnNlcnZlVGV4dEVkaXRvcnMoKGVkaXRvcikgPT4ge1xuICAgICAgICB0aGlzLmRpc3Bvc2FibGVzLmFkZChcbiAgICAgICAgICBlZGl0b3Iub25EaWRDaGFuZ2VHcmFtbWFyKChncmFtbWFyKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJPbkdyYW1tYXIoZWRpdG9yLCBncmFtbWFyKVxuICAgICAgICAgIH0pXG4gICAgICAgIClcbiAgICAgICAgdGhpcy5jb250cm9sbGVyT25HcmFtbWFyKGVkaXRvciwgZWRpdG9yLmdldEdyYW1tYXIoKSlcbiAgICAgIH0pXG4gICAgKVxuICB9XG5cbiAgcHJpdmF0ZSBkZWxldGVFZGl0b3JDb250cm9sbGVycyAoKSB7XG4gICAgZm9yIChjb25zdCBlZGl0b3Igb2YgYXRvbS53b3Jrc3BhY2UuZ2V0VGV4dEVkaXRvcnMoKSkgeyB0aGlzLnJlbW92ZUNvbnRyb2xsZXIoZWRpdG9yKSB9XG4gIH1cblxuICBwcml2YXRlIGFkZENvbnRyb2xsZXIgKGVkaXRvcjogVGV4dEVkaXRvcikge1xuICAgIGZvciAoY29uc3Qge21hcCwgZmFjdG9yeX0gb2YgdGhpcy5jb250cm9sbGVyQ2xhc3Nlcykge1xuICAgICAgaWYgKCFtYXAuaGFzKGVkaXRvcikpIHtcbiAgICAgICAgY29uc3QgY29udHJvbGxlciA9IG5ldyBmYWN0b3J5KGVkaXRvciwgdGhpcylcbiAgICAgICAgbWFwLnNldChlZGl0b3IsIGNvbnRyb2xsZXIpXG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0=