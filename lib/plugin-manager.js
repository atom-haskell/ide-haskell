"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const results_db_1 = require("./results-db");
const output_panel_1 = require("./output-panel");
const config_params_1 = require("./config-params");
const editor_control_1 = require("./editor-control");
const linter_support_1 = require("./linter-support");
const tooltip_registry_1 = require("./tooltip-registry");
class PluginManager {
    constructor(state) {
        this.checkResults = new results_db_1.ResultsDB();
        this.disposables = new atom_1.CompositeDisposable();
        this.controllers = new WeakMap();
        this.emitter = new atom_1.Emitter();
        this.disposables.add(this.emitter);
        this.tooltipRegistry = new tooltip_registry_1.TooltipRegistry(this);
        this.outputView = new output_panel_1.OutputPanel(state.outputView, this.checkResults);
        this.subscribeEditorController();
        this.configParamManager = new config_params_1.ConfigParamManager(this.outputView, state.configParams);
        this.linterSupport = undefined;
    }
    deactivate() {
        this.checkResults.destroy();
        this.disposables.dispose();
        this.deleteEditorControllers();
        this.outputView.destroy();
        this.configParamManager.destroy();
        if (this.linterSupport) {
            this.linterSupport.destroy();
            this.linterSupport = undefined;
        }
    }
    serialize() {
        return {
            outputView: this.outputView.serialize(),
            configParams: this.configParamManager.serialize()
        };
    }
    onWillSaveBuffer(callback) {
        return this.emitter.on('will-save-buffer', callback);
    }
    onDidSaveBuffer(callback) {
        return this.emitter.on('did-save-buffer', callback);
    }
    onDidStopChanging(callback) {
        return this.emitter.on('did-stop-changing', callback);
    }
    willSaveBuffer(buffer) {
        return this.emitter.emit('will-save-buffer', buffer);
    }
    didSaveBuffer(buffer) {
        return this.emitter.emit('did-save-buffer', buffer);
    }
    didStopChanging(buffer) {
        return this.emitter.emit('did-stop-changing', buffer);
    }
    togglePanel() {
        this.outputView.toggle();
    }
    onResultsUpdated(callback) {
        return this.checkResults.onDidUpdate(callback);
    }
    controller(editor) {
        return this.controllers.get(editor);
    }
    setLinter(linter) {
        if (atom.config.get('ide-haskell.messageDisplayFrontend') !== 'linter') {
            return;
        }
        this.linterSupport = new linter_support_1.LinterSupport(linter, this.checkResults);
    }
    nextError() {
        if (atom.config.get('ide-haskell.messageDisplayFrontend') !== 'builtin') {
            return;
        }
        this.outputView.showNextError();
    }
    prevError() {
        if (atom.config.get('ide-haskell.messageDisplayFrontend') !== 'builtin') {
            return;
        }
        this.outputView.showPrevError();
    }
    removeController(editor) {
        this.controllers.delete(editor);
    }
    controllerOnGrammar(editor, grammar) {
        if (grammar.scopeName.match(/haskell$/)) {
            this.addController(editor);
        }
        else {
            this.removeController(editor);
        }
    }
    subscribeEditorController() {
        this.disposables.add(atom.workspace.observeTextEditors((editor) => {
            this.disposables.add(editor.onDidChangeGrammar((grammar) => {
                this.controllerOnGrammar(editor, grammar);
            }));
            this.controllerOnGrammar(editor, editor.getGrammar());
        }));
    }
    deleteEditorControllers() {
        for (const editor of atom.workspace.getTextEditors()) {
            this.removeController(editor);
        }
    }
    addController(editor) {
        if (!this.controllers.has(editor)) {
            const controller = new editor_control_1.EditorControl(editor, this);
            this.controllers.set(editor, controller);
        }
    }
}
exports.PluginManager = PluginManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLW1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcGx1Z2luLW1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBeUY7QUFDekYsNkNBQXVEO0FBQ3ZELGlEQUEwQztBQUMxQyxtREFBeUU7QUFDekUscURBQW1FO0FBQ25FLHFEQUE4QztBQUM5Qyx5REFBa0Q7QUFjbEQ7SUFTRSxZQUFhLEtBQWE7UUFDeEIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLHNCQUFTLEVBQUUsQ0FBQTtRQUVuQyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksMEJBQW1CLEVBQUUsQ0FBQTtRQUM1QyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUE7UUFDaEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLGNBQU8sRUFBRSxDQUFBO1FBQzVCLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUVsQyxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksa0NBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUVoRCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksMEJBQVcsQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUV0RSxJQUFJLENBQUMseUJBQXlCLEVBQUUsQ0FBQTtRQUVoQyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxrQ0FBa0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUVyRixJQUFJLENBQUMsYUFBYSxHQUFHLFNBQVMsQ0FBQTtJQUNoQyxDQUFDO0lBRU0sVUFBVTtRQUNmLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUE7UUFDM0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUUxQixJQUFJLENBQUMs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QUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLE1BQU0sVUFBVSxHQUFHLElBQUksOEJBQWEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUE7WUFDbEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFBO1FBQzFDLENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUF2SUQsc0NBdUlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb3NpdGVEaXNwb3NhYmxlLCBFbWl0dGVyLCBUZXh0RWRpdG9yLCBQb2ludCwgVGV4dEJ1ZmZlciwgR3JhbW1hcn0gZnJvbSAnYXRvbSdcbmltcG9ydCB7UmVzdWx0c0RCLCBUVXBkYXRlQ2FsbGJhY2t9IGZyb20gJy4vcmVzdWx0cy1kYidcbmltcG9ydCB7T3V0cHV0UGFuZWx9IGZyb20gJy4vb3V0cHV0LXBhbmVsJ1xuaW1wb3J0IHtDb25maWdQYXJhbU1hbmFnZXIsIElTdGF0ZSBhcyBJUGFyYW1TdGF0ZX0gZnJvbSAnLi9jb25maWctcGFyYW1zJ1xuaW1wb3J0IHtFZGl0b3JDb250cm9sLCBUVGV4dEJ1ZmZlckNhbGxiYWNrfSBmcm9tICcuL2VkaXRvci1jb250cm9sJ1xuaW1wb3J0IHtMaW50ZXJTdXBwb3J0fSBmcm9tICcuL2xpbnRlci1zdXBwb3J0J1xuaW1wb3J0IHtUb29sdGlwUmVnaXN0cnl9IGZyb20gJy4vdG9vbHRpcC1yZWdpc3RyeSdcblxudHlwZSBMaW50ZXIgPSBhbnkgLy8gVE9ETzogU3RlYWwgdGhpcyBmcm9tIGF0b20tdHlwZXNjcmlwdFxuXG5leHBvcnQgdHlwZSBURXZlbnRUeXBlID0gJ2tleWJvYXJkJyB8ICdjb250ZXh0JyB8ICdtb3VzZScgfCAnc2VsZWN0aW9uJ1xudHlwZSBUU2hvd1Rvb2x0aXBDYWxsYmFja1BhcmFtcyA9IHtlZGl0b3I6IFRleHRFZGl0b3IsIHBvczogUG9pbnQsIGV2ZW50VHlwZTogVEV2ZW50VHlwZX1cbnR5cGUgVFNob3dUb29sdGlwQ2FsbGJhY2sgPSAocGFyczogVFNob3dUb29sdGlwQ2FsbGJhY2tQYXJhbXMpID0+IHZvaWRcblxudHlwZSBJT3V0cHV0Vmlld1N0YXRlID0gYW55XG5leHBvcnQgaW50ZXJmYWNlIElTdGF0ZSB7XG4gIG91dHB1dFZpZXc6IElPdXRwdXRWaWV3U3RhdGVcbiAgY29uZmlnUGFyYW1zOiBJUGFyYW1TdGF0ZVxufVxuXG5leHBvcnQgY2xhc3MgUGx1Z2luTWFuYWdlciB7XG4gIHB1YmxpYyBjaGVja1Jlc3VsdHM6IFJlc3VsdHNEQlxuICBwdWJsaWMgZGlzcG9zYWJsZXM6IENvbXBvc2l0ZURpc3Bvc2FibGVcbiAgcHVibGljIGNvbnRyb2xsZXJzOiBXZWFrTWFwPFRleHRFZGl0b3IsIEVkaXRvckNvbnRyb2w+XG4gIHB1YmxpYyBlbWl0dGVyOiBFbWl0dGVyXG4gIHB1YmxpYyBvdXRwdXRWaWV3OiBPdXRwdXRQYW5lbFxuICBwdWJsaWMgY29uZmlnUGFyYW1NYW5hZ2VyOiBDb25maWdQYXJhbU1hbmFnZXJcbiAgcHVibGljIGxpbnRlclN1cHBvcnQ/OiBMaW50ZXJTdXBwb3J0XG4gIHB1YmxpYyB0b29sdGlwUmVnaXN0cnk6IFRvb2x0aXBSZWdpc3RyeVxuICBjb25zdHJ1Y3RvciAoc3RhdGU6IElTdGF0ZSkge1xuICAgIHRoaXMuY2hlY2tSZXN1bHRzID0gbmV3IFJlc3VsdHNEQigpXG5cbiAgICB0aGlzLmRpc3Bvc2FibGVzID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuICAgIHRoaXMuY29udHJvbGxlcnMgPSBuZXcgV2Vha01hcCgpXG4gICAgdGhpcy5lbWl0dGVyID0gbmV3IEVtaXR0ZXIoKVxuICAgIHRoaXMuZGlzcG9zYWJsZXMuYWRkKHRoaXMuZW1pdHRlcilcblxuICAgIHRoaXMudG9vbHRpcFJlZ2lzdHJ5ID0gbmV3IFRvb2x0aXBSZWdpc3RyeSh0aGlzKVxuXG4gICAgdGhpcy5vdXRwdXRWaWV3ID0gbmV3IE91dHB1dFBhbmVsKHN0YXRlLm91dHB1dFZpZXcsIHRoaXMuY2hlY2tSZXN1bHRzKVxuXG4gICAgdGhpcy5zdWJzY3JpYmVFZGl0b3JDb250cm9sbGVyKClcblxuICAgIHRoaXMuY29uZmlnUGFyYW1NYW5hZ2VyID0gbmV3IENvbmZpZ1BhcmFtTWFuYWdlcih0aGlzLm91dHB1dFZpZXcsIHN0YXRlLmNvbmZpZ1BhcmFtcylcblxuICAgIHRoaXMubGludGVyU3VwcG9ydCA9IHVuZGVmaW5lZFxuICB9XG5cbiAgcHVibGljIGRlYWN0aXZhdGUgKCkge1xuICAgIHRoaXMuY2hlY2tSZXN1bHRzLmRlc3Ryb3koKVxuICAgIHRoaXMuZGlzcG9zYWJsZXMuZGlzcG9zZSgpXG5cbiAgICB0aGlzLmRlbGV0ZUVkaXRvckNvbnRyb2xsZXJzKClcbiAgICB0aGlzLm91dHB1dFZpZXcuZGVzdHJveSgpXG4gICAgdGhpcy5jb25maWdQYXJhbU1hbmFnZXIuZGVzdHJveSgpXG4gICAgaWYgKHRoaXMubGludGVyU3VwcG9ydCkge1xuICAgICAgdGhpcy5saW50ZXJTdXBwb3J0LmRlc3Ryb3koKVxuICAgICAgdGhpcy5saW50ZXJTdXBwb3J0ID0gdW5kZWZpbmVkXG4gICAgfVxuICB9XG5cbiAgcHVibGljIHNlcmlhbGl6ZSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG91dHB1dFZpZXc6IHRoaXMub3V0cHV0Vmlldy5zZXJpYWxpemUoKSxcbiAgICAgIGNvbmZpZ1BhcmFtczogdGhpcy5jb25maWdQYXJhbU1hbmFnZXIuc2VyaWFsaXplKClcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgb25XaWxsU2F2ZUJ1ZmZlciAoY2FsbGJhY2s6IFRUZXh0QnVmZmVyQ2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyLm9uKCd3aWxsLXNhdmUtYnVmZmVyJywgY2FsbGJhY2spXG4gIH1cblxuICBwdWJsaWMgb25EaWRTYXZlQnVmZmVyIChjYWxsYmFjazogVFRleHRCdWZmZXJDYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIub24oJ2RpZC1zYXZlLWJ1ZmZlcicsIGNhbGxiYWNrKVxuICB9XG5cbiAgcHVibGljIG9uRGlkU3RvcENoYW5naW5nIChjYWxsYmFjazogVFRleHRCdWZmZXJDYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIub24oJ2RpZC1zdG9wLWNoYW5naW5nJywgY2FsbGJhY2spXG4gIH1cblxuICBwdWJsaWMgd2lsbFNhdmVCdWZmZXIgKGJ1ZmZlcjogVGV4dEJ1ZmZlcikge1xuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIuZW1pdCgnd2lsbC1zYXZlLWJ1ZmZlcicsIGJ1ZmZlcilcbiAgfVxuXG4gIHB1YmxpYyBkaWRTYXZlQnVmZmVyIChidWZmZXI6IFRleHRCdWZmZXIpIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyLmVtaXQoJ2RpZC1zYXZlLWJ1ZmZlcicsIGJ1ZmZlcilcbiAgfVxuXG4gIHB1YmxpYyBkaWRTdG9wQ2hhbmdpbmcgKGJ1ZmZlcjogVGV4dEJ1ZmZlcikge1xuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIuZW1pdCgnZGlkLXN0b3AtY2hhbmdpbmcnLCBidWZmZXIpXG4gIH1cblxuICBwdWJsaWMgdG9nZ2xlUGFuZWwgKCkge1xuICAgIHRoaXMub3V0cHV0Vmlldy50b2dnbGUoKVxuICB9XG5cbiAgcHVibGljIG9uUmVzdWx0c1VwZGF0ZWQgKGNhbGxiYWNrOiBUVXBkYXRlQ2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5jaGVja1Jlc3VsdHMub25EaWRVcGRhdGUoY2FsbGJhY2spXG4gIH1cblxuICBwdWJsaWMgY29udHJvbGxlciAoZWRpdG9yOiBUZXh0RWRpdG9yKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udHJvbGxlcnMuZ2V0KGVkaXRvcilcbiAgfVxuXG4gIHB1YmxpYyBzZXRMaW50ZXIgKGxpbnRlcjogTGludGVyKSB7XG4gICAgaWYgKGF0b20uY29uZmlnLmdldCgnaWRlLWhhc2tlbGwubWVzc2FnZURpc3BsYXlGcm9udGVuZCcpICE9PSAnbGludGVyJykgeyByZXR1cm4gfVxuICAgIHRoaXMubGludGVyU3VwcG9ydCA9IG5ldyBMaW50ZXJTdXBwb3J0KGxpbnRlciwgdGhpcy5jaGVja1Jlc3VsdHMpXG4gIH1cblxuICBwdWJsaWMgbmV4dEVycm9yICgpIHtcbiAgICBpZiAoYXRvbS5jb25maWcuZ2V0KCdpZGUtaGFza2VsbC5tZXNzYWdlRGlzcGxheUZyb250ZW5kJykgIT09ICdidWlsdGluJykgeyByZXR1cm4gfVxuICAgIHRoaXMub3V0cHV0Vmlldy5zaG93TmV4dEVycm9yKClcbiAgfVxuXG4gIHB1YmxpYyBwcmV2RXJyb3IgKCkge1xuICAgIGlmIChhdG9tLmNvbmZpZy5nZXQoJ2lkZS1oYXNrZWxsLm1lc3NhZ2VEaXNwbGF5RnJvbnRlbmQnKSAhPT0gJ2J1aWx0aW4nKSB7IHJldHVybiB9XG4gICAgdGhpcy5vdXRwdXRWaWV3LnNob3dQcmV2RXJyb3IoKVxuICB9XG5cbiAgcHVibGljIHJlbW92ZUNvbnRyb2xsZXIgKGVkaXRvcjogVGV4dEVkaXRvcikge1xuICAgIHRoaXMuY29udHJvbGxlcnMuZGVsZXRlKGVkaXRvcilcbiAgfVxuXG4gIHByaXZhdGUgY29udHJvbGxlck9uR3JhbW1hciAoZWRpdG9yOiBUZXh0RWRpdG9yLCBncmFtbWFyOiBHcmFtbWFyKSB7XG4gICAgaWYgKGdyYW1tYXIuc2NvcGVOYW1lLm1hdGNoKC9oYXNrZWxsJC8pKSB7XG4gICAgICB0aGlzLmFkZENvbnRyb2xsZXIoZWRpdG9yKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbW92ZUNvbnRyb2xsZXIoZWRpdG9yKVxuICAgIH1cbiAgfVxuXG4gIC8vIE9ic2VydmUgdGV4dCBlZGl0b3JzIHRvIGF0dGFjaCBjb250cm9sbGVyXG4gIHByaXZhdGUgc3Vic2NyaWJlRWRpdG9yQ29udHJvbGxlciAoKSB7XG4gICAgdGhpcy5kaXNwb3NhYmxlcy5hZGQoXG4gICAgICBhdG9tLndvcmtzcGFjZS5vYnNlcnZlVGV4dEVkaXRvcnMoKGVkaXRvcikgPT4ge1xuICAgICAgICB0aGlzLmRpc3Bvc2FibGVzLmFkZChcbiAgICAgICAgICBlZGl0b3Iub25EaWRDaGFuZ2VHcmFtbWFyKChncmFtbWFyKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJPbkdyYW1tYXIoZWRpdG9yLCBncmFtbWFyKVxuICAgICAgICAgIH0pXG4gICAgICAgIClcbiAgICAgICAgdGhpcy5jb250cm9sbGVyT25HcmFtbWFyKGVkaXRvciwgZWRpdG9yLmdldEdyYW1tYXIoKSlcbiAgICAgIH0pXG4gICAgKVxuICB9XG5cbiAgcHJpdmF0ZSBkZWxldGVFZGl0b3JDb250cm9sbGVycyAoKSB7XG4gICAgZm9yIChjb25zdCBlZGl0b3Igb2YgYXRvbS53b3Jrc3BhY2UuZ2V0VGV4dEVkaXRvcnMoKSkgeyB0aGlzLnJlbW92ZUNvbnRyb2xsZXIoZWRpdG9yKSB9XG4gIH1cblxuICBwcml2YXRlIGFkZENvbnRyb2xsZXIgKGVkaXRvcjogVGV4dEVkaXRvcikge1xuICAgIGlmICghdGhpcy5jb250cm9sbGVycy5oYXMoZWRpdG9yKSkge1xuICAgICAgY29uc3QgY29udHJvbGxlciA9IG5ldyBFZGl0b3JDb250cm9sKGVkaXRvciwgdGhpcylcbiAgICAgIHRoaXMuY29udHJvbGxlcnMuc2V0KGVkaXRvciwgY29udHJvbGxlcilcbiAgICB9XG4gIH1cbn1cbiJdfQ==