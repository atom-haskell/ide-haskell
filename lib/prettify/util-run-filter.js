'use babel';
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
function default_1({ command, args, cwd, stdin }) {
    return new Promise((resolve, reject) => {
        let lines = [];
        let stderr = [];
        let proc = new atom_1.BufferedProcess({
            command: command,
            args: args,
            options: { cwd },
            stdout: (line) => { lines.push(line); },
            stderr: (line) => { stderr.push(line); },
            exit: (code) => {
                if (stderr.length > 0) {
                    atom.notifications.addError('Prettifier problems', {
                        message: 'Prettifier reported some problems',
                        detail: stderr.join(''),
                        dismissable: true
                    });
                }
                if (code === 0) {
                    resolve(lines.join(''));
                }
                else {
                    reject(new Error(`Prettifier exited with non-zero exit status ${code}`));
                }
            }
        });
        proc.onWillThrowError(({ error, handle }) => {
            console.error(error);
            reject(error);
            handle();
        });
        if (stdin) {
            proc.process.stdin.write(stdin);
            proc.process.stdin.end();
        }
    });
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC1ydW4tZmlsdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3ByZXR0aWZ5L3V0aWwtcnVuLWZpbHRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUE7O0FBRVgsK0JBQW9DO0FBRXBDLG1CQUF5QixFQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBQztJQUNsRCxNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTTtRQUNqQyxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUE7UUFDZCxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUE7UUFDZixJQUFJLElBQUksR0FBRyxJQUFJLHNCQUFlLENBQUM7WUFDN0IsT0FBTyxFQUFFLE9BQU87WUFDaEIsSUFBSSxFQUFFLElBQUk7WUFDVixPQUFPLEVBQUUsRUFBQyxHQUFHLEVBQUM7WUFDZCxNQUFNLEVBQUUsQ0FBQyxJQUFJLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQSxDQUFDLENBQUM7WUFDdEMsTUFBTSxFQUFFLENBQUMsSUFBSSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBQyxDQUFDO1lBQ3ZDLElBQUksRUFBRSxDQUFDLElBQUk7Z0JBQ1QsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUN0QixJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxxQkFBcUIsRUFBRTt3QkFDakQsT0FBTyxFQUFFLG1DQUFtQzt3QkFDNUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO3dCQUN2QixXQUFXLEVBQUUsSUFBSTtxQkFDbEIsQ0FBQyxDQUFBO2dCQUNKLENBQUM7Z0JBQ0QsRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtnQkFBQyxDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNoRCxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsK0NBQStDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQTtnQkFDMUUsQ0FBQztZQUNILENBQUM7U0FDRixDQUFDLENBQUE7UUFFRixJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLEVBQUM7WUFDcEMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQTtZQUNwQixNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7WUFDYixNQUFNLEVBQUUsQ0FBQTtRQUNWLENBQUMsQ0FBQyxDQUFBO1FBRUYsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNWLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQTtZQUMvQixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQTtRQUMxQixDQUFDO0lBQ0gsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDO0FBbkNELDRCQW1DQyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnXG5cbmltcG9ydCB7QnVmZmVyZWRQcm9jZXNzfSBmcm9tICdhdG9tJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoe2NvbW1hbmQsIGFyZ3MsIGN3ZCwgc3RkaW59KSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgbGV0IGxpbmVzID0gW11cbiAgICBsZXQgc3RkZXJyID0gW11cbiAgICBsZXQgcHJvYyA9IG5ldyBCdWZmZXJlZFByb2Nlc3Moe1xuICAgICAgY29tbWFuZDogY29tbWFuZCxcbiAgICAgIGFyZ3M6IGFyZ3MsXG4gICAgICBvcHRpb25zOiB7Y3dkfSxcbiAgICAgIHN0ZG91dDogKGxpbmUpID0+IHsgbGluZXMucHVzaChsaW5lKSB9LFxuICAgICAgc3RkZXJyOiAobGluZSkgPT4geyBzdGRlcnIucHVzaChsaW5lKSB9LFxuICAgICAgZXhpdDogKGNvZGUpID0+IHtcbiAgICAgICAgaWYgKHN0ZGVyci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgYXRvbS5ub3RpZmljYXRpb25zLmFkZEVycm9yKCdQcmV0dGlmaWVyIHByb2JsZW1zJywge1xuICAgICAgICAgICAgbWVzc2FnZTogJ1ByZXR0aWZpZXIgcmVwb3J0ZWQgc29tZSBwcm9ibGVtcycsXG4gICAgICAgICAgICBkZXRhaWw6IHN0ZGVyci5qb2luKCcnKSxcbiAgICAgICAgICAgIGRpc21pc3NhYmxlOiB0cnVlXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29kZSA9PT0gMCkgeyByZXNvbHZlKGxpbmVzLmpvaW4oJycpKSB9IGVsc2Uge1xuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFByZXR0aWZpZXIgZXhpdGVkIHdpdGggbm9uLXplcm8gZXhpdCBzdGF0dXMgJHtjb2RlfWApKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcblxuICAgIHByb2Mub25XaWxsVGhyb3dFcnJvcigoe2Vycm9yLCBoYW5kbGV9KSA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yKVxuICAgICAgcmVqZWN0KGVycm9yKVxuICAgICAgaGFuZGxlKClcbiAgICB9KVxuXG4gICAgaWYgKHN0ZGluKSB7XG4gICAgICBwcm9jLnByb2Nlc3Muc3RkaW4ud3JpdGUoc3RkaW4pXG4gICAgICBwcm9jLnByb2Nlc3Muc3RkaW4uZW5kKClcbiAgICB9XG4gIH0pXG59XG4iXX0=