"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const utils_1 = require("./utils");
class UPI {
    constructor(pluginManager) {
        this.pluginManager = pluginManager;
    }
    registerPlugin(disposables, name) {
        return new UPIInstance(this.pluginManager, disposables, name);
    }
}
exports.UPI = UPI;
class UPIInstance {
    constructor(pluginManager, disposables, pluginName) {
        this.pluginManager = pluginManager;
        this.pluginName = pluginName;
        this.disposables = new atom_1.CompositeDisposable();
        disposables.add(this.disposables);
        this.messageProvider = this.pluginManager.resultsDB.registerProvider(pluginName);
        this.disposables.add(this.messageProvider);
        this.messages = [];
    }
    setMenu(name, menu) {
        let menuDisp;
        this.disposables.add(menuDisp = atom.menu.add([{
                label: utils_1.MAIN_MENU_LABEL,
                submenu: [{ label: name, submenu: menu }]
            }
        ]));
        return menuDisp;
    }
    setStatus(status) {
        return this.pluginManager.outputPanel.backendStatus(this.pluginName, status);
    }
    addMessages(messages, types) {
        this.messages.push(...messages);
        this.messageProvider.setMessages(this.messages);
    }
    setMessages(messages, types) {
        this.messages = [...messages];
        this.messageProvider.setMessages(this.messages);
    }
    clearMessages(types) {
        this.messages = this.messages.filter(({ severity }) => !types.includes(severity));
        this.messageProvider.setMessages(this.messages);
    }
    setMessageTypes(types) {
        return (() => {
            const result = [];
            for (const type of Object.keys(types)) {
                const opts = types[type];
                result.push(this.pluginManager.outputPanel.createTab(type, opts));
            }
            return result;
        })();
    }
    onShouldShowTooltip(callback) {
        const disp = this.pluginManager.tooltipRegistry.register(this.pluginName, { priority: 100, handler: callback });
        this.disposables.add(disp);
        return disp;
    }
    showTooltip({ editor, pos, eventType, detail, tooltip }) {
        if (!eventType) {
            eventType = utils_1.getEventType(detail);
        }
        this.pluginManager.tooltipRegistry.showTooltip(editor, eventType, { pluginName: this.pluginName, tooltip });
    }
    onWillSaveBuffer(callback) {
        let disp;
        this.disposables.add(disp = this.pluginManager.onWillSaveBuffer(callback));
        return disp;
    }
    onDidSaveBuffer(callback) {
        let disp;
        this.disposables.add(disp = this.pluginManager.onDidSaveBuffer(callback));
        return disp;
    }
    onDidStopChanging(callback) {
        let disp;
        this.disposables.add(disp = this.pluginManager.onDidStopChanging(callback));
        return disp;
    }
    addPanelControl(element, opts) {
        if (typeof element === 'string') {
            return this.pluginManager.outputPanel.addPanelControl(element, opts);
        }
        else {
            const newOpts = Object.assign({}, opts, { element });
            return this.pluginManager.outputPanel.addPanelControl(DummyElement, newOpts);
        }
    }
    addConfigParam(spec) {
        return this.pluginManager.configParamManager.add(this.pluginName, spec);
    }
    getConfigParam(pluginName, name) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!name) {
                name = pluginName;
                ({ pluginName } = this);
            }
            return this.pluginManager.configParamManager.get(pluginName, name);
        });
    }
    setConfigParam(pluginName, name, value) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!value) {
                value = name;
                name = pluginName;
                ({ pluginName } = this);
            }
            return this.pluginManager.configParamManager.set(pluginName, name, value);
        });
    }
    withEventRange({ editor, detail, eventType, pos, controller }, callback) {
        let ppos;
        if (pos) {
            ppos = atom_1.Point.fromObject(pos);
        }
        if (!eventType) {
            eventType = utils_1.getEventType(detail);
        }
        if (!controller && editor) {
            controller = this.pluginManager.controller(editor);
        }
        if (!controller) {
            return;
        }
        const res = controller.getEventRange(eventType);
        if (!res) {
            return;
        }
        return callback(res);
    }
}
class DummyElement {
    constructor(opts) {
        this.opts = opts;
        this.element = opts.element.cloneNode(true);
        this.init();
    }
    update(opts) {
        this.opts = opts;
        this.element.remove();
        this.element = opts.element.cloneNode(true);
        this.init();
    }
    init() {
        const { id, events, classes, style, attrs } = this.opts;
        if (id) {
            this.element.id = id;
        }
        if (events) {
            for (const ev of Object.keys(events)) {
                this.element.addEventListener(ev, events[ev]);
            }
        }
        if (classes) {
            for (const cls of classes) {
                this.element.classList.add(cls);
            }
        }
        if (style) {
            for (const st of Object.keys(style)) {
                this.element.style[st] = style[st];
            }
        }
        if (attrs) {
            for (const at of Object.keys(attrs)) {
                this.element.setAttribute(at, attrs[at]);
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,