"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const utils_1 = require("../utils");
const dummy_element_1 = require("./dummy-element");
function instance(pluginManager, outerDisposables, pluginName) {
    const disposables = new atom_1.CompositeDisposable();
    outerDisposables.add(disposables);
    const messageProvider = pluginManager.resultsDB.registerProvider(pluginName);
    disposables.add(messageProvider);
    let messages = [];
    return {
        setMenu(name, menu) {
            let menuDisp;
            disposables.add(menuDisp = atom.menu.add([{
                    label: utils_1.MAIN_MENU_LABEL,
                    submenu: [{ label: name, submenu: menu }]
                }
            ]));
            return menuDisp;
        },
        setStatus(status) {
            return pluginManager.outputPanel.backendStatus(pluginName, status);
        },
        addMessages(newMessages, types) {
            messages.push(...newMessages);
            messageProvider.setMessages(messages);
        },
        setMessages(newMessages, types) {
            messages = [...newMessages];
            messageProvider.setMessages(messages);
        },
        clearMessages(types) {
            messages = messages.filter(({ severity }) => !types.includes(severity));
            messageProvider.setMessages(messages);
        },
        setMessageTypes(types) {
            return (() => {
                const result = [];
                for (const type of Object.keys(types)) {
                    const opts = types[type];
                    result.push(pluginManager.outputPanel.createTab(type, opts));
                }
                return result;
            })();
        },
        onShouldShowTooltip(callback) {
            const disp = pluginManager.tooltipRegistry.register(pluginName, { priority: 100, handler: callback });
            disposables.add(disp);
            return disp;
        },
        showTooltip({ editor, pos, eventType, detail, tooltip }) {
            if (!eventType) {
                eventType = utils_1.getEventType(detail);
            }
            pluginManager.tooltipRegistry.showTooltip(editor, eventType, { pluginName, tooltip });
        },
        onWillSaveBuffer(callback) {
            let disp;
            disposables.add(disp = pluginManager.onWillSaveBuffer(callback));
            return disp;
        },
        onDidSaveBuffer(callback) {
            let disp;
            disposables.add(disp = pluginManager.onDidSaveBuffer(callback));
            return disp;
        },
        onDidStopChanging(callback) {
            let disp;
            disposables.add(disp = pluginManager.onDidStopChanging(callback));
            return disp;
        },
        addPanelControl(element, opts) {
            if (typeof element === 'string') {
                return pluginManager.outputPanel.addPanelControl(element, opts);
            }
            else {
                const newOpts = Object.assign({}, opts, { element });
                return pluginManager.outputPanel.addPanelControl(dummy_element_1.DummyElement, newOpts);
            }
        },
        addConfigParam(specs) {
            const disp = new atom_1.CompositeDisposable();
            for (const name of Object.keys(specs)) {
                const spec = specs[name];
                disp.add(pluginManager.configParamManager.add(pluginName, name, spec));
            }
            return disp;
        },
        getConfigParam(otherPluginName, name) {
            return __awaiter(this, void 0, void 0, function* () {
                if (!name) {
                    name = otherPluginName;
                    otherPluginName = pluginName;
                }
                return pluginManager.configParamManager.get(otherPluginName, name);
            });
        },
        setConfigParam(otherPluginName, name, value) {
            return __awaiter(this, void 0, void 0, function* () {
                if (value === undefined) {
                    value = name;
                    name = otherPluginName;
                    otherPluginName = pluginName;
                }
                return pluginManager.configParamManager.set(otherPluginName, name, value);
            });
        },
        withEventRange({ editor, detail, eventType, pos }, callback) {
            let ppos;
            if (pos) {
                ppos = atom_1.Point.fromObject(pos);
            }
            if (!eventType) {
                eventType = utils_1.getEventType(detail);
            }
            const controller = pluginManager.controller(editor);
            if (!controller) {
                return;
            }
            const res = controller.getEventRange(eventType);
            if (!res) {
                return;
            }
            return callback(res);
        }
    };
}
exports.instance = instance;
//# sourceMappingURL=data:application/json;base64,