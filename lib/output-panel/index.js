"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const etch = require("etch");
const atom_1 = require("atom");
const output_panel_buttons_1 = require("./views/output-panel-buttons");
const output_panel_checkbox_1 = require("./views/output-panel-checkbox");
const progress_bar_1 = require("./views/progress-bar");
const output_panel_items_1 = require("./views/output-panel-items");
const $ = etch.dom;
class OutputPanel {
    constructor(state = {}, results) {
        this.state = state;
        this.results = results;
        this.hiddenOutput = true;
        this.elements = new Set();
        this.statusMap = new Map();
        this.disposables = new atom_1.CompositeDisposable();
        etch.initialize(this);
        atom.config.observe('ide-haskell.panelPosition', (value) => {
            this.pos = value;
            const options = {
                item: this,
                visible: this.state.visibility || true
            };
            switch (this.pos) {
                case 'top':
                    atom.workspace.addTopPanel(options);
                    break;
                case 'bottom':
                    atom.workspace.addBottomPanel(options);
                    break;
                case 'left':
                    atom.workspace.addLeftPanel(options);
                    break;
                case 'right':
                    atom.workspace.addRightPanel(options);
                    break;
                default:
            }
            if (this.element) {
                this.update();
            }
        });
        this.disposables.add(atom.tooltips.add(this.refs.status, {
            class: 'ide-haskell-status-tooltip',
            title: () => {
                const res = [];
                for (const [plugin, { status, detail }] of this.statusMap.entries()) {
                    res.push(`
          <ide-haskell-status-item>
            <ide-haskell-status-icon data-status="${status}">${plugin}</ide-haskell-status-icon>
            <ide-haskell-status-detail>${detail || ''}</ide-haskell-status-detail>
          </ide-haskell-status-item>
          `);
                }
                return res.join('');
            }
        }));
        this.disposables.add(this.results.onDidUpdate(({ types }) => {
            this.currentResult = 0;
            if (atom.config.get('ide-haskell.autoHideOutput') &&
                types.map((type) => this.results.filter(({ severity }) => severity === type).length).every((l) => l === 0)) {
                this.refs.buttons.disableAll();
            }
            else {
                if (atom.config.get('ide-haskell.switchTabOnCheck')) {
                    this.activateFirstNonEmptyTab(types);
                }
            }
            this.updateItems();
        }));
        this.setProgress(NaN);
        this.disposables.add(this.refs.buttons.onButtonClicked(() => this.updateItems()));
        this.disposables.add(this.refs.checkboxUriFilter.onCheckboxSwitched(() => this.updateItems()));
        this.disposables.add(atom.workspace.onDidChangeActivePaneItem(() => {
            if (this.refs.checkboxUriFilter.getFileFilter()) {
                this.updateItems();
            }
        }));
    }
    render() {
        const orientMap = {
            top: 'horizontal',
            bottom: 'horizontal',
            left: 'vertical',
            right: 'vertical'
        };
        return (etch.dom("ide-haskell-panel", { style: { width: this.state.width, height: this.state.height }, dataset: { pos: this.pos }, class: this.hiddenOutput ? 'hidden-output' : '' },
            etch.dom("resize-handle", { on: { mousedown: this.resizeStart.bind(this) } }),
            etch.dom("ide-haskell-panel-heading", { ref: "heading" },
                etch.dom("ide-haskell-status-icon", { ref: "status", id: "status", dataset: { status: 'ready' } }),
                etch.dom(output_panel_buttons_1.OutputPanelButtons, { ref: "buttons", id: "buttons" }),
                etch.dom(output_panel_checkbox_1.OutputPanelCheckbox, { ref: "checkboxUriFilter", id: "checkboxUriFilter", enabled: this.state.fileFilter }),
                Array.from(this.elements.values()),
                etch.dom(progress_bar_1.ProgressBar, { ref: "progressBar", id: "progressBar", orientation: orientMap[this.pos] })),
            etch.dom(output_panel_items_1.OutputPanelItems, { model: this.results, ref: "items", id: "items" })));
    }
    update() {
        return etch.update(this);
    }
    destroy() {
        return __awaiter(this, void 0, void 0, function* () {
            yield etch.destroy(this);
            this.disposables.dispose();
            this.panel.destroy();
            this.statusMap.clear();
        });
    }
    addPanelControl(element, opts) {
        if (typeof element === 'string') {
            const { events, classes, style, attrs } = opts;
            const props = {};
            if (classes) {
                props.class = classes.join(' ');
            }
            if (style) {
                props.style = style;
            }
            if (attrs) {
                props.attributes = attrs;
            }
            if (events) {
                props.on = events;
            }
            element = $(element, props);
        }
        else {
            element = $(element, opts);
        }
        this.elements.add(element);
        this.update();
        return new atom_1.Disposable(() => {
            this.elements.delete(element);
            this.update();
        });
    }
    updateItems() {
        const activeTab = this.getActiveTab();
        let currentUri;
        if (activeTab) {
            this.hiddenOutput = false;
            let filterUri;
            const filterSeverity = activeTab;
            const ato = this.refs.buttons.options(activeTab);
            if (this.refs.checkboxUriFilter.getFileFilter()) {
                currentUri = atom.workspace.getActiveTextEditor().getPath();
                if (currentUri && ato && ato.uriFilter) {
                    filterUri = currentUri;
                }
            }
            const scroll = ato && ato.autoScroll && this.refs.items.atEnd();
            this.refs.items.filter(({ uri, severity }) => (severity === filterSeverity) && (!filterUri || uri === filterUri));
            if (scroll) {
                this.refs.items.scrollToEnd();
            }
        }
        else {
            this.hiddenOutput = true;
        }
        this.refs.buttons.buttonNames().forEach((btn) => {
            const f = { severity: btn };
            const ato = this.refs.buttons.options(btn);
            if (currentUri && ato && ato.uriFilter) {
                f.uri = currentUri;
            }
            this.refs.buttons.setCount(btn, this.results.filter(({ uri, severity }) => (severity === f.severity) && (!f.uri || uri === f.uri)).length);
        });
        this.update();
    }
    activateTab(tab) {
        this.refs.buttons.clickButton(tab);
    }
    activateFirstNonEmptyTab(types) {
        const names = this.refs.buttons.buttonNames();
        for (const i of names) {
            const name = names[i];
            if (!types || types.includes(name)) {
                if ((this.results.filter(({ severity }) => severity === name)).length > 0) {
                    this.activateTab(name);
                    break;
                }
            }
        }
    }
    showItem(item) {
        this.activateTab(item.severity);
        this.refs.items.showItem(item);
    }
    getActiveTab() {
        return this.refs.buttons.getActive();
    }
    createTab(name, opts) {
        if (!this.refs.buttons.buttonNames().includes(name)) {
            this.refs.buttons.createButton(name, opts);
            this.state.activeTab && this.activateTab(this.state.activeTab);
        }
    }
    setProgress(progress) {
        this.refs.progressBar.setProgress(progress);
    }
    toggle() {
        if (this.panel.isVisible()) {
            this.panel.hide();
        }
        else {
            this.panel.show();
        }
    }
    serialize() {
        return {
            visibility: this.panel.isVisible(),
            height: this.element && this.element.style.height || this.state.height,
            width: this.element && this.element.style.width || this.state.width,
            activeTab: this.getActiveTab(),
            fileFilter: this.refs.checkboxUriFilter.getFileFilter()
        };
    }
    backendStatus(pluginName, st) {
        const prio = {
            progress: 5,
            error: 20,
            warning: 10,
            ready: 0
        };
        this.statusMap.set(pluginName, st);
        const stArr = Array.from(this.statusMap.values());
        const [consensus] = stArr.sort((a, b) => prio[b.status] - prio[a.status]);
        this.refs.status.setAttribute('data-status', consensus.status);
        let count = 0;
        let tot = 0;
        for (const i of stArr) {
            if (i.status === 'progress' && i.progress !== undefined) {
                tot += i.progress;
                count++;
            }
        }
        const progressAve = tot / count;
        this.setProgress(progressAve);
    }
    showNextError() {
        const rs = this.results.filter(({ uri }) => !!uri);
        if (rs.length === 0) {
            return;
        }
        if (this.currentResult !== null && this.currentResult !== undefined) {
            this.currentResult++;
        }
        else {
            this.currentResult = 0;
        }
        if (this.currentResult >= rs.length) {
            this.currentResult = 0;
        }
        this.showItem(rs[this.currentResult]);
    }
    showPrevError() {
        const rs = this.results.filter(({ uri }) => !!uri);
        if (rs.length === 0) {
            return;
        }
        if (this.currentResult !== null && this.currentResult !== undefined) {
            this.currentResult--;
        }
        else {
            this.currentResult = rs.length - 1;
        }
        if (this.currentResult < 0) {
            this.currentResult = rs.length - 1;
        }
        this.showItem(rs[this.currentResult]);
    }
    resizeStart(e) {
        if (!this.element) {
            return;
        }
        const varsMap = {
            top: { axis: 'Y', param: 'height', dir: 1 },
            bottom: { axis: 'Y', param: 'height', dir: -1 },
            left: { axis: 'X', param: 'width', dir: 1 },
            right: { axis: 'X', param: 'width', dir: -1 }
        };
        const vars = varsMap[this.pos];
        vars.axis = `client${vars.axis}`;
        const startAxis = e[vars.axis];
        const startParam = parseInt(document.defaultView.getComputedStyle(this.element)[vars.param], 10);
        const doDrag = (event) => {
            this.state[vars.param] =
                (startParam + vars.dir * (event[vars.axis] - startAxis)) + 'px';
            this.update();
        };
        const stopDrag = () => {
            document.documentElement.removeEventListener('mousemove', doDrag);
            document.documentElement.removeEventListener('mouseup', stopDrag);
        };
        document.documentElement.addEventListener('mousemove', doDrag);
        document.documentElement.addEventListener('mouseup', stopDrag);
    }
}
exports.OutputPanel = OutputPanel;
//# sourceMappingURL=data:application/json;base64,