"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const error_1 = require("../error");
exports.UPIError = error_1.UPIError;
const Menu = require("./menu");
const Messages = require("./messages");
const Events = require("./events");
const Tooltips = require("./tooltips");
const Controls = require("./controls");
const Params = require("./params");
const Utils = require("./utils");
class UPIInstance {
    constructor(pluginManager, pluginName) {
        this.disposables = new atom_1.CompositeDisposable();
        this.destroyed = false;
        this.menu = Menu.create(this.disposables);
        this.messages = Messages.create(pluginName, pluginManager);
        this.tooltips = Tooltips.create(pluginName, pluginManager, this.disposables);
        this.events = Events.create(pluginManager, this.disposables);
        this.controls = Controls.create(pluginManager);
        this.params = Params.create(pluginName, pluginManager);
        this.utils = Utils.create(pluginManager);
    }
    destroy() {
        this.disposables.dispose();
        this.destroyed = true;
    }
    check() {
        if (this.destroyed) {
            throw new error_1.UPIError('This UPI interface was destroyed');
        }
        return this;
    }
}
exports.UPIInstance = UPIInstance;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXBpLTMvaW5zdGFuY2UvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBd0M7QUFFeEMsb0NBQWlDO0FBQ3pCLG9DQUFRO0FBRWhCLCtCQUE4QjtBQUM5Qix1Q0FBc0M7QUFDdEMsbUNBQWtDO0FBQ2xDLHVDQUFzQztBQUN0Qyx1Q0FBc0M7QUFDdEMsbUNBQWtDO0FBQ2xDLGlDQUFnQztBQUloQztJQVVFLFlBQWEsYUFBNEIsRUFBRSxVQUFrQjtRQUMzRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksMEJBQW1CLEVBQUUsQ0FBQTtRQUM1QyxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQTtRQUV0QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQ3pDLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsYUFBYSxDQUFDLENBQUE7UUFFMUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxhQUFhLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQzVFLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQzVELElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQTtRQUM5QyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxDQUFBO1FBQ3RELElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQTtJQUMxQyxDQUFDO0lBRU0sT0FBTztRQUNaLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUE7UUFDMUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUE7SUFDdkIsQ0FBQztJQUVNLEtBQUs7UUFDVixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztZQUNuQixNQUFNLElBQUksZ0JBQVEsQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFBO1FBQ3hELENBQUM7UUFDRCxNQUFNLENBQUMsSUFBSSxDQUFBO0lBQ2IsQ0FBQztDQUNGO0FBbkNELGtDQW1DQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9zaXRlRGlzcG9zYWJsZX0gZnJvbSAnYXRvbSdcbmltcG9ydCB7UGx1Z2luTWFuYWdlcn0gZnJvbSAnLi4vLi4vcGx1Z2luLW1hbmFnZXInXG5pbXBvcnQge1VQSUVycm9yfSBmcm9tICcuLi9lcnJvcidcbmV4cG9ydCB7VVBJRXJyb3J9XG5cbmltcG9ydCAqIGFzIE1lbnUgZnJvbSAnLi9tZW51J1xuaW1wb3J0ICogYXMgTWVzc2FnZXMgZnJvbSAnLi9tZXNzYWdlcydcbmltcG9ydCAqIGFzIEV2ZW50cyBmcm9tICcuL2V2ZW50cydcbmltcG9ydCAqIGFzIFRvb2x0aXBzIGZyb20gJy4vdG9vbHRpcHMnXG5pbXBvcnQgKiBhcyBDb250cm9scyBmcm9tICcuL2NvbnRyb2xzJ1xuaW1wb3J0ICogYXMgUGFyYW1zIGZyb20gJy4vcGFyYW1zJ1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSAnLi91dGlscydcblxuZXhwb3J0IHR5cGUgVFRvb2x0aXBIYW5kbGVyU3BlYyA9IHtwcmlvcml0eTogbnVtYmVyLCBoYW5kbGVyOiBUb29sdGlwcy5UVG9vbHRpcEhhbmRsZXJ9XG5cbmV4cG9ydCBjbGFzcyBVUElJbnN0YW5jZSB7XG4gIHB1YmxpYyBtZW51OiBNZW51LklNYWluSW50ZXJmYWNlXG4gIHB1YmxpYyBtZXNzYWdlczogTWVzc2FnZXMuSU1haW5JbnRlcmZhY2VcbiAgcHVibGljIGV2ZW50czogRXZlbnRzLklNYWluSW50ZXJmYWNlXG4gIHB1YmxpYyB0b29sdGlwczogVG9vbHRpcHMuSU1haW5JbnRlcmZhY2VcbiAgcHVibGljIGNvbnRyb2xzOiBDb250cm9scy5JTWFpbkludGVyZmFjZVxuICBwdWJsaWMgcGFyYW1zOiBQYXJhbXMuSU1haW5JbnRlcmZhY2VcbiAgcHVibGljIHV0aWxzOiBVdGlscy5JTWFpbkludGVyZmFjZVxuICBwcml2YXRlIGRpc3Bvc2FibGVzOiBDb21wb3NpdGVEaXNwb3NhYmxlXG4gIHByaXZhdGUgZGVzdHJveWVkOiBib29sZWFuXG4gIGNvbnN0cnVjdG9yIChwbHVnaW5NYW5hZ2VyOiBQbHVnaW5NYW5hZ2VyLCBwbHVnaW5OYW1lOiBzdHJpbmcpIHtcbiAgICB0aGlzLmRpc3Bvc2FibGVzID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuICAgIHRoaXMuZGVzdHJveWVkID0gZmFsc2VcblxuICAgIHRoaXMubWVudSA9IE1lbnUuY3JlYXRlKHRoaXMuZGlzcG9zYWJsZXMpXG4gICAgdGhpcy5tZXNzYWdlcyA9IE1lc3NhZ2VzLmNyZWF0ZShwbHVnaW5OYW1lLCBwbHVnaW5NYW5hZ2VyKVxuXG4gICAgdGhpcy50b29sdGlwcyA9IFRvb2x0aXBzLmNyZWF0ZShwbHVnaW5OYW1lLCBwbHVnaW5NYW5hZ2VyLCB0aGlzLmRpc3Bvc2FibGVzKVxuICAgIHRoaXMuZXZlbnRzID0gRXZlbnRzLmNyZWF0ZShwbHVnaW5NYW5hZ2VyLCB0aGlzLmRpc3Bvc2FibGVzKVxuICAgIHRoaXMuY29udHJvbHMgPSBDb250cm9scy5jcmVhdGUocGx1Z2luTWFuYWdlcilcbiAgICB0aGlzLnBhcmFtcyA9IFBhcmFtcy5jcmVhdGUocGx1Z2luTmFtZSwgcGx1Z2luTWFuYWdlcilcbiAgICB0aGlzLnV0aWxzID0gVXRpbHMuY3JlYXRlKHBsdWdpbk1hbmFnZXIpXG4gIH1cblxuICBwdWJsaWMgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5kaXNwb3NhYmxlcy5kaXNwb3NlKClcbiAgICB0aGlzLmRlc3Ryb3llZCA9IHRydWVcbiAgfVxuXG4gIHB1YmxpYyBjaGVjayAoKSB7XG4gICAgaWYgKHRoaXMuZGVzdHJveWVkKSB7XG4gICAgICB0aHJvdyBuZXcgVVBJRXJyb3IoJ1RoaXMgVVBJIGludGVyZmFjZSB3YXMgZGVzdHJveWVkJylcbiAgICB9XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxufVxuIl19