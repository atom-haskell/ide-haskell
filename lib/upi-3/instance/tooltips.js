"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../../utils");
function create(pluginName, pluginManager, disposables) {
    return {
        show({ editor, eventType, detail, tooltip }) {
            if (!eventType) {
                eventType = utils_1.getEventType(detail);
            }
            pluginManager.tooltipRegistry.showTooltip(editor, eventType, { pluginName, tooltip });
        },
        onShouldShowTooltip(...args) {
            if (args.length < 2) {
                args.unshift(100);
            }
            const [priority, handler] = args;
            const disp = pluginManager.tooltipRegistry.register(pluginName, { priority, handler });
            return disp;
        }
    };
}
exports.create = create;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXBpLTMvaW5zdGFuY2UvdG9vbHRpcHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFHQSx1Q0FBd0M7QUEwRHhDLGdCQUNFLFVBQWtCLEVBQUUsYUFBNEIsRUFBRSxXQUFnQztJQUVsRixNQUFNLENBQUM7UUFDTCxJQUFJLENBQUUsRUFBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUM7WUFDeEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUNmLFNBQVMsR0FBRyxvQkFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1lBQ2xDLENBQUM7WUFDRCxhQUFhLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FDdkMsTUFBTSxFQUFFLFNBQVMsRUFBRSxFQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUMsQ0FDekMsQ0FBQTtRQUNILENBQUM7UUFDRCxtQkFBbUIsQ0FBRSxHQUFHLElBQVc7WUFDakMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNwQixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQ25CLENBQUM7WUFDRCxNQUFNLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQTtZQUNoQyxNQUFNLElBQUksR0FBRyxhQUFhLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsRUFBQyxRQUFRLEVBQUUsT0FBTyxFQUFDLENBQUMsQ0FBQTtZQUNwRixNQUFNLENBQUMsSUFBSSxDQUFBO1FBQ2IsQ0FBQztLQUNGLENBQUE7QUFDSCxDQUFDO0FBckJELHdCQXFCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlzcG9zYWJsZSwgVGV4dEVkaXRvciwgQ29tcG9zaXRlRGlzcG9zYWJsZX0gZnJvbSAnYXRvbSdcbmltcG9ydCB7UGx1Z2luTWFuYWdlcn0gZnJvbSAnLi4vLi4vcGx1Z2luLW1hbmFnZXInXG5pbXBvcnQge1RFdmVudFJhbmdlVHlwZX0gZnJvbSAnLi4vLi4vZWRpdG9yLWNvbnRyb2wvdG9vbHRpcC1tYW5hZ2VyJ1xuaW1wb3J0IHtnZXRFdmVudFR5cGV9IGZyb20gJy4uLy4uL3V0aWxzJ1xuaW1wb3J0IHtUVG9vbHRpcEZ1bmN0aW9uLCBUVG9vbHRpcEhhbmRsZXJ9IGZyb20gJy4uLy4uL3Rvb2x0aXAtcmVnaXN0cnknXG5cbmV4cG9ydCB7VFRvb2x0aXBIYW5kbGVyfVxuXG5pbnRlcmZhY2UgSVNob3dUb29sdGlwUGFyYW1zIHtcbiAgZWRpdG9yOiBUZXh0RWRpdG9yXG4gIGV2ZW50VHlwZT86IFRFdmVudFJhbmdlVHlwZVxuICBkZXRhaWw/OiBhbnlcbiAgdG9vbHRpcDogVFRvb2x0aXBGdW5jdGlvblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElNYWluSW50ZXJmYWNlIHtcbiAgLyoqXG4gIFNob3cgdG9vbHRpcCBpbiBlZGl0b3IuXG5cbiAgZWRpdG9yOiBlZGl0b3IgdGhhdCB3aWxsIHNob3cgdG9vbHRpcFxuICBwb3M6IHRvb2x0aXAgcG9zaXRpb25cbiAgZXZlbnRUeXBlOiBvbmUgb2YgJ2NvbnRleHQnLCAna2V5Ym9hcmQnIGFuZCAnbW91c2UnXG4gIGRldGFpbDogZm9yIGF1dG9tYXRpYyBzZWxlY3Rpb24gYmV0d2VlbiAnY29udGV4dCcgYW5kICdrZXlib2FyZCcuXG4gICAgICAgICAgSWdub3JlZCBpZiAnZXZlbnRUeXBlJyBpcyBzZXQuXG4gIHRvb2x0aXA6IGZ1bmN0aW9uKGNyYW5nZSlcbiAgICBjcmFuZ2U6IFJhbmdlLCBjdXJyZW50bHkgc2VsZWN0ZWQgcmFuZ2UgaW4gZWRpdG9yIChwb3NzaWJseSBlbXB0eSlcblxuICAgIFJldHVybnMge3JhbmdlLCB0ZXh0fSBvciBQcm9taXNlXG4gICAgICByYW5nZTogUmFuZ2UsIHRvb2x0aXAgaGlnaGxpZ2h0aW5nIHJhbmdlXG4gICAgICBwZXJzaXN0T25DdXJzb3JNb3ZlOiBCb29sZWFuLCBvcHRpb25hbCwgZGVmYXVsdCBmYWxzZSwgcGVyc2lzdCBvbiBjdXJzb3IgbW92ZSByZWdhcmRsZXNzIG9mIHNldHRpbmdzXG4gICAgICB0ZXh0OiB0b29sdGlwIHRleHQuIFN0cmluZyBvciB7dGV4dCwgaGlnaGxpZ2h0ZXJ9IG9yIHtodG1sfVxuICAgICAgICB0ZXh0OiB0b29sdGlwIHRleHRcbiAgICAgICAgaGlnaGxpZ2h0ZXI6IGdyYW1tYXIgc2NvcGUgdGhhdCB3aWxsIGJlIHVzZWQgdG8gaGlnaGxpZ2h0IHRvb2x0aXAgdGV4dFxuICAgICAgICBodG1sOiBodG1sIHRvIGJlIGRpc3BsYXllZCBpbiB0b29sdGlwXG4gICovXG4gIHNob3cgKHBhcmFtczogSVNob3dUb29sdGlwUGFyYW1zKTogdm9pZFxuXG4gIC8qKlxuICBFZGl0b3IgZXZlbnQgc3Vic2NyaXB0aW9uLiBGaXJlcyB3aGVuIG1vdXNlIGN1cnNvciBzdG9wcGVkIG92ZXIgYSBzeW1ib2wgaW5cbiAgZWRpdG9yLlxuXG4gIHByaW9yaXR5OiBldmVudCBwcmlvcml0eSwgaGlnaGVyIHZhbHVlIG1lYW5zIGhpZ2hlciBwcmlvcml0eSxcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbiB3aXRoIGhpZ2h0ZXN0IHByaW9yaXR5IHdpbGwgYmUgY2FsbGVkIGZpcnN0LlxuICBjYWxsYmFjazogY2FsbGJhY2soZWRpdG9yLCBjcmFuZ2UsIHR5cGUpXG4gICAgZWRpdG9yOiBUZXh0RWRpdG9yLCBlZGl0b3IgdGhhdCBnZW5lcmF0ZWQgZXZlbnRcbiAgICBjcmFuZ2U6IFJhbmdlLCBjdXJzb3IgcmFuZ2UgdGhhdCBnZW5lcmF0ZWQgZXZlbnQuXG4gICAgdHlwZTogT25lIG9mICdtb3VzZScsICdzZWxlY3Rpb24nIC0tIHR5cGUgb2YgZXZlbnQgdGhhdCB0cmlnZ2VyZWQgdGhpc1xuXG4gICAgUmV0dXJucyB7cmFuZ2UsIHRleHR9IG9yIFByb21pc2UuXG4gICAgICByYW5nZTogUmFuZ2UsIHRvb2x0aXAgaGlnaGxpZ2h0aW5nIHJhbmdlXG4gICAgICB0ZXh0OiB0b29sdGlwIHRleHQuIFN0cmluZyBvciB7dGV4dCwgaGlnaGxpZ2h0ZXJ9IG9yIHtodG1sfVxuICAgICAgICB0ZXh0OiB0b29sdGlwIHRleHRcbiAgICAgICAgaGlnaGxpZ2h0ZXI6IGdyYW1tYXIgc2NvcGUgdGhhdCB3aWxsIGJlIHVzZWQgdG8gaGlnaGxpZ2h0IHRvb2x0aXAgdGV4dFxuICAgICAgICBodG1sOiBodG1sIHRvIGJlIGRpc3BsYXllZCBpbiB0b29sdGlwXG5cbiAgcmV0dXJucyBEaXNwb3NhYmxlXG4gICovXG4gIG9uU2hvdWxkU2hvd1Rvb2x0aXAgKHByaW9yaXR5OiBudW1iZXIsIGhhbmRsZXI6IFRUb29sdGlwSGFuZGxlcik6IERpc3Bvc2FibGVcbiAgb25TaG91bGRTaG93VG9vbHRpcCAoaGFuZGxlcjogVFRvb2x0aXBIYW5kbGVyKTogRGlzcG9zYWJsZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlIChcbiAgcGx1Z2luTmFtZTogc3RyaW5nLCBwbHVnaW5NYW5hZ2VyOiBQbHVnaW5NYW5hZ2VyLCBkaXNwb3NhYmxlczogQ29tcG9zaXRlRGlzcG9zYWJsZVxuKTogSU1haW5JbnRlcmZhY2Uge1xuICByZXR1cm4ge1xuICAgIHNob3cgKHtlZGl0b3IsIGV2ZW50VHlwZSwgZGV0YWlsLCB0b29sdGlwfSkge1xuICAgICAgaWYgKCFldmVudFR5cGUpIHtcbiAgICAgICAgZXZlbnRUeXBlID0gZ2V0RXZlbnRUeXBlKGRldGFpbClcbiAgICAgIH1cbiAgICAgIHBsdWdpbk1hbmFnZXIudG9vbHRpcFJlZ2lzdHJ5LnNob3dUb29sdGlwKFxuICAgICAgICBlZGl0b3IsIGV2ZW50VHlwZSwge3BsdWdpbk5hbWUsIHRvb2x0aXB9XG4gICAgICApXG4gICAgfSxcbiAgICBvblNob3VsZFNob3dUb29sdGlwICguLi5hcmdzOiBhbnlbXSkge1xuICAgICAgaWYgKGFyZ3MubGVuZ3RoIDwgMikge1xuICAgICAgICBhcmdzLnVuc2hpZnQoMTAwKVxuICAgICAgfVxuICAgICAgY29uc3QgW3ByaW9yaXR5LCBoYW5kbGVyXSA9IGFyZ3NcbiAgICAgIGNvbnN0IGRpc3AgPSBwbHVnaW5NYW5hZ2VyLnRvb2x0aXBSZWdpc3RyeS5yZWdpc3RlcihwbHVnaW5OYW1lLCB7cHJpb3JpdHksIGhhbmRsZXJ9KVxuICAgICAgcmV0dXJuIGRpc3BcbiAgICB9XG4gIH1cbn1cbiJdfQ==