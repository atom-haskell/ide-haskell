"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const utils_1 = require("../utils");
function consume(pluginManager, options) {
    const { name, menu, messageTypes, events, controls, params, tooltip } = options;
    const disp = new atom_1.CompositeDisposable();
    if (menu) {
        const menuDisp = atom.menu.add([{
                label: utils_1.MAIN_MENU_LABEL,
                submenu: [{ label: menu.label, submenu: menu.menu }]
            }]);
        disp.add(menuDisp);
    }
    if (messageTypes) {
        for (const type of Object.keys(messageTypes)) {
            const opts = messageTypes[type];
            pluginManager.outputPanel.createTab(type, opts);
        }
    }
    if (events) {
        for (const k in events) {
            if (k.startsWith('on') && pluginManager[k]) {
                let v = events[k];
                if (!Array.isArray(v)) {
                    v = [v];
                }
                for (const i of v) {
                    disp.add(pluginManager[k](i));
                }
            }
        }
    }
    if (tooltip) {
        let handler, priority;
        if (typeof tooltip === 'function') {
            handler = tooltip;
        }
        else {
            ({ handler, priority } = tooltip);
        }
        if (!priority) {
            priority = 100;
        }
        disp.add(pluginManager.tooltipRegistry.register(name, { priority, handler }));
    }
    if (controls) {
        for (const { element, opts } of controls) {
            disp.add(pluginManager.outputPanel.addPanelControl(element, opts));
        }
    }
    if (params) {
        disp.add(pluginManager.configParamManager.add(name, params));
    }
    return disp;
}
exports.consume = consume;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXBpLTMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBb0Q7QUFPcEQsb0NBQXdDO0FBMEN4QyxpQkFBeUIsYUFBNEIsRUFBRSxPQUE2QjtJQUNsRixNQUFNLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFDLEdBQUcsT0FBTyxDQUFBO0lBQzdFLE1BQU0sSUFBSSxHQUFHLElBQUksMEJBQW1CLEVBQUUsQ0FBQTtJQUV0QyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ1QsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDOUIsS0FBSyxFQUFFLHVCQUFlO2dCQUN0QixPQUFPLEVBQUUsQ0FBRSxFQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFDLENBQUU7YUFDckQsQ0FBQyxDQUFDLENBQUE7UUFDSCxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ3BCLENBQUM7SUFDRCxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBRWpCLEdBQUcsQ0FBQyxDQUFDLE1BQU0sSUFBSSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdDLE1BQU0sSUFBSSxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUMvQixhQUFhLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDakQsQ0FBQztJQUNILENBQUM7SUFDRCxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ1gsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQztZQUN2QixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzNDLElBQUksQ0FBQyxHQUFnRCxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUE7Z0JBQzlELEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7Z0JBQUMsQ0FBQztnQkFDbEMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDbEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDL0IsQ0FBQztZQUNILENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUNELEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDWixJQUFJLE9BQXdCLEVBQUUsUUFBNEIsQ0FBQTtRQUMxRCxFQUFFLENBQUMsQ0FBQyxPQUFPLE9BQU8sS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLE9BQU8sR0FBRyxPQUFPLENBQUE7UUFDbkIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sQ0FBQyxFQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQTtRQUNqQyxDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQTtRQUFDLENBQUM7UUFDakMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBQyxRQUFRLEVBQUUsT0FBTyxFQUFDLENBQUMsQ0FBQyxDQUFBO0lBQzdFLENBQUM7SUFDRCxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ2IsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUMsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ3ZDLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUE7UUFDcEUsQ0FBQztJQUNILENBQUM7SUFDRCxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ1gsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFBO0lBQzlELENBQUM7SUFFRCxNQUFNLENBQUMsSUFBSSxDQUFBO0FBQ2IsQ0FBQztBQWpERCwwQkFpREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvc2l0ZURpc3Bvc2FibGUsIERpc3Bvc2FibGV9IGZyb20gJ2F0b20nXG5cbmltcG9ydCB7UGx1Z2luTWFuYWdlcn0gZnJvbSAnLi4vcGx1Z2luLW1hbmFnZXInXG5pbXBvcnQge1RUZXh0QnVmZmVyQ2FsbGJhY2t9IGZyb20gJy4uL2VkaXRvci1jb250cm9sJ1xuaW1wb3J0IHtJU2V0VHlwZXNQYXJhbXMsIElDb250cm9sT3B0c30gZnJvbSAnLi4vb3V0cHV0LXBhbmVsJ1xuaW1wb3J0IHtJUGFyYW1TcGVjfSBmcm9tICcuLi9jb25maWctcGFyYW1zJ1xuaW1wb3J0IHtUVG9vbHRpcEhhbmRsZXJ9IGZyb20gJy4uL3Rvb2x0aXAtcmVnaXN0cnknXG5pbXBvcnQge01BSU5fTUVOVV9MQUJFTH0gZnJvbSAnLi4vdXRpbHMnXG5cbmV4cG9ydCBpbnRlcmZhY2UgSUF0b21NZW51Q29tbWFuZCB7XG4gIGxhYmVsOiBzdHJpbmdcbiAgY29tbWFuZDogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUF0b21TdWJtZW51IHtcbiAgbGFiZWw6IHN0cmluZ1xuICBzdWJtZW51OiBUQXRvbU1lbnVbXVxufVxuXG5pbnRlcmZhY2UgSVVQSUNvbnRyb2xTaW1wbGVEZWZpbml0aW9uIHtcbiAgZWxlbWVudDogc3RyaW5nXG4gIG9wdHM6IElDb250cm9sT3B0c1xufVxuXG5pbnRlcmZhY2UgSVVQSUNvbnRyb2xDdXN0b21EZWZpbml0aW9uIHtcbiAgZWxlbWVudDogRnVuY3Rpb25cbiAgb3B0czogYW55XG59XG5cbmV4cG9ydCB0eXBlIFRVUElDb250cm9sRGVmaW5pdGlvbiA9IElVUElDb250cm9sQ3VzdG9tRGVmaW5pdGlvbiB8IElVUElDb250cm9sU2ltcGxlRGVmaW5pdGlvblxuXG5leHBvcnQgdHlwZSBUQXRvbU1lbnUgPSBJQXRvbU1lbnVDb21tYW5kIHwgSUF0b21TdWJtZW51XG5cbmV4cG9ydCB0eXBlIFRTaW5nbGVPckFycmF5PFQ+ID0gVCB8IFRbXVxuXG5leHBvcnQgaW50ZXJmYWNlIElSZWdpc3RyYXRpb25PcHRpb25zIHtcbiAgbmFtZTogc3RyaW5nXG4gIG1lbnU/OiB7bGFiZWw6IHN0cmluZywgbWVudTogVEF0b21NZW51fVxuICBtZXNzYWdlVHlwZXM/OiBJU2V0VHlwZXNQYXJhbXNcbiAgZXZlbnRzPzoge1xuICAgIG9uV2lsbFNhdmVCdWZmZXI/OiBUU2luZ2xlT3JBcnJheTxUVGV4dEJ1ZmZlckNhbGxiYWNrPlxuICAgIG9uRGlkU2F2ZUJ1ZmZlcj86IFRTaW5nbGVPckFycmF5PFRUZXh0QnVmZmVyQ2FsbGJhY2s+XG4gICAgb25EaWRTdG9wQ2hhbmdpbmc/OiBUU2luZ2xlT3JBcnJheTxUVGV4dEJ1ZmZlckNhbGxiYWNrPlxuICB9XG4gIGNvbnRyb2xzPzogVFVQSUNvbnRyb2xEZWZpbml0aW9uW11cbiAgcGFyYW1zPzoge1twYXJhbU5hbWU6IHN0cmluZ106IElQYXJhbVNwZWM8YW55Pn1cbiAgdG9vbHRpcD86IFRUb29sdGlwSGFuZGxlciB8IHtwcmlvcml0eT86IG51bWJlciwgaGFuZGxlcjogVFRvb2x0aXBIYW5kbGVyfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY29uc3VtZSAocGx1Z2luTWFuYWdlcjogUGx1Z2luTWFuYWdlciwgb3B0aW9uczogSVJlZ2lzdHJhdGlvbk9wdGlvbnMpOiBEaXNwb3NhYmxlIHtcbiAgY29uc3Qge25hbWUsIG1lbnUsIG1lc3NhZ2VUeXBlcywgZXZlbnRzLCBjb250cm9scywgcGFyYW1zLCB0b29sdGlwfSA9IG9wdGlvbnNcbiAgY29uc3QgZGlzcCA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKClcblxuICBpZiAobWVudSkge1xuICAgIGNvbnN0IG1lbnVEaXNwID0gYXRvbS5tZW51LmFkZChbe1xuICAgICAgbGFiZWw6IE1BSU5fTUVOVV9MQUJFTCxcbiAgICAgIHN1Ym1lbnU6IFsge2xhYmVsOiBtZW51LmxhYmVsLCBzdWJtZW51OiBtZW51Lm1lbnV9IF1cbiAgICB9XSlcbiAgICBkaXNwLmFkZChtZW51RGlzcClcbiAgfVxuICBpZiAobWVzc2FnZVR5cGVzKSB7XG4gICAgLy8gVE9ETzogbWFrZSBkaXNwb3NhYmxlXG4gICAgZm9yIChjb25zdCB0eXBlIG9mIE9iamVjdC5rZXlzKG1lc3NhZ2VUeXBlcykpIHtcbiAgICAgIGNvbnN0IG9wdHMgPSBtZXNzYWdlVHlwZXNbdHlwZV1cbiAgICAgIHBsdWdpbk1hbmFnZXIub3V0cHV0UGFuZWwuY3JlYXRlVGFiKHR5cGUsIG9wdHMpXG4gICAgfVxuICB9XG4gIGlmIChldmVudHMpIHtcbiAgICBmb3IgKGNvbnN0IGsgaW4gZXZlbnRzKSB7XG4gICAgICBpZiAoay5zdGFydHNXaXRoKCdvbicpICYmIHBsdWdpbk1hbmFnZXJba10pIHtcbiAgICAgICAgbGV0IHY6IFRUZXh0QnVmZmVyQ2FsbGJhY2sgfCBUVGV4dEJ1ZmZlckNhbGxiYWNrW10gPSBldmVudHNba11cbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHYpKSB7IHYgPSBbdl0gfVxuICAgICAgICBmb3IgKGNvbnN0IGkgb2Ygdikge1xuICAgICAgICAgIGRpc3AuYWRkKHBsdWdpbk1hbmFnZXJba10oaSkpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHRvb2x0aXApIHtcbiAgICBsZXQgaGFuZGxlcjogVFRvb2x0aXBIYW5kbGVyLCBwcmlvcml0eTogbnVtYmVyIHwgdW5kZWZpbmVkXG4gICAgaWYgKHR5cGVvZiB0b29sdGlwID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBoYW5kbGVyID0gdG9vbHRpcFxuICAgIH0gZWxzZSB7XG4gICAgICAoe2hhbmRsZXIsIHByaW9yaXR5fSA9IHRvb2x0aXApXG4gICAgfVxuICAgIGlmICghcHJpb3JpdHkpIHsgcHJpb3JpdHkgPSAxMDAgfVxuICAgIGRpc3AuYWRkKHBsdWdpbk1hbmFnZXIudG9vbHRpcFJlZ2lzdHJ5LnJlZ2lzdGVyKG5hbWUsIHtwcmlvcml0eSwgaGFuZGxlcn0pKVxuICB9XG4gIGlmIChjb250cm9scykge1xuICAgIGZvciAoY29uc3Qge2VsZW1lbnQsIG9wdHN9IG9mIGNvbnRyb2xzKSB7XG4gICAgICBkaXNwLmFkZChwbHVnaW5NYW5hZ2VyLm91dHB1dFBhbmVsLmFkZFBhbmVsQ29udHJvbChlbGVtZW50LCBvcHRzKSlcbiAgICB9XG4gIH1cbiAgaWYgKHBhcmFtcykge1xuICAgIGRpc3AuYWRkKHBsdWdpbk1hbmFnZXIuY29uZmlnUGFyYW1NYW5hZ2VyLmFkZChuYW1lLCBwYXJhbXMpKVxuICB9XG5cbiAgcmV0dXJuIGRpc3Bcbn1cbiJdfQ==