"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const utils_1 = require("../utils");
__export(require("./instance"));
function consume(pluginManager, options) {
    const { name, menu, messageTypes, events, controls, params, tooltip } = options;
    const disp = new atom_1.CompositeDisposable();
    if (menu) {
        const menuDisp = atom.menu.add([{
                label: utils_1.MAIN_MENU_LABEL,
                submenu: [{ label: menu.label, submenu: menu.menu }]
            }]);
        disp.add(menuDisp);
    }
    if (messageTypes) {
        for (const type of Object.keys(messageTypes)) {
            const opts = messageTypes[type];
            pluginManager.outputPanel.createTab(type, opts);
        }
    }
    if (events) {
        for (const k in events) {
            if (k.startsWith('on') && pluginManager[k]) {
                let v = events[k];
                if (!Array.isArray(v)) {
                    v = [v];
                }
                for (const i of v) {
                    disp.add(pluginManager[k](i));
                }
            }
        }
    }
    if (tooltip) {
        let handler, priority;
        if (typeof tooltip === 'function') {
            handler = tooltip;
        }
        else {
            ({ handler, priority } = tooltip);
        }
        if (!priority) {
            priority = 100;
        }
        disp.add(pluginManager.tooltipRegistry.register(name, { priority, handler }));
    }
    if (controls) {
        for (const { element, opts } of controls) {
            disp.add(pluginManager.outputPanel.addPanelControl(element, opts));
        }
    }
    if (params) {
        for (const paramName of Object.keys(params)) {
            const spec = params[paramName];
            disp.add(pluginManager.configParamManager.add(this.pluginName, paramName, spec));
        }
    }
    return disp;
}
exports.consume = consume;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXBpLTMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwrQkFBb0Q7QUFPcEQsb0NBQXdDO0FBRXhDLGdDQUEwQjtBQTBDMUIsaUJBQXlCLGFBQTRCLEVBQUUsT0FBNkI7SUFDbEYsTUFBTSxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBQyxHQUFHLE9BQU8sQ0FBQTtJQUM3RSxNQUFNLElBQUksR0FBRyxJQUFJLDBCQUFtQixFQUFFLENBQUE7SUFFdEMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNULE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQzlCLEtBQUssRUFBRSx1QkFBZTtnQkFDdEIsT0FBTyxFQUFFLENBQUUsRUFBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBQyxDQUFFO2FBQ3JELENBQUMsQ0FBQyxDQUFBO1FBQ0gsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUNwQixDQUFDO0lBQ0QsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUVqQixHQUFHLENBQUMsQ0FBQyxNQUFNLElBQUksSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3QyxNQUFNLElBQUksR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUE7WUFDL0IsYUFBYSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQ2pELENBQUM7SUFDSCxDQUFDO0lBQ0QsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDdkIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMzQyxJQUFJLENBQUMsR0FBZ0QsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFBO2dCQUM5RCxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO2dCQUFDLENBQUM7Z0JBQ2xDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ2xCLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7Z0JBQy9CLENBQUM7WUFDSCxDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7SUFDRCxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ1osSUFBSSxPQUF3QixFQUFFLFFBQTRCLENBQUE7UUFDMUQsRUFBRSxDQUFDLENBQUMsT0FBTyxPQUFPLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQztZQUNsQyxPQUFPLEdBQUcsT0FBTyxDQUFBO1FBQ25CLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLENBQUMsRUFBQyxPQUFPLEVBQUUsUUFBUSxFQUFDLEdBQUcsT0FBTyxDQUFDLENBQUE7UUFDakMsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUFDLFFBQVEsR0FBRyxHQUFHLENBQUE7UUFBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLEVBQUMsUUFBUSxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUMsQ0FBQTtJQUM3RSxDQUFDO0lBQ0QsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNiLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBQyxPQUFPLEVBQUUsSUFBSSxFQUFDLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQztZQUN2QyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFBO1FBQ3BFLENBQUM7SUFDSCxDQUFDO0lBQ0QsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxDQUFDLE1BQU0sU0FBUyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVDLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQTtZQUM5QixJQUFJLENBQUMsR0FBRyxDQUNOLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQ3ZFLENBQUE7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFJLENBQUE7QUFDYixDQUFDO0FBdERELDBCQXNEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9zaXRlRGlzcG9zYWJsZSwgRGlzcG9zYWJsZX0gZnJvbSAnYXRvbSdcblxuaW1wb3J0IHtQbHVnaW5NYW5hZ2VyfSBmcm9tICcuLi9wbHVnaW4tbWFuYWdlcidcbmltcG9ydCB7VFRleHRCdWZmZXJDYWxsYmFja30gZnJvbSAnLi4vZWRpdG9yLWNvbnRyb2wnXG5pbXBvcnQge0lTZXRUeXBlc1BhcmFtcywgSUNvbnRyb2xPcHRzfSBmcm9tICcuLi9vdXRwdXQtcGFuZWwnXG5pbXBvcnQge0lQYXJhbVNwZWN9IGZyb20gJy4uL2NvbmZpZy1wYXJhbXMnXG5pbXBvcnQge1RUb29sdGlwSGFuZGxlcn0gZnJvbSAnLi4vdG9vbHRpcC1yZWdpc3RyeSdcbmltcG9ydCB7TUFJTl9NRU5VX0xBQkVMfSBmcm9tICcuLi91dGlscydcblxuZXhwb3J0ICogZnJvbSAnLi9pbnN0YW5jZSdcblxuZXhwb3J0IGludGVyZmFjZSBJQXRvbU1lbnVDb21tYW5kIHtcbiAgbGFiZWw6IHN0cmluZ1xuICBjb21tYW5kOiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQXRvbVN1Ym1lbnUge1xuICBsYWJlbDogc3RyaW5nXG4gIHN1Ym1lbnU6IFRBdG9tTWVudVtdXG59XG5cbmludGVyZmFjZSBJVVBJQ29udHJvbFNpbXBsZURlZmluaXRpb24ge1xuICBlbGVtZW50OiBzdHJpbmdcbiAgb3B0czogSUNvbnRyb2xPcHRzXG59XG5cbmludGVyZmFjZSBJVVBJQ29udHJvbEN1c3RvbURlZmluaXRpb24ge1xuICBlbGVtZW50OiBGdW5jdGlvblxuICBvcHRzOiBhbnlcbn1cblxuZXhwb3J0IHR5cGUgVFVQSUNvbnRyb2xEZWZpbml0aW9uID0gSVVQSUNvbnRyb2xDdXN0b21EZWZpbml0aW9uIHwgSVVQSUNvbnRyb2xTaW1wbGVEZWZpbml0aW9uXG5cbmV4cG9ydCB0eXBlIFRBdG9tTWVudSA9IElBdG9tTWVudUNvbW1hbmQgfCBJQXRvbVN1Ym1lbnVcblxuZXhwb3J0IHR5cGUgVFNpbmdsZU9yQXJyYXk8VD4gPSBUIHwgVFtdXG5cbmV4cG9ydCBpbnRlcmZhY2UgSVJlZ2lzdHJhdGlvbk9wdGlvbnMge1xuICBuYW1lOiBzdHJpbmdcbiAgbWVudT86IHtsYWJlbDogc3RyaW5nLCBtZW51OiBUQXRvbU1lbnV9XG4gIG1lc3NhZ2VUeXBlcz86IElTZXRUeXBlc1BhcmFtc1xuICBldmVudHM/OiB7XG4gICAgb25XaWxsU2F2ZUJ1ZmZlcj86IFRTaW5nbGVPckFycmF5PFRUZXh0QnVmZmVyQ2FsbGJhY2s+XG4gICAgb25EaWRTYXZlQnVmZmVyPzogVFNpbmdsZU9yQXJyYXk8VFRleHRCdWZmZXJDYWxsYmFjaz5cbiAgICBvbkRpZFN0b3BDaGFuZ2luZz86IFRTaW5nbGVPckFycmF5PFRUZXh0QnVmZmVyQ2FsbGJhY2s+XG4gIH1cbiAgY29udHJvbHM/OiBUVVBJQ29udHJvbERlZmluaXRpb25bXVxuICBwYXJhbXM/OiB7W3BhcmFtTmFtZTogc3RyaW5nXTogSVBhcmFtU3BlYzxhbnk+fVxuICB0b29sdGlwPzogVFRvb2x0aXBIYW5kbGVyIHwge3ByaW9yaXR5PzogbnVtYmVyLCBoYW5kbGVyOiBUVG9vbHRpcEhhbmRsZXJ9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25zdW1lIChwbHVnaW5NYW5hZ2VyOiBQbHVnaW5NYW5hZ2VyLCBvcHRpb25zOiBJUmVnaXN0cmF0aW9uT3B0aW9ucyk6IERpc3Bvc2FibGUge1xuICBjb25zdCB7bmFtZSwgbWVudSwgbWVzc2FnZVR5cGVzLCBldmVudHMsIGNvbnRyb2xzLCBwYXJhbXMsIHRvb2x0aXB9ID0gb3B0aW9uc1xuICBjb25zdCBkaXNwID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuXG4gIGlmIChtZW51KSB7XG4gICAgY29uc3QgbWVudURpc3AgPSBhdG9tLm1lbnUuYWRkKFt7XG4gICAgICBsYWJlbDogTUFJTl9NRU5VX0xBQkVMLFxuICAgICAgc3VibWVudTogWyB7bGFiZWw6IG1lbnUubGFiZWwsIHN1Ym1lbnU6IG1lbnUubWVudX0gXVxuICAgIH1dKVxuICAgIGRpc3AuYWRkKG1lbnVEaXNwKVxuICB9XG4gIGlmIChtZXNzYWdlVHlwZXMpIHtcbiAgICAvLyBUT0RPOiBtYWtlIGRpc3Bvc2FibGVcbiAgICBmb3IgKGNvbnN0IHR5cGUgb2YgT2JqZWN0LmtleXMobWVzc2FnZVR5cGVzKSkge1xuICAgICAgY29uc3Qgb3B0cyA9IG1lc3NhZ2VUeXBlc1t0eXBlXVxuICAgICAgcGx1Z2luTWFuYWdlci5vdXRwdXRQYW5lbC5jcmVhdGVUYWIodHlwZSwgb3B0cylcbiAgICB9XG4gIH1cbiAgaWYgKGV2ZW50cykge1xuICAgIGZvciAoY29uc3QgayBpbiBldmVudHMpIHtcbiAgICAgIGlmIChrLnN0YXJ0c1dpdGgoJ29uJykgJiYgcGx1Z2luTWFuYWdlcltrXSkge1xuICAgICAgICBsZXQgdjogVFRleHRCdWZmZXJDYWxsYmFjayB8IFRUZXh0QnVmZmVyQ2FsbGJhY2tbXSA9IGV2ZW50c1trXVxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodikpIHsgdiA9IFt2XSB9XG4gICAgICAgIGZvciAoY29uc3QgaSBvZiB2KSB7XG4gICAgICAgICAgZGlzcC5hZGQocGx1Z2luTWFuYWdlcltrXShpKSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAodG9vbHRpcCkge1xuICAgIGxldCBoYW5kbGVyOiBUVG9vbHRpcEhhbmRsZXIsIHByaW9yaXR5OiBudW1iZXIgfCB1bmRlZmluZWRcbiAgICBpZiAodHlwZW9mIHRvb2x0aXAgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGhhbmRsZXIgPSB0b29sdGlwXG4gICAgfSBlbHNlIHtcbiAgICAgICh7aGFuZGxlciwgcHJpb3JpdHl9ID0gdG9vbHRpcClcbiAgICB9XG4gICAgaWYgKCFwcmlvcml0eSkgeyBwcmlvcml0eSA9IDEwMCB9XG4gICAgZGlzcC5hZGQocGx1Z2luTWFuYWdlci50b29sdGlwUmVnaXN0cnkucmVnaXN0ZXIobmFtZSwge3ByaW9yaXR5LCBoYW5kbGVyfSkpXG4gIH1cbiAgaWYgKGNvbnRyb2xzKSB7XG4gICAgZm9yIChjb25zdCB7ZWxlbWVudCwgb3B0c30gb2YgY29udHJvbHMpIHtcbiAgICAgIGRpc3AuYWRkKHBsdWdpbk1hbmFnZXIub3V0cHV0UGFuZWwuYWRkUGFuZWxDb250cm9sKGVsZW1lbnQsIG9wdHMpKVxuICAgIH1cbiAgfVxuICBpZiAocGFyYW1zKSB7XG4gICAgZm9yIChjb25zdCBwYXJhbU5hbWUgb2YgT2JqZWN0LmtleXMocGFyYW1zKSkge1xuICAgICAgY29uc3Qgc3BlYyA9IHBhcmFtc1twYXJhbU5hbWVdXG4gICAgICBkaXNwLmFkZChcbiAgICAgICAgcGx1Z2luTWFuYWdlci5jb25maWdQYXJhbU1hbmFnZXIuYWRkKHRoaXMucGx1Z2luTmFtZSwgcGFyYW1OYW1lLCBzcGVjKVxuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkaXNwXG59XG4iXX0=