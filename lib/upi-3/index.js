"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const instance_1 = require("./instance");
exports.UPIInstance = instance_1.UPIInstance;
const error_1 = require("./error");
exports.UPIError = error_1.UPIError;
class UPI {
    constructor(pluginManager) {
        this.pluginManager = pluginManager;
        this.instances = new Map();
        this.disposables = new atom_1.CompositeDisposable();
    }
    consume(options) {
        const { name, menu, messageTypes, events, controls, params, consumer, tooltipEvent } = options;
        if (!name) {
            throw new error_1.UPIError('name has to be specified for UPI');
        }
        if (this.instances.has(name)) {
            throw new error_1.UPIError(`Plugin ${name} already registered with UPI`);
        }
        const instance = new instance_1.UPIInstance(this.pluginManager, name);
        this.instances.set(name, instance);
        const disp = new atom_1.CompositeDisposable();
        if (menu) {
            disp.add(instance.menu.set(menu));
        }
        if (messageTypes) {
            instance.messages.setTypes(messageTypes);
        }
        if (events) {
            for (const k in events) {
                if (instance.events[k]) {
                    let v = events[k];
                    if (!Array.isArray(v)) {
                        v = [v];
                    }
                    for (const i of v) {
                        disp.add(instance.events[k](i));
                    }
                }
            }
        }
        if (tooltipEvent) {
            let handler, priority;
            if (typeof tooltipEvent === 'function') {
                handler = tooltipEvent;
                priority = 100;
            }
            else {
                ({ handler, priority } = tooltipEvent);
            }
            if (!priority) {
                priority = 100;
            }
            disp.add(instance.tooltips.onShouldShowTooltip(priority, handler));
        }
        if (controls) {
            for (const i of controls) {
                disp.add(instance.controls.add(i));
            }
        }
        if (params) {
            disp.add(instance.params.add(params));
        }
        if (consumer) {
            const d = consumer(instance);
            if (typeof d === 'object') {
                disp.add(d);
            }
        }
        disp.add(new atom_1.Disposable(() => {
            this.instances.delete(name);
            instance.destroy();
        }));
        this.disposables.add(disp);
        return disp;
    }
    dispose() {
        this.disposables.dispose();
    }
}
exports.UPI = UPI;
//# sourceMappingURL=data:application/json;base64,