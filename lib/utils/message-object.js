"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function isTextMessage(msg) {
    return !!(msg && msg.text);
}
function isHTMLMessage(msg) {
    return !!(msg && msg.html);
}
class MessageObject {
    constructor(msg) {
        this.msg = msg;
    }
    static fromObject(message) {
        if (message instanceof MessageObject) {
            return message;
        }
        else {
            return new MessageObject(message);
        }
    }
    toHtml() {
        if (this.htmlCache !== undefined) {
            return this.htmlCache;
        }
        if (isTextMessage(this.msg) && this.msg.highlighter) {
            const html = require('atom-highlight')({
                fileContents: this.msg.text,
                scopeName: this.msg.highlighter,
                nbsp: false
            });
            if (html) {
                return this.htmlCache = html;
            }
            this.msg.highlighter = undefined;
            return this.toHtml();
        }
        else if (isHTMLMessage(this.msg)) {
            return this.htmlCache = this.msg.html;
        }
        else {
            let text;
            if (isTextMessage(this.msg)) {
                text = this.msg.text;
            }
            else {
                text = this.msg;
            }
            const div = document.createElement('div');
            div.innerText = text;
            return this.htmlCache = div.innerHTML;
        }
    }
    raw() {
        if (isTextMessage(this.msg)) {
            return this.msg.text;
        }
        else {
            return this.msg;
        }
    }
}
exports.MessageObject = MessageObject;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS1vYmplY3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvbWVzc2FnZS1vYmplY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFTQSx1QkFBd0IsR0FBYTtJQUNuQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFLLEdBQW9CLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDOUMsQ0FBQztBQUVELHVCQUF3QixHQUFhO0lBQ25DLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUssR0FBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUM5QyxDQUFDO0FBR0Q7SUFVRSxZQUFxQixHQUF5QztRQUF6QyxRQUFHLEdBQUgsR0FBRyxDQUFzQztJQUU5RCxDQUFDO0lBWE0sTUFBTSxDQUFDLFVBQVUsQ0FBRSxPQUFpQjtRQUN6QyxFQUFFLENBQUMsQ0FBQyxPQUFPLFlBQVksYUFBYSxDQUFDLENBQUMsQ0FBQztZQUNyQyxNQUFNLENBQUMsT0FBTyxDQUFBO1FBQ2hCLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLE1BQU0sQ0FBQyxJQUFJLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUNuQyxDQUFDO0lBQ0gsQ0FBQztJQU9NLE1BQU07UUFDWCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQTtRQUFDLENBQUM7UUFDM0QsRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDcEQsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUM7Z0JBQ3JDLFlBQVksRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUk7Z0JBQzNCLFNBQVMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVc7Z0JBQy9CLElBQUksRUFBRSxLQUFLO2FBQ1osQ0FBQyxDQUFBO1lBQ0YsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUE7WUFBQyxDQUFDO1lBRTFDLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxHQUFHLFNBQVMsQ0FBQTtZQUNoQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFBO1FBQ3RCLENBQUM7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUE7UUFDdkMsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sSUFBSSxJQUFZLENBQUE7WUFDaEIsRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzVCLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQTtZQUN0QixDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ04sSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUE7WUFDakIsQ0FBQztZQUNELE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUE7WUFDekMsR0FBRyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUE7WUFDcEIsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQTtRQUN2QyxDQUFDO0lBQ0gsQ0FBQztJQUVNLEdBQUc7UUFDUixFQUFFLENBQUMsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUE7UUFDdEIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUE7UUFDakIsQ0FBQztJQUNILENBQUM7Q0FDRjtBQWhERCxzQ0FnREMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgaW50ZXJmYWNlIElNZXNzYWdlVGV4dCB7XG4gIHRleHQ6IHN0cmluZ1xuICBoaWdobGlnaHRlcj86IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElNZXNzYWdlSFRNTCB7XG4gIGh0bWw6IHN0cmluZ1xufVxuXG5mdW5jdGlvbiBpc1RleHRNZXNzYWdlIChtc2c6IFRNZXNzYWdlKTogbXNnIGlzIElNZXNzYWdlVGV4dCB7XG4gIHJldHVybiAhIShtc2cgJiYgKG1zZyBhcyBJTWVzc2FnZVRleHQpLnRleHQpXG59XG5cbmZ1bmN0aW9uIGlzSFRNTE1lc3NhZ2UgKG1zZzogVE1lc3NhZ2UpOiBtc2cgaXMgSU1lc3NhZ2VIVE1MIHtcbiAgcmV0dXJuICEhKG1zZyAmJiAobXNnIGFzIElNZXNzYWdlSFRNTCkuaHRtbClcbn1cbmV4cG9ydCB0eXBlIFRNZXNzYWdlID0gc3RyaW5nIHwgSU1lc3NhZ2VUZXh0IHwgSU1lc3NhZ2VIVE1MIHwgTWVzc2FnZU9iamVjdFxuXG5leHBvcnQgY2xhc3MgTWVzc2FnZU9iamVjdCB7XG4gIHB1YmxpYyBzdGF0aWMgZnJvbU9iamVjdCAobWVzc2FnZTogVE1lc3NhZ2UpOiBNZXNzYWdlT2JqZWN0ICB7XG4gICAgaWYgKG1lc3NhZ2UgaW5zdGFuY2VvZiBNZXNzYWdlT2JqZWN0KSB7XG4gICAgICByZXR1cm4gbWVzc2FnZVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IE1lc3NhZ2VPYmplY3QobWVzc2FnZSlcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGh0bWxDYWNoZT86IHN0cmluZ1xuICBjb25zdHJ1Y3RvciAocHJpdmF0ZSBtc2c6IHN0cmluZyB8IElNZXNzYWdlVGV4dCB8IElNZXNzYWdlSFRNTCkge1xuICAgIC8vIG5vb3BcbiAgfVxuXG4gIHB1YmxpYyB0b0h0bWwgKCk6IHN0cmluZyB7XG4gICAgaWYgKHRoaXMuaHRtbENhY2hlICE9PSB1bmRlZmluZWQpIHsgcmV0dXJuIHRoaXMuaHRtbENhY2hlIH1cbiAgICBpZiAoaXNUZXh0TWVzc2FnZSh0aGlzLm1zZykgJiYgdGhpcy5tc2cuaGlnaGxpZ2h0ZXIpIHtcbiAgICAgIGNvbnN0IGh0bWwgPSByZXF1aXJlKCdhdG9tLWhpZ2hsaWdodCcpKHtcbiAgICAgICAgZmlsZUNvbnRlbnRzOiB0aGlzLm1zZy50ZXh0LFxuICAgICAgICBzY29wZU5hbWU6IHRoaXMubXNnLmhpZ2hsaWdodGVyLFxuICAgICAgICBuYnNwOiBmYWxzZVxuICAgICAgfSlcbiAgICAgIGlmIChodG1sKSB7IHJldHVybiB0aGlzLmh0bWxDYWNoZSA9IGh0bWwgfVxuXG4gICAgICB0aGlzLm1zZy5oaWdobGlnaHRlciA9IHVuZGVmaW5lZFxuICAgICAgcmV0dXJuIHRoaXMudG9IdG1sKClcbiAgICB9IGVsc2UgaWYgKGlzSFRNTE1lc3NhZ2UodGhpcy5tc2cpKSB7XG4gICAgICByZXR1cm4gdGhpcy5odG1sQ2FjaGUgPSB0aGlzLm1zZy5odG1sXG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCB0ZXh0OiBzdHJpbmdcbiAgICAgIGlmIChpc1RleHRNZXNzYWdlKHRoaXMubXNnKSkge1xuICAgICAgICB0ZXh0ID0gdGhpcy5tc2cudGV4dFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGV4dCA9IHRoaXMubXNnXG4gICAgICB9XG4gICAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgICAgZGl2LmlubmVyVGV4dCA9IHRleHRcbiAgICAgIHJldHVybiB0aGlzLmh0bWxDYWNoZSA9IGRpdi5pbm5lckhUTUxcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgcmF3ICgpIHtcbiAgICBpZiAoaXNUZXh0TWVzc2FnZSh0aGlzLm1zZykpIHtcbiAgICAgIHJldHVybiB0aGlzLm1zZy50ZXh0XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLm1zZ1xuICAgIH1cbiAgfVxufVxuIl19