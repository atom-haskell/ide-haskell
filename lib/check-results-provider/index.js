"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
class CheckResultsProvider {
    constructor(editor, pluginManager) {
        this.editor = editor;
        const results = pluginManager.resultsDB;
        const tooltipRegistry = pluginManager.tooltipRegistry;
        this.gutter = this.editor.gutterWithName('ide-haskell-check-results');
        this.disposables = new atom_1.CompositeDisposable();
        this.markers = editor.addMarkerLayer({
            maintainHistory: true,
            persistent: false
        });
        this.markerProps = new WeakMap();
        this.disposables.add(results.onDidUpdate(this.updateResults.bind(this)));
        this.disposables.add(tooltipRegistry.register('builtin:check-results', {
            priority: 200,
            handler: this.tooltipProvider.bind(this)
        }));
    }
    destroy() {
        this.markers.destroy();
        this.disposables.dispose();
    }
    tooltipProvider(editor, crange, type) {
        const msg = this.getMessageAt(crange.start, type);
        if (msg.length > 0) {
            return { range: crange, text: msg };
        }
    }
    getMessageAt(pos, type) {
        const markers = this.find(pos, type);
        const result = [];
        for (const marker of markers) {
            const res = this.markerProps.get(marker);
            if (!res) {
                continue;
            }
            result.push(res.message);
        }
        return result;
    }
    updateResults(res) {
        this.markers.clear();
        const path = this.editor.getPath();
        for (const r of res.filter(({ uri }) => uri === path)) {
            this.markerFromCheckResult(r);
        }
    }
    markerFromCheckResult(resItem) {
        const { position } = resItem;
        if (!position) {
            return;
        }
        const range = new atom_1.Range(position, atom_1.Point.fromObject([position.row, position.column + 1]));
        const marker = this.markers.markBufferRange(range, { invalidate: 'touch' });
        this.markerProps.set(marker, resItem);
        const disp = new atom_1.CompositeDisposable();
        disp.add(marker.onDidDestroy(() => {
            this.markerProps.delete(marker);
            disp.dispose();
        }), marker.onDidChange(({ isValid }) => {
            resItem.setValid(isValid);
        }));
        this.decorateMarker(marker, resItem);
    }
    decorateMarker(m, r) {
        if (!this.gutter) {
            return;
        }
        const cls = { class: `ide-haskell-${r.severity}` };
        this.gutter.decorateMarker(m, Object.assign({ type: 'line-number' }, cls));
        this.editor.decorateMarker(m, Object.assign({ type: 'highlight' }, cls));
        this.editor.decorateMarker(m, Object.assign({ type: 'line' }, cls));
    }
    find(pos, type) {
        switch (type) {
            case 'gutter':
            case 'selection':
                return this.markers.findMarkers({ startBufferRow: pos.row });
            case 'keyboard':
                return this.markers.findMarkers({ startBufferPosition: pos });
            case 'mouse':
            case 'context':
                return this.markers.findMarkers({ containsBufferPosition: pos });
            default: throw new TypeError('Switch assertion failed');
        }
    }
}
exports.CheckResultsProvider = CheckResultsProvider;
//# sourceMappingURL=data:application/json;base64,