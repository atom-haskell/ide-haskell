"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
class CheckResultsProvider {
    constructor(editor, pluginManager) {
        this.editor = editor;
        const results = pluginManager.checkResults;
        const tooltipRegistry = pluginManager.tooltipRegistry;
        this.gutter = this.editor.gutterWithName('ide-haskell-check-results');
        this.disposables = new atom_1.CompositeDisposable();
        this.markers = editor.addMarkerLayer({
            maintainHistory: true,
            persistent: false
        });
        this.markerProps = new WeakMap();
        this.disposables.add(results.onDidUpdate(this.updateResults.bind(this)));
        this.disposables.add(tooltipRegistry.register('builtin:check-results', {
            priority: 200,
            handler: this.tooltipProvider.bind(this)
        }));
    }
    destroy() {
        this.markers.destroy();
        this.disposables.dispose();
    }
    tooltipProvider(editor, crange, type) {
        const msg = this.getMessageAt(crange.start, type);
        if (msg.length > 0) {
            return { range: crange, text: msg };
        }
    }
    getMessageAt(pos, type) {
        const markers = this.find(pos, type);
        const result = [];
        for (const marker of markers) {
            const res = this.markerProps.get(marker);
            if (!res) {
                continue;
            }
            result.push(res.message);
        }
        return result;
    }
    updateResults({ res }) {
        this.markers.clear();
        const path = this.editor.getPath();
        for (const r of res.filter(({ uri }) => uri === path)) {
            this.markerFromCheckResult(r);
        }
    }
    markerFromCheckResult(resItem) {
        const { position } = resItem;
        if (!position) {
            return;
        }
        const range = new atom_1.Range(position, atom_1.Point.fromObject([position.row, position.column + 1]));
        const marker = this.markers.markBufferRange(range, { invalidate: 'touch' });
        this.markerProps.set(marker, resItem);
        const disp = marker.onDidChange(({ isValid }) => {
            if (!isValid) {
                this.markerProps.delete(marker);
                resItem.destroy();
                marker.destroy();
                disp.dispose();
            }
        });
        this.decorateMarker(marker, resItem);
    }
    decorateMarker(m, r) {
        if (!this.gutter) {
            return;
        }
        const cls = { class: `ide-haskell-${r.severity}` };
        this.gutter.decorateMarker(m, Object.assign({ type: 'line-number' }, cls));
        this.editor.decorateMarker(m, Object.assign({ type: 'highlight' }, cls));
        this.editor.decorateMarker(m, Object.assign({ type: 'line' }, cls));
    }
    find(pos, type) {
        switch (type) {
            case 'gutter':
            case 'selection':
                return this.markers.findMarkers({ startBufferRow: pos.row });
            case 'keyboard':
                return this.markers.findMarkers({ startBufferPosition: pos });
            case 'mouse':
            case 'context':
                return this.markers.findMarkers({ containsBufferPosition: pos });
            default: throw new TypeError('Switch assertion failed');
        }
    }
}
exports.CheckResultsProvider = CheckResultsProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY2hlY2stcmVzdWx0cy1wcm92aWRlci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUdhO0FBUWI7SUFLRSxZQUFxQixNQUFrQixFQUFFLGFBQTRCO1FBQWhELFdBQU0sR0FBTixNQUFNLENBQVk7UUFDckMsTUFBTSxPQUFPLEdBQUcsYUFBYSxDQUFDLFlBQVksQ0FBQTtRQUMxQyxNQUFNLGVBQWUsR0FBRyxhQUFhLENBQUMsZUFBZSxDQUFBO1FBQ3JELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsMkJBQTJCLENBQUMsQ0FBQTtRQUVyRSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksMEJBQW1CLEVBQUUsQ0FBQTtRQUM1QyxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUM7WUFDbkMsZUFBZSxFQUFFLElBQUk7WUFDckIsVUFBVSxFQUFFLEtBQUs7U0FDbEIsQ0FBQyxDQUFBO1FBQ0YsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFBO1FBQ2hDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3hFLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsdUJBQXVCLEVBQUU7WUFDckUsUUFBUSxFQUFFLEdBQUc7WUFDYixPQUFPLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQ3pDLENBQUMsQ0FBQyxDQUFBO0lBQ0wsQ0FBQztJQUVNLE9BQU87UUFDWixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQ3RCLElBQUksQ0FB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LENBQUMsQ0FBQTtRQUN6RCxDQUFDO0lBQ0gsQ0FBQztDQUNGO0FBL0ZELG9EQStGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIFJhbmdlLCBUZXh0RWRpdG9yLCBQb2ludCwgQ29tcG9zaXRlRGlzcG9zYWJsZSwgR3V0dGVyLCBEaXNwbGF5TWFya2VyLFxuICBEaXNwbGF5TWFya2VyTGF5ZXJcbn0gZnJvbSAnYXRvbSdcblxuaW1wb3J0IHtSZXN1bHRJdGVtfSBmcm9tICcuLi9yZXN1bHRzLWRiJ1xuaW1wb3J0IHtNZXNzYWdlT2JqZWN0fSBmcm9tICcuLi91dGlscydcbmltcG9ydCB7UmVzdWx0c0RCfSBmcm9tICcuLi9yZXN1bHRzLWRiJ1xuaW1wb3J0IHtURXZlbnRSYW5nZVR5cGV9IGZyb20gJy4uL2VkaXRvci1jb250cm9sL3Rvb2x0aXAtbWFuYWdlcidcbmltcG9ydCB7UGx1Z2luTWFuYWdlciwgSUVkaXRvckNvbnRyb2xsZXJ9IGZyb20gJy4uL3BsdWdpbi1tYW5hZ2VyJ1xuXG5leHBvcnQgY2xhc3MgQ2hlY2tSZXN1bHRzUHJvdmlkZXIgaW1wbGVtZW50cyBJRWRpdG9yQ29udHJvbGxlciB7XG4gIHB1YmxpYyBndXR0ZXI6IEd1dHRlclxuICBwcml2YXRlIG1hcmtlcnM6IERpc3BsYXlNYXJrZXJMYXllclxuICBwcml2YXRlIGRpc3Bvc2FibGVzOiBDb21wb3NpdGVEaXNwb3NhYmxlXG4gIHByaXZhdGUgbWFya2VyUHJvcHM6IFdlYWtNYXA8RGlzcGxheU1hcmtlciwgUmVzdWx0SXRlbT5cbiAgY29uc3RydWN0b3IgKHByaXZhdGUgZWRpdG9yOiBUZXh0RWRpdG9yLCBwbHVnaW5NYW5hZ2VyOiBQbHVnaW5NYW5hZ2VyKSB7XG4gICAgY29uc3QgcmVzdWx0cyA9IHBsdWdpbk1hbmFnZXIuY2hlY2tSZXN1bHRzXG4gICAgY29uc3QgdG9vbHRpcFJlZ2lzdHJ5ID0gcGx1Z2luTWFuYWdlci50b29sdGlwUmVnaXN0cnlcbiAgICB0aGlzLmd1dHRlciA9IHRoaXMuZWRpdG9yLmd1dHRlcldpdGhOYW1lKCdpZGUtaGFza2VsbC1jaGVjay1yZXN1bHRzJylcblxuICAgIHRoaXMuZGlzcG9zYWJsZXMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG4gICAgdGhpcy5tYXJrZXJzID0gZWRpdG9yLmFkZE1hcmtlckxheWVyKHtcbiAgICAgIG1haW50YWluSGlzdG9yeTogdHJ1ZSxcbiAgICAgIHBlcnNpc3RlbnQ6IGZhbHNlXG4gICAgfSlcbiAgICB0aGlzLm1hcmtlclByb3BzID0gbmV3IFdlYWtNYXAoKVxuICAgIHRoaXMuZGlzcG9zYWJsZXMuYWRkKHJlc3VsdHMub25EaWRVcGRhdGUodGhpcy51cGRhdGVSZXN1bHRzLmJpbmQodGhpcykpKVxuICAgIHRoaXMuZGlzcG9zYWJsZXMuYWRkKHRvb2x0aXBSZWdpc3RyeS5yZWdpc3RlcignYnVpbHRpbjpjaGVjay1yZXN1bHRzJywge1xuICAgICAgcHJpb3JpdHk6IDIwMCxcbiAgICAgIGhhbmRsZXI6IHRoaXMudG9vbHRpcFByb3ZpZGVyLmJpbmQodGhpcylcbiAgICB9KSlcbiAgfVxuXG4gIHB1YmxpYyBkZXN0cm95ICgpIHtcbiAgICB0aGlzLm1hcmtlcnMuZGVzdHJveSgpXG4gICAgdGhpcy5kaXNwb3NhYmxlcy5kaXNwb3NlKClcbiAgfVxuXG4gIHByaXZhdGUgdG9vbHRpcFByb3ZpZGVyIChlZGl0b3I6IFRleHRFZGl0b3IsIGNyYW5nZTogUmFuZ2UsIHR5cGU6IFRFdmVudFJhbmdlVHlwZSkge1xuICAgIGNvbnN0IG1zZyA9IHRoaXMuZ2V0TWVzc2FnZUF0KGNyYW5nZS5zdGFydCwgdHlwZSlcbiAgICBpZiAobXNnLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiB7IHJhbmdlOiBjcmFuZ2UsIHRleHQ6IG1zZyB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRNZXNzYWdlQXQgKHBvczogUG9pbnQsIHR5cGU6IFRFdmVudFJhbmdlVHlwZSkge1xuICAgIGNvbnN0IG1hcmtlcnMgPSB0aGlzLmZpbmQocG9zLCB0eXBlKVxuICAgIGNvbnN0IHJlc3VsdDogTWVzc2FnZU9iamVjdFtdID0gW11cbiAgICBmb3IgKGNvbnN0IG1hcmtlciBvZiBtYXJrZXJzKSB7XG4gICAgICBjb25zdCByZXMgPSB0aGlzLm1hcmtlclByb3BzLmdldChtYXJrZXIpXG4gICAgICBpZiAoIXJlcykgeyBjb250aW51ZSB9XG4gICAgICByZXN1bHQucHVzaChyZXMubWVzc2FnZSlcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVSZXN1bHRzICh7cmVzfToge3JlczogUmVzdWx0c0RCfSkge1xuICAgIHRoaXMubWFya2Vycy5jbGVhcigpXG4gICAgY29uc3QgcGF0aCA9IHRoaXMuZWRpdG9yLmdldFBhdGgoKVxuICAgIGZvciAoY29uc3QgciBvZiByZXMuZmlsdGVyKCh7dXJpfSkgPT4gdXJpID09PSBwYXRoKSkge1xuICAgICAgdGhpcy5tYXJrZXJGcm9tQ2hlY2tSZXN1bHQocilcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIG1hcmtlckZyb21DaGVja1Jlc3VsdCAocmVzSXRlbTogUmVzdWx0SXRlbSkge1xuICAgIGNvbnN0IHtwb3NpdGlvbn0gPSByZXNJdGVtXG4gICAgaWYgKCFwb3NpdGlvbikgeyByZXR1cm4gfVxuXG4gICAgY29uc3QgcmFuZ2UgPSBuZXcgUmFuZ2UocG9zaXRpb24sIFBvaW50LmZyb21PYmplY3QoW3Bvc2l0aW9uLnJvdywgcG9zaXRpb24uY29sdW1uICsgMV0pKVxuICAgIGNvbnN0IG1hcmtlciA9IHRoaXMubWFya2Vycy5tYXJrQnVmZmVyUmFuZ2UocmFuZ2UsIHsgaW52YWxpZGF0ZTogJ3RvdWNoJyB9KVxuICAgIHRoaXMubWFya2VyUHJvcHMuc2V0KG1hcmtlciwgcmVzSXRlbSlcbiAgICBjb25zdCBkaXNwID0gbWFya2VyLm9uRGlkQ2hhbmdlKCh7aXNWYWxpZH06IERpc3BsYXlNYXJrZXIpID0+IHtcbiAgICAgIGlmICghaXNWYWxpZCkge1xuICAgICAgICB0aGlzLm1hcmtlclByb3BzLmRlbGV0ZShtYXJrZXIpXG4gICAgICAgIHJlc0l0ZW0uZGVzdHJveSgpXG4gICAgICAgIG1hcmtlci5kZXN0cm95KClcbiAgICAgICAgZGlzcC5kaXNwb3NlKClcbiAgICAgIH1cbiAgICB9KVxuICAgIHRoaXMuZGVjb3JhdGVNYXJrZXIobWFya2VyLCByZXNJdGVtKVxuICB9XG5cbiAgcHJpdmF0ZSBkZWNvcmF0ZU1hcmtlciAobTogRGlzcGxheU1hcmtlciwgcjogUmVzdWx0SXRlbSkge1xuICAgIGlmICghdGhpcy5ndXR0ZXIpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBjb25zdCBjbHMgPSB7Y2xhc3M6IGBpZGUtaGFza2VsbC0ke3Iuc2V2ZXJpdHl9YH1cbiAgICB0aGlzLmd1dHRlci5kZWNvcmF0ZU1hcmtlcihtLCB7IHR5cGU6ICdsaW5lLW51bWJlcicsIC4uLmNscyB9KVxuICAgIHRoaXMuZWRpdG9yLmRlY29yYXRlTWFya2VyKG0sIHsgdHlwZTogJ2hpZ2hsaWdodCcsIC4uLmNscyB9KVxuICAgIHRoaXMuZWRpdG9yLmRlY29yYXRlTWFya2VyKG0sIHsgdHlwZTogJ2xpbmUnLCAuLi5jbHMgfSlcbiAgfVxuXG4gIHByaXZhdGUgZmluZCAocG9zOiBQb2ludCwgdHlwZTogVEV2ZW50UmFuZ2VUeXBlKSB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlICdndXR0ZXInOlxuICAgICAgY2FzZSAnc2VsZWN0aW9uJzogLy8gVE9ETzogdGhpcyBpcyBub3QgZ29vZFxuICAgICAgICByZXR1cm4gdGhpcy5tYXJrZXJzLmZpbmRNYXJrZXJzKHsgc3RhcnRCdWZmZXJSb3c6IHBvcy5yb3cgfSlcbiAgICAgIGNhc2UgJ2tleWJvYXJkJzpcbiAgICAgICAgcmV0dXJuIHRoaXMubWFya2Vycy5maW5kTWFya2Vycyh7IHN0YXJ0QnVmZmVyUG9zaXRpb246IHBvcyB9KVxuICAgICAgY2FzZSAnbW91c2UnOlxuICAgICAgY2FzZSAnY29udGV4dCc6XG4gICAgICAgIHJldHVybiB0aGlzLm1hcmtlcnMuZmluZE1hcmtlcnMoeyBjb250YWluc0J1ZmZlclBvc2l0aW9uOiBwb3MgfSlcbiAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBUeXBlRXJyb3IoJ1N3aXRjaCBhc3NlcnRpb24gZmFpbGVkJylcbiAgICB9XG4gIH1cbn1cbiJdfQ==