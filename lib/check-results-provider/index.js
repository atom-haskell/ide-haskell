"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
class MarkerManager {
    constructor(editor, results, tooltipRegistry) {
        this.editor = editor;
        this.results = results;
        this.tooltipRegistry = tooltipRegistry;
        this.gutter = this.editor.gutterWithName('ide-haskell-check-results');
        this.disposables = new atom_1.CompositeDisposable();
        this.markers = editor.addMarkerLayer({
            maintainHistory: true,
            persistent: false
        });
        this.markerProps = new WeakMap();
        this.disposables.add(results.onDidUpdate(this.updateResults.bind(this)));
        this.disposables.add(tooltipRegistry.register('builtin:check-results', {
            priority: 200,
            handler: this.tooltipProvider.bind(this)
        }));
    }
    dispose() {
        this.markers.destroy();
        this.disposables.dispose();
    }
    tooltipProvider(editor, crange, type) {
        const msg = this.getMessageAt(crange.start, type);
        if (msg.length > 0) {
            return { range: crange, text: msg };
        }
    }
    getMessageAt(pos, type) {
        const markers = this.find(pos, type);
        const result = [];
        for (const marker of markers) {
            const res = this.markerProps.get(marker);
            if (!res) {
                continue;
            }
            result.push(res.message);
        }
        return result;
    }
    updateResults() {
        this.markers.clear();
        const path = this.editor.getPath();
        for (const res of this.results.filter(({ uri }) => uri === path)) {
            this.markerFromCheckResult(res);
        }
    }
    markerFromCheckResult(resItem) {
        const { position } = resItem;
        if (!position) {
            return;
        }
        const range = new atom_1.Range(position, atom_1.Point.fromObject([position.row, position.column + 1]));
        const marker = this.markers.markBufferRange(range, { invalidate: 'touch' });
        this.markerProps.set(marker, resItem);
        const disp = marker.onDidChange(({ isValid }) => {
            if (!isValid) {
                this.markerProps.delete(marker);
                resItem.destroy();
                marker.destroy();
                disp.dispose();
            }
        });
        this.decorateMarker(marker, resItem);
    }
    decorateMarker(m, r) {
        if (!this.gutter) {
            return;
        }
        const cls = { class: `ide-haskell-${r.severity}` };
        this.gutter.decorateMarker(m, Object.assign({ type: 'line-number' }, cls));
        this.editor.decorateMarker(m, Object.assign({ type: 'highlight' }, cls));
        this.editor.decorateMarker(m, Object.assign({ type: 'line' }, cls));
    }
    find(pos, type) {
        switch (type) {
            case 'gutter':
            case 'selection':
                return this.markers.findMarkers({ startBufferRow: pos.row });
            case 'keyboard':
                return this.markers.findMarkers({ startBufferPosition: pos });
            case 'mouse':
            case 'context':
                return this.markers.findMarkers({ containsBufferPosition: pos });
            default: throw new TypeError('Switch assertion failed');
        }
    }
}
exports.MarkerManager = MarkerManager;
//# sourceMappingURL=data:application/json;base64,