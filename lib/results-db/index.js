"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const result_item_1 = require("./result-item");
exports.ResultItem = result_item_1.ResultItem;
const atom_1 = require("atom");
const provider_1 = require("./provider");
class ResultsDB {
    constructor() {
        this.currentId = 0;
        this.disposables = new atom_1.CompositeDisposable();
        this.emitter = new atom_1.Emitter();
        this.disposables.add(this.emitter);
        this.messages = [];
    }
    destroy() {
        this.disposables.dispose();
    }
    onDidUpdate(callback) {
        return this.emitter.on('did-update', callback);
    }
    didUpdate(providerId, msgs) {
        this.messages = this.messages.filter((m) => m.providerId !== providerId);
        this.messages.push(...msgs);
        this.emitter.emit('did-update', this);
    }
    registerProvider(providerName) {
        const p = new provider_1.Provider(this, ++this.currentId, providerName);
        this.disposables.add(p);
        return p;
    }
    results() {
        return this.messages.filter((i) => i.isValid());
    }
    filter(f) {
        return this.messages.filter(f);
    }
    isEmpty() {
        return this.messages.length === 0;
    }
}
exports.ResultsDB = ResultsDB;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcmVzdWx0cy1kYi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtDQUEyRTtBQUlOLDhDQUFVO0FBSC9FLCtCQUFpRDtBQUNqRCx5Q0FBNkQ7QUFNN0Q7SUFLRTtRQUNFLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFBO1FBQ2xCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSwwQkFBbUIsRUFBRSxDQUFBO1FBQzVDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxjQUFPLEVBQUUsQ0FBQTtRQUM1QixJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDbEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUE7SUFDcEIsQ0FBQztJQUVNLE9BQU87UUFDWixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQzVCLENBQUM7SUFFTSxXQUFXLENBQUUsUUFBeUI7UUFDM0MsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUNoRCxDQUFDO0lBRU0sU0FBUyxDQUFFLFVBQWtCLEVBQUUsSUFBa0I7UUFDdEQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsVUFBVSxLQUFLLFVBQVUsQ0FBQyxDQUFBO1FBQ3hFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUE7UUFDM0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFBO0lBQ3ZDLENBQUM7SUFFTSxnQkFBZ0IsQ0FBRSxZQUFvQjtRQUMzQyxNQUFNLENBQUMsR0FBRyxJQUFJLG1CQUFRLENBQUMsSUFBSSxFQUFFLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsQ0FBQTtRQUM1RCxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUN2QixNQUFNLENBQUMsQ0FBQyxDQUFBO0lBQ1YsQ0FBQztJQUVNLE9BQU87UUFDWixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUE7SUFDakQsQ0FBQztJQUVNLE1BQU0sQ0FBRSxDQUFnQztRQUM3QyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDaEMsQ0FBQztJQUVNLE9BQU87UUFDWixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFBO0lBQ25DLENBQUM7Q0FDRjtBQTVDRCw4QkE0Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1RQb3NpdGlvbiwgVFNldmVyaXR5LCBJUmVzdWx0SXRlbSwgUmVzdWx0SXRlbX0gZnJvbSAnLi9yZXN1bHQtaXRlbSdcbmltcG9ydCB7Q29tcG9zaXRlRGlzcG9zYWJsZSwgRW1pdHRlcn0gZnJvbSAnYXRvbSdcbmltcG9ydCB7UHJvdmlkZXIsIFRNZXNzYWdlUHJvdmlkZXJGdW5jdGlvbn0gZnJvbSAnLi9wcm92aWRlcidcblxuZXhwb3J0IHtUUG9zaXRpb24sIFRTZXZlcml0eSwgSVJlc3VsdEl0ZW0sIFRNZXNzYWdlUHJvdmlkZXJGdW5jdGlvbiwgUmVzdWx0SXRlbX1cblxuZXhwb3J0IHR5cGUgVFVwZGF0ZUNhbGxiYWNrID0gKGFyZzogUmVzdWx0c0RCKSA9PiB2b2lkXG5cbmV4cG9ydCBjbGFzcyBSZXN1bHRzREIge1xuICBwcml2YXRlIGN1cnJlbnRJZDogbnVtYmVyXG4gIHByaXZhdGUgbWVzc2FnZXM6IFJlc3VsdEl0ZW1bXVxuICBwcml2YXRlIGRpc3Bvc2FibGVzOiBDb21wb3NpdGVEaXNwb3NhYmxlXG4gIHByaXZhdGUgZW1pdHRlcjogRW1pdHRlclxuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5jdXJyZW50SWQgPSAwXG4gICAgdGhpcy5kaXNwb3NhYmxlcyA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKClcbiAgICB0aGlzLmVtaXR0ZXIgPSBuZXcgRW1pdHRlcigpXG4gICAgdGhpcy5kaXNwb3NhYmxlcy5hZGQodGhpcy5lbWl0dGVyKVxuICAgIHRoaXMubWVzc2FnZXMgPSBbXVxuICB9XG5cbiAgcHVibGljIGRlc3Ryb3kgKCkge1xuICAgIHRoaXMuZGlzcG9zYWJsZXMuZGlzcG9zZSgpXG4gIH1cblxuICBwdWJsaWMgb25EaWRVcGRhdGUgKGNhbGxiYWNrOiBUVXBkYXRlQ2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyLm9uKCdkaWQtdXBkYXRlJywgY2FsbGJhY2spXG4gIH1cblxuICBwdWJsaWMgZGlkVXBkYXRlIChwcm92aWRlcklkOiBudW1iZXIsIG1zZ3M6IFJlc3VsdEl0ZW1bXSkge1xuICAgIHRoaXMubWVzc2FnZXMgPSB0aGlzLm1lc3NhZ2VzLmZpbHRlcigobSkgPT4gbS5wcm92aWRlcklkICE9PSBwcm92aWRlcklkKVxuICAgIHRoaXMubWVzc2FnZXMucHVzaCguLi5tc2dzKVxuICAgIHRoaXMuZW1pdHRlci5lbWl0KCdkaWQtdXBkYXRlJywgdGhpcylcbiAgfVxuXG4gIHB1YmxpYyByZWdpc3RlclByb3ZpZGVyIChwcm92aWRlck5hbWU6IHN0cmluZykge1xuICAgIGNvbnN0IHAgPSBuZXcgUHJvdmlkZXIodGhpcywgKyt0aGlzLmN1cnJlbnRJZCwgcHJvdmlkZXJOYW1lKVxuICAgIHRoaXMuZGlzcG9zYWJsZXMuYWRkKHApXG4gICAgcmV0dXJuIHBcbiAgfVxuXG4gIHB1YmxpYyByZXN1bHRzICgpIHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlcy5maWx0ZXIoKGkpID0+IGkuaXNWYWxpZCgpKVxuICB9XG5cbiAgcHVibGljIGZpbHRlciAoZjogKGl0ZW06IFJlc3VsdEl0ZW0pID0+IGJvb2xlYW4pIHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlcy5maWx0ZXIoZilcbiAgfVxuXG4gIHB1YmxpYyBpc0VtcHR5ICgpIHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlcy5sZW5ndGggPT09IDBcbiAgfVxufVxuIl19