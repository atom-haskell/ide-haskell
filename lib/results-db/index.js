"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const result_item_1 = require("./result-item");
exports.ResultItem = result_item_1.ResultItem;
const atom_1 = require("atom");
const provider_1 = require("./provider");
class ResultsDB {
    constructor() {
        this.currentId = 0;
        this.disposables = new atom_1.CompositeDisposable();
        this.emitter = new atom_1.Emitter();
        this.disposables.add(this.emitter);
        this.messages = new Map();
    }
    destroy() {
        this.disposables.dispose();
    }
    onDidUpdate(callback) {
        return this.emitter.on('did-update', callback);
    }
    didUpdate(providerId, msgs) {
        const newMsgs = new Map(msgs.map((m) => [m.hash(), m]));
        for (const [k, v] of this.messages) {
            if (newMsgs.has(k)) {
                newMsgs.delete(k);
            }
            else if (v.providerId === providerId) {
                this.messages.delete(k);
            }
        }
        for (const [k, v] of newMsgs) {
            this.messages.set(k, v);
        }
        this.emitter.emit('did-update', this);
    }
    registerProvider(providerName) {
        const p = new provider_1.Provider(this, ++this.currentId, providerName);
        this.disposables.add(p);
        return p;
    }
    *results() {
        for (const v of this.messages.values()) {
            if (v.isValid()) {
                yield v;
            }
        }
    }
    *filter(f) {
        for (const v of this.results()) {
            if (f(v)) {
                yield v;
            }
        }
    }
    isEmpty() {
        return this.messages.size === 0;
    }
}
exports.ResultsDB = ResultsDB;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcmVzdWx0cy1kYi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtDQUEyRTtBQUlOLDhDQUFVO0FBSC9FLCtCQUFpRDtBQUNqRCx5Q0FBNkQ7QUFNN0Q7SUFLRTtRQUNFLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFBO1FBQ2xCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSwwQkFBbUIsRUFBRSxDQUFBO1FBQzVDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxjQUFPLEVBQUUsQ0FBQTtRQUM1QixJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDbEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFBO0lBQzNCLENBQUM7SUFFTSxPQUFPO1FBQ1osSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUM1QixDQUFDO0lBRU0sV0FBVyxDQUFFLFFBQXlCO1FBQzNDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDaEQsQ0FBQztJQUVNLFNBQVMsQ0FBRSxVQUFrQixFQUFFLElBQWtCO1FBQ3RELE1BQU0sT0FBTyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3ZELEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDbkMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ25CLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDbkIsQ0FBQztZQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ3pCLENBQUM7UUFDSCxDQUFDO1FBQ0QsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQzdCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUN6QixDQUFDO1FBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFBO0lBQ3ZDLENBQUM7SUFFTSxnQkFBZ0IsQ0FBRSxZQUFvQjtRQUMzQyxNQUFNLENBQUMsR0FBRyxJQUFJLG1CQUFRLENBQUMsSUFBSSxFQUFFLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsQ0FBQTtRQUM1RCxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUN2QixNQUFNLENBQUMsQ0FBQyxDQUFBO0lBQ1YsQ0FBQztJQUVELENBQVMsT0FBTztRQUNkLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3ZDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQUMsTUFBTSxDQUFDLENBQUE7WUFBQyxDQUFDO1FBQzlCLENBQUM7SUFDSCxDQUFDO0lBRUQsQ0FBUyxNQUFNLENBQUUsQ0FBZ0M7UUFDL0MsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMvQixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUFDLE1BQU0sQ0FBQyxDQUFBO1lBQUMsQ0FBQztRQUN2QixDQUFDO0lBQ0gsQ0FBQztJQUVNLE9BQU87UUFDWixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFBO0lBQ2pDLENBQUM7Q0FDRjtBQXpERCw4QkF5REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1RQb3NpdGlvbiwgVFNldmVyaXR5LCBJUmVzdWx0SXRlbSwgUmVzdWx0SXRlbX0gZnJvbSAnLi9yZXN1bHQtaXRlbSdcbmltcG9ydCB7Q29tcG9zaXRlRGlzcG9zYWJsZSwgRW1pdHRlcn0gZnJvbSAnYXRvbSdcbmltcG9ydCB7UHJvdmlkZXIsIFRNZXNzYWdlUHJvdmlkZXJGdW5jdGlvbn0gZnJvbSAnLi9wcm92aWRlcidcblxuZXhwb3J0IHtUUG9zaXRpb24sIFRTZXZlcml0eSwgSVJlc3VsdEl0ZW0sIFRNZXNzYWdlUHJvdmlkZXJGdW5jdGlvbiwgUmVzdWx0SXRlbX1cblxuZXhwb3J0IHR5cGUgVFVwZGF0ZUNhbGxiYWNrID0gKGFyZzogUmVzdWx0c0RCKSA9PiB2b2lkXG5cbmV4cG9ydCBjbGFzcyBSZXN1bHRzREIge1xuICBwcml2YXRlIGN1cnJlbnRJZDogbnVtYmVyXG4gIHByaXZhdGUgbWVzc2FnZXM6IE1hcDxzdHJpbmcsIFJlc3VsdEl0ZW0+XG4gIHByaXZhdGUgZGlzcG9zYWJsZXM6IENvbXBvc2l0ZURpc3Bvc2FibGVcbiAgcHJpdmF0ZSBlbWl0dGVyOiBFbWl0dGVyXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLmN1cnJlbnRJZCA9IDBcbiAgICB0aGlzLmRpc3Bvc2FibGVzID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuICAgIHRoaXMuZW1pdHRlciA9IG5ldyBFbWl0dGVyKClcbiAgICB0aGlzLmRpc3Bvc2FibGVzLmFkZCh0aGlzLmVtaXR0ZXIpXG4gICAgdGhpcy5tZXNzYWdlcyA9IG5ldyBNYXAoKVxuICB9XG5cbiAgcHVibGljIGRlc3Ryb3kgKCkge1xuICAgIHRoaXMuZGlzcG9zYWJsZXMuZGlzcG9zZSgpXG4gIH1cblxuICBwdWJsaWMgb25EaWRVcGRhdGUgKGNhbGxiYWNrOiBUVXBkYXRlQ2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyLm9uKCdkaWQtdXBkYXRlJywgY2FsbGJhY2spXG4gIH1cblxuICBwdWJsaWMgZGlkVXBkYXRlIChwcm92aWRlcklkOiBudW1iZXIsIG1zZ3M6IFJlc3VsdEl0ZW1bXSkge1xuICAgIGNvbnN0IG5ld01zZ3MgPSBuZXcgTWFwKG1zZ3MubWFwKChtKSA9PiBbbS5oYXNoKCksIG1dKSlcbiAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiB0aGlzLm1lc3NhZ2VzKSB7XG4gICAgICBpZiAobmV3TXNncy5oYXMoaykpIHtcbiAgICAgICAgbmV3TXNncy5kZWxldGUoaylcbiAgICAgIH0gZWxzZSBpZiAodi5wcm92aWRlcklkID09PSBwcm92aWRlcklkKSB7XG4gICAgICAgIHRoaXMubWVzc2FnZXMuZGVsZXRlKGspXG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIG5ld01zZ3MpIHtcbiAgICAgIHRoaXMubWVzc2FnZXMuc2V0KGssIHYpXG4gICAgfVxuICAgIHRoaXMuZW1pdHRlci5lbWl0KCdkaWQtdXBkYXRlJywgdGhpcylcbiAgfVxuXG4gIHB1YmxpYyByZWdpc3RlclByb3ZpZGVyIChwcm92aWRlck5hbWU6IHN0cmluZykge1xuICAgIGNvbnN0IHAgPSBuZXcgUHJvdmlkZXIodGhpcywgKyt0aGlzLmN1cnJlbnRJZCwgcHJvdmlkZXJOYW1lKVxuICAgIHRoaXMuZGlzcG9zYWJsZXMuYWRkKHApXG4gICAgcmV0dXJuIHBcbiAgfVxuXG4gIHB1YmxpYyAqIHJlc3VsdHMgKCkge1xuICAgIGZvciAoY29uc3QgdiBvZiB0aGlzLm1lc3NhZ2VzLnZhbHVlcygpKSB7XG4gICAgICBpZiAodi5pc1ZhbGlkKCkpIHsgeWllbGQgdiB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljICogZmlsdGVyIChmOiAoaXRlbTogUmVzdWx0SXRlbSkgPT4gYm9vbGVhbikge1xuICAgIGZvciAoY29uc3QgdiBvZiB0aGlzLnJlc3VsdHMoKSkge1xuICAgICAgaWYgKGYodikpIHsgeWllbGQgdiB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGlzRW1wdHkgKCkge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2VzLnNpemUgPT09IDBcbiAgfVxufVxuIl19