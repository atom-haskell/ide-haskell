"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const result_item_1 = require("./result-item");
exports.ResultItem = result_item_1.ResultItem;
const atom_1 = require("atom");
const provider_1 = require("./provider");
class ResultsDB {
    constructor() {
        this.currentId = 0;
        this.disposables = new atom_1.CompositeDisposable();
        this.emitter = new atom_1.Emitter();
        this.disposables.add(this.emitter);
        this.messages = new Map();
    }
    destroy() {
        this.disposables.dispose();
    }
    onDidUpdate(callback) {
        return this.emitter.on('did-update', callback);
    }
    didUpdate(providerId, msgs) {
        const uris = msgs.map(v => v.uri).filter(v => v);
        for (const [k, v] of Array.from(this.messages)) {
            if (v.providerId === providerId || v.uri && uris.includes(v.uri)) {
                this.messages.delete(k);
            }
        }
        for (const msg of msgs) {
            this.messages.set(msg.hash(), msg);
        }
        this.emitter.emit('did-update', this);
    }
    registerProvider(providerName) {
        const p = new provider_1.Provider(this, ++this.currentId, providerName);
        this.disposables.add(p);
        return p;
    }
    results() {
        return this.messages.values();
    }
    *filter(f) {
        for (const v of this.results()) {
            if (f(v)) {
                yield v;
            }
        }
    }
    isEmpty() {
        return this.messages.size === 0;
    }
}
exports.ResultsDB = ResultsDB;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcmVzdWx0cy1kYi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtDQUEyRTtBQUlOLDhDQUFVO0FBSC9FLCtCQUFpRDtBQUNqRCx5Q0FBNkQ7QUFNN0Q7SUFLRTtRQUNFLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFBO1FBQ2xCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSwwQkFBbUIsRUFBRSxDQUFBO1FBQzVDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxjQUFPLEVBQUUsQ0FBQTtRQUM1QixJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDbEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFBO0lBQzNCLENBQUM7SUFFTSxPQUFPO1FBQ1osSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUM1QixDQUFDO0lBRU0sV0FBVyxDQUFFLFFBQXlCO1FBQzNDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDaEQsQ0FBQztJQUVNLFNBQVMsQ0FBRSxVQUFrQixFQUFFLElBQWtCO1FBQ3RELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBYSxDQUFBO1FBQzVELEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9DLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLEtBQUssVUFBVSxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNqRSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUN6QixDQUFDO1FBQ0gsQ0FBQztRQUNELEdBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDdkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFBO1FBQ3BDLENBQUM7UUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUE7SUFDdkMsQ0FBQztJQUVNLGdCQUFnQixDQUFFLFlBQW9CO1FBQzNDLE1BQU0sQ0FBQyxHQUFHLElBQUksbUJBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxDQUFBO1FBQzVELElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3ZCLE1BQU0sQ0FBQyxDQUFDLENBQUE7SUFDVixDQUFDO0lBRU0sT0FBTztRQUNaLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFBO0lBQy9CLENBQUM7SUFFRCxDQUFTLE1BQU0sQ0FBRSxDQUFnQztRQUMvQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQy9CLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQUMsTUFBTSxDQUFDLENBQUE7WUFBQyxDQUFDO1FBQ3ZCLENBQUM7SUFDSCxDQUFDO0lBRU0sT0FBTztRQUNaLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksS0FBSyxDQUFDLENBQUE7SUFDakMsQ0FBQztDQUNGO0FBckRELDhCQXFEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VFBvc2l0aW9uLCBUU2V2ZXJpdHksIElSZXN1bHRJdGVtLCBSZXN1bHRJdGVtfSBmcm9tICcuL3Jlc3VsdC1pdGVtJ1xuaW1wb3J0IHtDb21wb3NpdGVEaXNwb3NhYmxlLCBFbWl0dGVyfSBmcm9tICdhdG9tJ1xuaW1wb3J0IHtQcm92aWRlciwgVE1lc3NhZ2VQcm92aWRlckZ1bmN0aW9ufSBmcm9tICcuL3Byb3ZpZGVyJ1xuXG5leHBvcnQge1RQb3NpdGlvbiwgVFNldmVyaXR5LCBJUmVzdWx0SXRlbSwgVE1lc3NhZ2VQcm92aWRlckZ1bmN0aW9uLCBSZXN1bHRJdGVtfVxuXG5leHBvcnQgdHlwZSBUVXBkYXRlQ2FsbGJhY2sgPSAoYXJnOiBSZXN1bHRzREIpID0+IHZvaWRcblxuZXhwb3J0IGNsYXNzIFJlc3VsdHNEQiB7XG4gIHByaXZhdGUgY3VycmVudElkOiBudW1iZXJcbiAgcHJpdmF0ZSBtZXNzYWdlczogTWFwPHN0cmluZywgUmVzdWx0SXRlbT5cbiAgcHJpdmF0ZSBkaXNwb3NhYmxlczogQ29tcG9zaXRlRGlzcG9zYWJsZVxuICBwcml2YXRlIGVtaXR0ZXI6IEVtaXR0ZXJcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMuY3VycmVudElkID0gMFxuICAgIHRoaXMuZGlzcG9zYWJsZXMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG4gICAgdGhpcy5lbWl0dGVyID0gbmV3IEVtaXR0ZXIoKVxuICAgIHRoaXMuZGlzcG9zYWJsZXMuYWRkKHRoaXMuZW1pdHRlcilcbiAgICB0aGlzLm1lc3NhZ2VzID0gbmV3IE1hcCgpXG4gIH1cblxuICBwdWJsaWMgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5kaXNwb3NhYmxlcy5kaXNwb3NlKClcbiAgfVxuXG4gIHB1YmxpYyBvbkRpZFVwZGF0ZSAoY2FsbGJhY2s6IFRVcGRhdGVDYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIub24oJ2RpZC11cGRhdGUnLCBjYWxsYmFjaylcbiAgfVxuXG4gIHB1YmxpYyBkaWRVcGRhdGUgKHByb3ZpZGVySWQ6IG51bWJlciwgbXNnczogUmVzdWx0SXRlbVtdKSB7XG4gICAgY29uc3QgdXJpcyA9IG1zZ3MubWFwKHYgPT4gdi51cmkpLmZpbHRlcih2ID0+IHYpIGFzIHN0cmluZ1tdXG4gICAgZm9yIChjb25zdCBbaywgdl0gb2YgQXJyYXkuZnJvbSh0aGlzLm1lc3NhZ2VzKSkge1xuICAgICAgaWYgKHYucHJvdmlkZXJJZCA9PT0gcHJvdmlkZXJJZCB8fCB2LnVyaSAmJiB1cmlzLmluY2x1ZGVzKHYudXJpKSkge1xuICAgICAgICB0aGlzLm1lc3NhZ2VzLmRlbGV0ZShrKVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IG1zZyBvZiBtc2dzKSB7XG4gICAgICB0aGlzLm1lc3NhZ2VzLnNldChtc2cuaGFzaCgpLCBtc2cpXG4gICAgfVxuICAgIHRoaXMuZW1pdHRlci5lbWl0KCdkaWQtdXBkYXRlJywgdGhpcylcbiAgfVxuXG4gIHB1YmxpYyByZWdpc3RlclByb3ZpZGVyIChwcm92aWRlck5hbWU6IHN0cmluZykge1xuICAgIGNvbnN0IHAgPSBuZXcgUHJvdmlkZXIodGhpcywgKyt0aGlzLmN1cnJlbnRJZCwgcHJvdmlkZXJOYW1lKVxuICAgIHRoaXMuZGlzcG9zYWJsZXMuYWRkKHApXG4gICAgcmV0dXJuIHBcbiAgfVxuXG4gIHB1YmxpYyByZXN1bHRzICgpIHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlcy52YWx1ZXMoKVxuICB9XG5cbiAgcHVibGljICogZmlsdGVyIChmOiAoaXRlbTogUmVzdWx0SXRlbSkgPT4gYm9vbGVhbikge1xuICAgIGZvciAoY29uc3QgdiBvZiB0aGlzLnJlc3VsdHMoKSkge1xuICAgICAgaWYgKGYodikpIHsgeWllbGQgdiB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGlzRW1wdHkgKCkge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2VzLnNpemUgPT09IDBcbiAgfVxufVxuIl19