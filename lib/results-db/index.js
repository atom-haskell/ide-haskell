"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const result_item_1 = require("./result-item");
exports.ResultItem = result_item_1.ResultItem;
const atom_1 = require("atom");
class ResultsDB {
    constructor() {
        this._results = [];
        this.disposables = new atom_1.CompositeDisposable();
        this.disposables.add(this.emitter = new atom_1.Emitter());
    }
    destroy() {
        this.disposables.dispose();
    }
    onDidUpdate(callback) {
        return this.emitter.on('did-update', callback);
    }
    setResults(res, severityArr) {
        if (severityArr) {
            this._results =
                this._results.filter(({ severity }) => !(severityArr.includes(severity)))
                    .concat(res.map((i) => new result_item_1.ResultItem(this, i)));
        }
        else {
            this._results = res.map((i) => new result_item_1.ResultItem(this, i));
        }
        if (!severityArr) {
            severityArr = this.calcSeverityArr(res);
        }
        this.emitter.emit('did-update', { res: this, types: severityArr });
    }
    appendResults(res, severityArr) {
        this._results = this._results.concat(res.map((r) => new result_item_1.ResultItem(this, r)));
        if (!severityArr) {
            severityArr = this.calcSeverityArr(res);
        }
        this.emitter.emit('did-update', { res: this, types: severityArr });
    }
    removeResult(resItem) {
        this._results = this._results.filter((res) => res !== resItem);
        resItem.parent = null;
    }
    results() {
        return this._results;
    }
    filter(f) {
        return this._results.filter(f);
    }
    isEmpty() {
        return this._results.length === 0;
    }
    calcSeverityArr(res) {
        const severityArr = [];
        for (const { severity } of res) {
            if (!severityArr.includes(severity)) {
                severityArr.push(severity);
            }
        }
        return severityArr;
    }
}
exports.ResultsDB = ResultsDB;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcmVzdWx0cy1kYi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtDQUEyRTtBQUdoQyw4Q0FBVTtBQUZyRCwrQkFBaUQ7QUFPakQ7SUFJRTtRQUNFLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFBO1FBQ2xCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSwwQkFBbUIsRUFBRSxDQUFBO1FBQzVDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxjQUFPLEVBQUUsQ0FBQyxDQUFBO0lBQ3BELENBQUM7SUFFTSxPQUFPO1FBQ1osSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUM1QixDQUFDO0lBRU0sV0FBVyxDQUFFLFFBQXlCO1FBQzNDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDaEQsQ0FBQztJQUVNLFVBQVUsQ0FBRSxHQUFrQixFQUFFLFdBQXdCO1FBQzdELEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDaEIsSUFBSSxDQUFDLFFBQVE7Z0JBQ1gsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFDLFFBQVEsRUFBQyxLQUFLLENBQUMsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7cUJBQ3RFLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksd0JBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3BELENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLHdCQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDekQsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztZQUNqQixXQUFXLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUN6QyxDQUFDO1FBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLEVBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFDLENBQUMsQ0FBQTtJQUNsRSxDQUFDO0lBRU0sYUFBYSxDQUFFLEdBQWtCLEVBQUUsV0FBd0I7UUFDaEUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksd0JBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBRTdFLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztZQUNqQixXQUFXLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUN6QyxDQUFDO1FBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLEVBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFDLENBQUMsQ0FBQTtJQUNsRSxDQUFDO0lBRU0sWUFBWSxDQUFFLE9BQW1CO1FBQ3RDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEtBQUssR0FBRyxLQUFLLE9BQU8sQ0FBQyxDQUFBO1FBQzlELE9BQU8sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFBO0lBQ3ZCLENBQUM7SUFFTSxPQUFPO1FBQ1osTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUE7SUFDdEIsQ0FBQztJQUVNLE1BQU0sQ0FBRSxDQUFnQztRQUM3QyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDaEMsQ0FBQztJQUVNLE9BQU87UUFDWixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFBO0lBQ25DLENBQUM7SUFFTyxlQUFlLENBQUUsR0FBa0I7UUFDekMsTUFBTSxXQUFXLEdBQWdCLEVBQUUsQ0FBQTtRQUNuQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUMsUUFBUSxFQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQztZQUM3QixFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7WUFBQyxDQUFDO1FBQ3JFLENBQUM7UUFDRCxNQUFNLENBQUMsV0FBVyxDQUFBO0lBQ3BCLENBQUM7Q0FDRjtBQXBFRCw4QkFvRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1RQb3NpdGlvbiwgVFNldmVyaXR5LCBJUmVzdWx0SXRlbSwgUmVzdWx0SXRlbX0gZnJvbSAnLi9yZXN1bHQtaXRlbSdcbmltcG9ydCB7Q29tcG9zaXRlRGlzcG9zYWJsZSwgRW1pdHRlcn0gZnJvbSAnYXRvbSdcblxuZXhwb3J0IHtUUG9zaXRpb24sIFRTZXZlcml0eSwgSVJlc3VsdEl0ZW0sIFJlc3VsdEl0ZW19XG5cbmV4cG9ydCB0eXBlIFRVcGRhdGVDYWxsYmFja0FyZyA9IHtyZXM6IFJlc3VsdHNEQiwgdHlwZXM6IFRTZXZlcml0eVtdfVxuZXhwb3J0IHR5cGUgVFVwZGF0ZUNhbGxiYWNrID0gKGFyZzogVFVwZGF0ZUNhbGxiYWNrQXJnKSA9PiB2b2lkXG5cbmV4cG9ydCBjbGFzcyBSZXN1bHRzREIge1xuICBwcml2YXRlIF9yZXN1bHRzOiBSZXN1bHRJdGVtW11cbiAgcHJpdmF0ZSBkaXNwb3NhYmxlczogQ29tcG9zaXRlRGlzcG9zYWJsZVxuICBwcml2YXRlIGVtaXR0ZXI6IEVtaXR0ZXJcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMuX3Jlc3VsdHMgPSBbXVxuICAgIHRoaXMuZGlzcG9zYWJsZXMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG4gICAgdGhpcy5kaXNwb3NhYmxlcy5hZGQodGhpcy5lbWl0dGVyID0gbmV3IEVtaXR0ZXIoKSlcbiAgfVxuXG4gIHB1YmxpYyBkZXN0cm95ICgpIHtcbiAgICB0aGlzLmRpc3Bvc2FibGVzLmRpc3Bvc2UoKVxuICB9XG5cbiAgcHVibGljIG9uRGlkVXBkYXRlIChjYWxsYmFjazogVFVwZGF0ZUNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdHRlci5vbignZGlkLXVwZGF0ZScsIGNhbGxiYWNrKVxuICB9XG5cbiAgcHVibGljIHNldFJlc3VsdHMgKHJlczogSVJlc3VsdEl0ZW1bXSwgc2V2ZXJpdHlBcnI6IFRTZXZlcml0eVtdKSB7XG4gICAgaWYgKHNldmVyaXR5QXJyKSB7XG4gICAgICB0aGlzLl9yZXN1bHRzID1cbiAgICAgICAgdGhpcy5fcmVzdWx0cy5maWx0ZXIoKHtzZXZlcml0eX0pID0+ICEoc2V2ZXJpdHlBcnIuaW5jbHVkZXMoc2V2ZXJpdHkpKSlcbiAgICAgICAgLmNvbmNhdChyZXMubWFwKChpKSA9PiBuZXcgUmVzdWx0SXRlbSh0aGlzLCBpKSkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3Jlc3VsdHMgPSByZXMubWFwKChpKSA9PiBuZXcgUmVzdWx0SXRlbSh0aGlzLCBpKSlcbiAgICB9XG5cbiAgICBpZiAoIXNldmVyaXR5QXJyKSB7XG4gICAgICBzZXZlcml0eUFyciA9IHRoaXMuY2FsY1NldmVyaXR5QXJyKHJlcylcbiAgICB9XG5cbiAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnZGlkLXVwZGF0ZScsIHtyZXM6IHRoaXMsIHR5cGVzOiBzZXZlcml0eUFycn0pXG4gIH1cblxuICBwdWJsaWMgYXBwZW5kUmVzdWx0cyAocmVzOiBJUmVzdWx0SXRlbVtdLCBzZXZlcml0eUFycjogVFNldmVyaXR5W10pIHtcbiAgICB0aGlzLl9yZXN1bHRzID0gdGhpcy5fcmVzdWx0cy5jb25jYXQocmVzLm1hcCgocikgPT4gbmV3IFJlc3VsdEl0ZW0odGhpcywgcikpKVxuXG4gICAgaWYgKCFzZXZlcml0eUFycikge1xuICAgICAgc2V2ZXJpdHlBcnIgPSB0aGlzLmNhbGNTZXZlcml0eUFycihyZXMpXG4gICAgfVxuXG4gICAgdGhpcy5lbWl0dGVyLmVtaXQoJ2RpZC11cGRhdGUnLCB7cmVzOiB0aGlzLCB0eXBlczogc2V2ZXJpdHlBcnJ9KVxuICB9XG5cbiAgcHVibGljIHJlbW92ZVJlc3VsdCAocmVzSXRlbTogUmVzdWx0SXRlbSkge1xuICAgIHRoaXMuX3Jlc3VsdHMgPSB0aGlzLl9yZXN1bHRzLmZpbHRlcigocmVzKSA9PiByZXMgIT09IHJlc0l0ZW0pXG4gICAgcmVzSXRlbS5wYXJlbnQgPSBudWxsXG4gIH1cblxuICBwdWJsaWMgcmVzdWx0cyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jlc3VsdHNcbiAgfVxuXG4gIHB1YmxpYyBmaWx0ZXIgKGY6IChpdGVtOiBSZXN1bHRJdGVtKSA9PiBib29sZWFuKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jlc3VsdHMuZmlsdGVyKGYpXG4gIH1cblxuICBwdWJsaWMgaXNFbXB0eSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jlc3VsdHMubGVuZ3RoID09PSAwXG4gIH1cblxuICBwcml2YXRlIGNhbGNTZXZlcml0eUFyciAocmVzOiBJUmVzdWx0SXRlbVtdKSB7XG4gICAgY29uc3Qgc2V2ZXJpdHlBcnI6IFRTZXZlcml0eVtdID0gW11cbiAgICBmb3IgKGNvbnN0IHtzZXZlcml0eX0gb2YgcmVzKSB7XG4gICAgICBpZiAoIXNldmVyaXR5QXJyLmluY2x1ZGVzKHNldmVyaXR5KSkgeyBzZXZlcml0eUFyci5wdXNoKHNldmVyaXR5KSB9XG4gICAgfVxuICAgIHJldHVybiBzZXZlcml0eUFyclxuICB9XG59XG4iXX0=