"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const result_item_1 = require("./result-item");
exports.ResultItem = result_item_1.ResultItem;
const atom_1 = require("atom");
class ResultsDB {
    constructor() {
        this._results = [];
        this.disposables = new atom_1.CompositeDisposable();
        this.disposables.add(this.emitter = new atom_1.Emitter());
    }
    destroy() {
        this.disposables.dispose();
    }
    onDidUpdate(callback) {
        return this.emitter.on('did-update', callback);
    }
    setResults(res, severityArr) {
        if (severityArr) {
            const sa = severityArr;
            this._results =
                this._results.filter(({ severity }) => !(sa.includes(severity)))
                    .concat(res.map((i) => new result_item_1.ResultItem(this, i)));
        }
        else {
            this._results = res.map((i) => new result_item_1.ResultItem(this, i));
        }
        if (!severityArr) {
            severityArr = this.calcSeverityArr(res);
        }
        this.emitter.emit('did-update', { res: this, types: severityArr });
    }
    appendResults(res, severityArr) {
        this._results = this._results.concat(res.map((r) => new result_item_1.ResultItem(this, r)));
        if (!severityArr) {
            severityArr = this.calcSeverityArr(res);
        }
        this.emitter.emit('did-update', { res: this, types: severityArr });
    }
    removeResult(resItem) {
        this._results = this._results.filter((res) => res !== resItem);
        resItem.parent = null;
    }
    results() {
        return this._results;
    }
    filter(f) {
        return this._results.filter(f);
    }
    isEmpty() {
        return this._results.length === 0;
    }
    calcSeverityArr(res) {
        const severityArr = [];
        for (const { severity } of res) {
            if (!severityArr.includes(severity)) {
                severityArr.push(severity);
            }
        }
        return severityArr;
    }
}
exports.ResultsDB = ResultsDB;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcmVzdWx0cy1kYi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtDQUEyRTtBQUdoQyw4Q0FBVTtBQUZyRCwrQkFBaUQ7QUFPakQ7SUFJRTtRQUNFLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFBO1FBQ2xCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSwwQkFBbUIsRUFBRSxDQUFBO1FBQzVDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxjQUFPLEVBQUUsQ0FBQyxDQUFBO0lBQ3BELENBQUM7SUFFTSxPQUFPO1FBQ1osSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUM1QixDQUFDO0lBRU0sV0FBVyxDQUFFLFFBQXlCO1FBQzNDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDaEQsQ0FBQztJQUVNLFVBQVUsQ0FBRSxHQUFrQixFQUFFLFdBQXlCO1FBQzlELEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDaEIsTUFBTSxFQUFFLEdBQUcsV0FBVyxDQUFBO1lBQ3RCLElBQUksQ0FBQyxRQUFRO2dCQUNYLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBQyxRQUFRLEVBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO3FCQUM3RCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLHdCQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNwRCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSx3QkFBVSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3pELENBQUM7UUFFRCxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDakIsV0FBVyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDekMsQ0FBQztRQUVELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxFQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBQyxDQUFDLENBQUE7SUFDbEUsQ0FBQztJQUVNLGFBQWEsQ0FBRSxHQUFrQixFQUFFLFdBQXlCO1FBQ2pFLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLHdCQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUU3RSxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDakIsV0FBVyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDekMsQ0FBQztRQUVELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxFQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBQyxDQUFDLENBQUE7SUFDbEUsQ0FBQztJQUVNLFlBQVksQ0FBRSxPQUFtQjtRQUN0QyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxLQUFLLEdBQUcsS0FBSyxPQUFPLENBQUMsQ0FBQTtRQUM5RCxPQUFPLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQTtJQUN2QixDQUFDO0lBRU0sT0FBTztRQUNaLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFBO0lBQ3RCLENBQUM7SUFFTSxNQUFNLENBQUUsQ0FBZ0M7UUFDN0MsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ2hDLENBQUM7SUFFTSxPQUFPO1FBQ1osTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQTtJQUNuQyxDQUFDO0lBRU8sZUFBZSxDQUFFLEdBQWtCO1FBQ3pDLE1BQU0sV0FBVyxHQUFnQixFQUFFLENBQUE7UUFDbkMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFDLFFBQVEsRUFBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDN0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1lBQUMsQ0FBQztRQUNyRSxDQUFDO1FBQ0QsTUFBTSxDQUFDLFdBQVcsQ0FBQTtJQUNwQixDQUFDO0NBQ0Y7QUFyRUQsOEJBcUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUUG9zaXRpb24sIFRTZXZlcml0eSwgSVJlc3VsdEl0ZW0sIFJlc3VsdEl0ZW19IGZyb20gJy4vcmVzdWx0LWl0ZW0nXG5pbXBvcnQge0NvbXBvc2l0ZURpc3Bvc2FibGUsIEVtaXR0ZXJ9IGZyb20gJ2F0b20nXG5cbmV4cG9ydCB7VFBvc2l0aW9uLCBUU2V2ZXJpdHksIElSZXN1bHRJdGVtLCBSZXN1bHRJdGVtfVxuXG5leHBvcnQgdHlwZSBUVXBkYXRlQ2FsbGJhY2tBcmcgPSB7cmVzOiBSZXN1bHRzREIsIHR5cGVzOiBUU2V2ZXJpdHlbXX1cbmV4cG9ydCB0eXBlIFRVcGRhdGVDYWxsYmFjayA9IChhcmc6IFRVcGRhdGVDYWxsYmFja0FyZykgPT4gdm9pZFxuXG5leHBvcnQgY2xhc3MgUmVzdWx0c0RCIHtcbiAgcHJpdmF0ZSBfcmVzdWx0czogUmVzdWx0SXRlbVtdXG4gIHByaXZhdGUgZGlzcG9zYWJsZXM6IENvbXBvc2l0ZURpc3Bvc2FibGVcbiAgcHJpdmF0ZSBlbWl0dGVyOiBFbWl0dGVyXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLl9yZXN1bHRzID0gW11cbiAgICB0aGlzLmRpc3Bvc2FibGVzID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuICAgIHRoaXMuZGlzcG9zYWJsZXMuYWRkKHRoaXMuZW1pdHRlciA9IG5ldyBFbWl0dGVyKCkpXG4gIH1cblxuICBwdWJsaWMgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5kaXNwb3NhYmxlcy5kaXNwb3NlKClcbiAgfVxuXG4gIHB1YmxpYyBvbkRpZFVwZGF0ZSAoY2FsbGJhY2s6IFRVcGRhdGVDYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIub24oJ2RpZC11cGRhdGUnLCBjYWxsYmFjaylcbiAgfVxuXG4gIHB1YmxpYyBzZXRSZXN1bHRzIChyZXM6IElSZXN1bHRJdGVtW10sIHNldmVyaXR5QXJyPzogVFNldmVyaXR5W10pIHtcbiAgICBpZiAoc2V2ZXJpdHlBcnIpIHtcbiAgICAgIGNvbnN0IHNhID0gc2V2ZXJpdHlBcnJcbiAgICAgIHRoaXMuX3Jlc3VsdHMgPVxuICAgICAgICB0aGlzLl9yZXN1bHRzLmZpbHRlcigoe3NldmVyaXR5fSkgPT4gIShzYS5pbmNsdWRlcyhzZXZlcml0eSkpKVxuICAgICAgICAuY29uY2F0KHJlcy5tYXAoKGkpID0+IG5ldyBSZXN1bHRJdGVtKHRoaXMsIGkpKSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcmVzdWx0cyA9IHJlcy5tYXAoKGkpID0+IG5ldyBSZXN1bHRJdGVtKHRoaXMsIGkpKVxuICAgIH1cblxuICAgIGlmICghc2V2ZXJpdHlBcnIpIHtcbiAgICAgIHNldmVyaXR5QXJyID0gdGhpcy5jYWxjU2V2ZXJpdHlBcnIocmVzKVxuICAgIH1cblxuICAgIHRoaXMuZW1pdHRlci5lbWl0KCdkaWQtdXBkYXRlJywge3JlczogdGhpcywgdHlwZXM6IHNldmVyaXR5QXJyfSlcbiAgfVxuXG4gIHB1YmxpYyBhcHBlbmRSZXN1bHRzIChyZXM6IElSZXN1bHRJdGVtW10sIHNldmVyaXR5QXJyPzogVFNldmVyaXR5W10pIHtcbiAgICB0aGlzLl9yZXN1bHRzID0gdGhpcy5fcmVzdWx0cy5jb25jYXQocmVzLm1hcCgocikgPT4gbmV3IFJlc3VsdEl0ZW0odGhpcywgcikpKVxuXG4gICAgaWYgKCFzZXZlcml0eUFycikge1xuICAgICAgc2V2ZXJpdHlBcnIgPSB0aGlzLmNhbGNTZXZlcml0eUFycihyZXMpXG4gICAgfVxuXG4gICAgdGhpcy5lbWl0dGVyLmVtaXQoJ2RpZC11cGRhdGUnLCB7cmVzOiB0aGlzLCB0eXBlczogc2V2ZXJpdHlBcnJ9KVxuICB9XG5cbiAgcHVibGljIHJlbW92ZVJlc3VsdCAocmVzSXRlbTogUmVzdWx0SXRlbSkge1xuICAgIHRoaXMuX3Jlc3VsdHMgPSB0aGlzLl9yZXN1bHRzLmZpbHRlcigocmVzKSA9PiByZXMgIT09IHJlc0l0ZW0pXG4gICAgcmVzSXRlbS5wYXJlbnQgPSBudWxsXG4gIH1cblxuICBwdWJsaWMgcmVzdWx0cyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jlc3VsdHNcbiAgfVxuXG4gIHB1YmxpYyBmaWx0ZXIgKGY6IChpdGVtOiBSZXN1bHRJdGVtKSA9PiBib29sZWFuKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jlc3VsdHMuZmlsdGVyKGYpXG4gIH1cblxuICBwdWJsaWMgaXNFbXB0eSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jlc3VsdHMubGVuZ3RoID09PSAwXG4gIH1cblxuICBwcml2YXRlIGNhbGNTZXZlcml0eUFyciAocmVzOiBJUmVzdWx0SXRlbVtdKSB7XG4gICAgY29uc3Qgc2V2ZXJpdHlBcnI6IFRTZXZlcml0eVtdID0gW11cbiAgICBmb3IgKGNvbnN0IHtzZXZlcml0eX0gb2YgcmVzKSB7XG4gICAgICBpZiAoIXNldmVyaXR5QXJyLmluY2x1ZGVzKHNldmVyaXR5KSkgeyBzZXZlcml0eUFyci5wdXNoKHNldmVyaXR5KSB9XG4gICAgfVxuICAgIHJldHVybiBzZXZlcml0eUFyclxuICB9XG59XG4iXX0=