'use babel';
Object.defineProperty(exports, "__esModule", { value: true });
const result_item_1 = require("./result-item");
const atom_1 = require("atom");
class ResultsDB {
    constructor() {
        this.results = [];
        this.disposables = new atom_1.CompositeDisposable();
        this.disposables.add(this.emitter = new atom_1.Emitter());
    }
    destroy() {
        this.disposables.dispose();
        this.disposables = null;
        this.emitter = null;
    }
    onDidUpdate(callback) {
        return this.emitter.on('did-update', callback);
    }
    setResults(res, severityArr) {
        if (severityArr) {
            this.results =
                this.results.filter(({ severity }) => !(severityArr.includes(severity)))
                    .concat(res.map((i) => new result_item_1.default(this, i)));
        }
        else {
            this.results = res.map((i) => new result_item_1.default(this, i));
        }
        if (!severityArr) {
            severityArr = this.calcSeverityArr(res);
        }
        this.emitter.emit('did-update', { res: this, types: severityArr });
    }
    appendResults(res, severityArr) {
        this.results = this.results.concat(res.map((r) => new result_item_1.default(this, r)));
        if (!severityArr) {
            severityArr = this.calcSeverityArr(res);
        }
        this.emitter.emit('did-update', { res: this, types: severityArr });
    }
    calcSeverityArr(res) {
        let severityArr = [];
        for (let { severity } of res) {
            if (!severityArr.includes(severity)) {
                severityArr.push(severity);
            }
        }
        return severityArr;
    }
    removeResult(resItem) {
        this.results = this.results.filter((res) => res !== resItem);
        resItem.parent = null;
    }
    resultsWithURI() {
        return this.results.filter(({ uri }) => uri);
    }
    filter(template) {
        return this.results.filter((item) => {
            let b = true;
            for (let k of Object.keys(template)) {
                b = b && (item[k] === template[k]);
            }
            return b;
        });
    }
    isEmpty() {
        return this.results.length === 0;
    }
}
exports.default = ResultsDB;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcmVzdWx0cy1kYi9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUE7O0FBRVgsK0NBQXNDO0FBQ3RDLCtCQUFpRDtBQUVqRDtJQUNFO1FBQ0UsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUE7UUFDakIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLDBCQUFtQixFQUFFLENBQUE7UUFDNUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLGNBQU8sRUFBRSxDQUFDLENBQUE7SUFDcEQsQ0FBQztJQUVELE9BQU87UUFDTCxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQzFCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFBO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFBO0lBQ3JCLENBQUM7SUFFRCxXQUFXLENBQUUsUUFBUTtRQUNuQixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBQ2hELENBQUM7SUFFRCxVQUFVLENBQUUsR0FBRyxFQUFFLFdBQVc7UUFDMUIsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztZQUNoQixJQUFJLENBQUMsT0FBTztnQkFDVixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsUUFBUSxFQUFDLEtBQUssQ0FBQyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztxQkFDckUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxxQkFBVSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDcEQsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sSUFBSSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUkscUJBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUN4RCxDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQ2pCLFdBQVcsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3pDLENBQUM7UUFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsRUFBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUMsQ0FBQyxDQUFBO0lBQ2xFLENBQUM7SUFFRCxhQUFhLENBQUUsR0FBRyxFQUFFLFdBQVc7UUFDN0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUkscUJBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBRTNFLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztZQUNqQixXQUFXLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUN6QyxDQUFDO1FBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLEVBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFDLENBQUMsQ0FBQTtJQUNsRSxDQUFDO0lBRUQsZUFBZSxDQUFFLEdBQUc7UUFDbEIsSUFBSSxXQUFXLEdBQUcsRUFBRSxDQUFBO1FBQ3BCLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBQyxRQUFRLEVBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzNCLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtZQUFDLENBQUM7UUFDckUsQ0FBQztRQUNELE1BQU0sQ0FBQyxXQUFXLENBQUE7SUFDcEIsQ0FBQztJQUVELFlBQVksQ0FBRSxPQUFPO1FBQ25CLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEtBQUssR0FBRyxLQUFLLE9BQU8sQ0FBQyxDQUFBO1FBQzVELE9BQU8sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFBO0lBQ3ZCLENBQUM7SUFFRCxjQUFjO1FBQ1osTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBQyxHQUFHLEVBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQTtJQUM1QyxDQUFDO0lBRUQsTUFBTSxDQUFFLFFBQVE7UUFDZCxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJO1lBQzlCLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQTtZQUNaLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFBQyxDQUFDO1lBQzNFLE1BQU0sQ0FBQyxDQUFDLENBQUE7UUFDVixDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFFRCxPQUFPO1FBQ0wsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQTtJQUNsQyxDQUFDO0NBQ0Y7QUF2RUQsNEJBdUVDIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCdcblxuaW1wb3J0IFJlc3VsdEl0ZW0gZnJvbSAnLi9yZXN1bHQtaXRlbSdcbmltcG9ydCB7Q29tcG9zaXRlRGlzcG9zYWJsZSwgRW1pdHRlcn0gZnJvbSAnYXRvbSdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVzdWx0c0RCIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMucmVzdWx0cyA9IFtdXG4gICAgdGhpcy5kaXNwb3NhYmxlcyA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKClcbiAgICB0aGlzLmRpc3Bvc2FibGVzLmFkZCh0aGlzLmVtaXR0ZXIgPSBuZXcgRW1pdHRlcigpKVxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5kaXNwb3NhYmxlcy5kaXNwb3NlKClcbiAgICB0aGlzLmRpc3Bvc2FibGVzID0gbnVsbFxuICAgIHRoaXMuZW1pdHRlciA9IG51bGxcbiAgfVxuXG4gIG9uRGlkVXBkYXRlIChjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIub24oJ2RpZC11cGRhdGUnLCBjYWxsYmFjaylcbiAgfVxuXG4gIHNldFJlc3VsdHMgKHJlcywgc2V2ZXJpdHlBcnIpIHtcbiAgICBpZiAoc2V2ZXJpdHlBcnIpIHtcbiAgICAgIHRoaXMucmVzdWx0cyA9XG4gICAgICAgIHRoaXMucmVzdWx0cy5maWx0ZXIoKHtzZXZlcml0eX0pID0+ICEoc2V2ZXJpdHlBcnIuaW5jbHVkZXMoc2V2ZXJpdHkpKSlcbiAgICAgICAgLmNvbmNhdChyZXMubWFwKChpKSA9PiBuZXcgUmVzdWx0SXRlbSh0aGlzLCBpKSkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVzdWx0cyA9IHJlcy5tYXAoKGkpID0+IG5ldyBSZXN1bHRJdGVtKHRoaXMsIGkpKVxuICAgIH1cblxuICAgIGlmICghc2V2ZXJpdHlBcnIpIHtcbiAgICAgIHNldmVyaXR5QXJyID0gdGhpcy5jYWxjU2V2ZXJpdHlBcnIocmVzKVxuICAgIH1cblxuICAgIHRoaXMuZW1pdHRlci5lbWl0KCdkaWQtdXBkYXRlJywge3JlczogdGhpcywgdHlwZXM6IHNldmVyaXR5QXJyfSlcbiAgfVxuXG4gIGFwcGVuZFJlc3VsdHMgKHJlcywgc2V2ZXJpdHlBcnIpIHtcbiAgICB0aGlzLnJlc3VsdHMgPSB0aGlzLnJlc3VsdHMuY29uY2F0KHJlcy5tYXAoKHIpID0+IG5ldyBSZXN1bHRJdGVtKHRoaXMsIHIpKSlcblxuICAgIGlmICghc2V2ZXJpdHlBcnIpIHtcbiAgICAgIHNldmVyaXR5QXJyID0gdGhpcy5jYWxjU2V2ZXJpdHlBcnIocmVzKVxuICAgIH1cblxuICAgIHRoaXMuZW1pdHRlci5lbWl0KCdkaWQtdXBkYXRlJywge3JlczogdGhpcywgdHlwZXM6IHNldmVyaXR5QXJyfSlcbiAgfVxuXG4gIGNhbGNTZXZlcml0eUFyciAocmVzKSB7XG4gICAgbGV0IHNldmVyaXR5QXJyID0gW11cbiAgICBmb3IgKGxldCB7c2V2ZXJpdHl9IG9mIHJlcykge1xuICAgICAgaWYgKCFzZXZlcml0eUFyci5pbmNsdWRlcyhzZXZlcml0eSkpIHsgc2V2ZXJpdHlBcnIucHVzaChzZXZlcml0eSkgfVxuICAgIH1cbiAgICByZXR1cm4gc2V2ZXJpdHlBcnJcbiAgfVxuXG4gIHJlbW92ZVJlc3VsdCAocmVzSXRlbSkge1xuICAgIHRoaXMucmVzdWx0cyA9IHRoaXMucmVzdWx0cy5maWx0ZXIoKHJlcykgPT4gcmVzICE9PSByZXNJdGVtKVxuICAgIHJlc0l0ZW0ucGFyZW50ID0gbnVsbFxuICB9XG5cbiAgcmVzdWx0c1dpdGhVUkkgKCkge1xuICAgIHJldHVybiB0aGlzLnJlc3VsdHMuZmlsdGVyKCh7dXJpfSkgPT4gdXJpKVxuICB9XG5cbiAgZmlsdGVyICh0ZW1wbGF0ZSkge1xuICAgIHJldHVybiB0aGlzLnJlc3VsdHMuZmlsdGVyKChpdGVtKSA9PiB7XG4gICAgICBsZXQgYiA9IHRydWVcbiAgICAgIGZvciAobGV0IGsgb2YgT2JqZWN0LmtleXModGVtcGxhdGUpKSB7IGIgPSBiICYmIChpdGVtW2tdID09PSB0ZW1wbGF0ZVtrXSkgfVxuICAgICAgcmV0dXJuIGJcbiAgICB9KVxuICB9XG5cbiAgaXNFbXB0eSAoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdWx0cy5sZW5ndGggPT09IDBcbiAgfVxufVxuIl19