"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const instance_1 = require("./instance");
const error_1 = require("./error");
exports.UPIError = error_1.UPIError;
class UPI {
    constructor(pluginManager) {
        this.pluginManager = pluginManager;
        this.instances = new Map();
        this.disposables = new atom_1.CompositeDisposable();
    }
    consume(options) {
        const { name, menu, messageTypes, events, controls, params, consumer, tooltipEvent } = options;
        if (!name) {
            throw new error_1.UPIError('name has to be specified for UPI');
        }
        if (this.instances.has(name)) {
            throw new error_1.UPIError(`Plugin ${name} already registered with UPI`);
        }
        const instance = new instance_1.UPIInstance(this.pluginManager, name);
        this.instances.set(name, instance);
        const disp = new atom_1.CompositeDisposable();
        if (menu) {
            disp.add(instance.menu.set(menu));
        }
        if (messageTypes) {
            instance.messages.setTypes(messageTypes);
        }
        if (events) {
            for (const k in events) {
                if (instance.events[k]) {
                    let v = events[k];
                    if (!Array.isArray(v)) {
                        v = [v];
                    }
                    for (const i of v) {
                        disp.add(instance.events[k](i));
                    }
                }
            }
        }
        if (tooltipEvent) {
            let handler, priority;
            if (typeof tooltipEvent === 'function') {
                handler = tooltipEvent;
                priority = 100;
            }
            else {
                ({ handler, priority } = tooltipEvent);
            }
            if (!priority) {
                priority = 100;
            }
            disp.add(instance.tooltips.onShouldShowTooltip(priority, handler));
        }
        if (controls) {
            for (const i of controls) {
                disp.add(instance.controls.add(i));
            }
        }
        if (params) {
            disp.add(instance.params.add(params));
        }
        if (consumer) {
            const d = consumer(instance);
            if (typeof d === 'object') {
                disp.add(d);
            }
        }
        disp.add(new atom_1.Disposable(() => {
            this.instances.delete(name);
            instance.destroy();
        }));
        this.disposables.add(disp);
        return disp;
    }
    dispose() {
        this.disposables.dispose();
    }
}
exports.UPI = UPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXBpLTAuMy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUFnRTtBQUVoRSx5Q0FBc0M7QUFDdEMsbUNBQWdDO0FBQ3hCLG9DQUFRO0FBa0NoQjtJQUdFLFlBQXFCLGFBQTRCO1FBQTVCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQy9DLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQTtRQUMxQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksMEJBQW1CLEVBQUUsQ0FBQTtJQUM5QyxDQUFDO0lBU00sT0FBTyxDQUFFLE9BQTZCO1FBQzNDLE1BQU0sRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFDLEdBQUcsT0FBTyxDQUFBO1FBQzVGLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNWLE1BQU0sSUFBSSxnQkFBUSxDQUFDLGtDQUFrQyxDQUFDLENBQUE7UUFDeEQsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3QixNQUFNLElBQUksZ0JBQVEsQ0FBQyxVQUFVLElBQUksOEJBQThCLENBQUMsQ0FBQTtRQUNsRSxDQUFDO1FBQ0QsTUFBTSxRQUFRLEdBQUcsSUFBSSxzQkFBVyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDMUQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBQ2xDLE1BQU0sSUFBSSxHQUFHLElBQUksMEJBQW1CLEVBQUUsQ0FBQTtRQUV0QyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FB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TyxFQUFFLENBQUE7UUFDcEIsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNILElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQzFCLE1BQU0sQ0FBQyxJQUFJLENBQUE7SUFDYixDQUFDO0lBRU0sT0FBTztRQUNaLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDNUIsQ0FBQztDQUNGO0FBbEZELGtCQWtGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9zaXRlRGlzcG9zYWJsZSwgRGlzcG9zYWJsZSwgVGV4dEVkaXRvcn0gZnJvbSAnYXRvbSdcbmltcG9ydCB7UGx1Z2luTWFuYWdlcn0gZnJvbSAnLi4vcGx1Z2luLW1hbmFnZXInXG5pbXBvcnQge1VQSUluc3RhbmNlfSBmcm9tICcuL2luc3RhbmNlJ1xuaW1wb3J0IHtVUElFcnJvcn0gZnJvbSAnLi9lcnJvcidcbmV4cG9ydCB7VVBJRXJyb3J9XG5cbmltcG9ydCB7VFBvc2l0aW9ufSBmcm9tICcuLi9yZXN1bHRzLWRiJ1xuaW1wb3J0IHtURXZlbnRSYW5nZVR5cGV9IGZyb20gJy4uL2VkaXRvci1jb250cm9sL3Rvb2x0aXAtbWFuYWdlcidcbmltcG9ydCB7SU1lbnVEZWZpbml0aW9ufSBmcm9tICcuL2luc3RhbmNlL21lbnUnXG5pbXBvcnQge0lTZXRUeXBlc1BhcmFtc30gZnJvbSAnLi4vb3V0cHV0LXBhbmVsJ1xuaW1wb3J0IHtUZXh0QnVmZmVyQ2FsbGJhY2t9IGZyb20gJy4vaW5zdGFuY2UvZXZlbnRzJ1xuaW1wb3J0IHtUVVBJQ29udHJvbERlZmluaXRpb259IGZyb20gJy4vaW5zdGFuY2UvY29udHJvbHMnXG5pbXBvcnQge0lQYXJhbVNwZWN9IGZyb20gJy4uL2NvbmZpZy1wYXJhbXMnXG5pbXBvcnQge1RUb29sdGlwSGFuZGxlcn0gZnJvbSAnLi9pbnN0YW5jZS90b29sdGlwcydcblxuZXhwb3J0IGludGVyZmFjZSBJUmVnaXN0cmF0aW9uT3B0aW9ucyB7XG4gIG5hbWU6IHN0cmluZ1xuICBjb25zdW1lcj86IChpbnN0YW5jZTogVVBJSW5zdGFuY2UpID0+IERpc3Bvc2FibGUgfCB2b2lkXG4gIG1lbnU/OiBJTWVudURlZmluaXRpb25cbiAgbWVzc2FnZVR5cGVzPzogSVNldFR5cGVzUGFyYW1zXG4gIGV2ZW50cz86IHtcbiAgICBvbldpbGxTYXZlQnVmZmVyPzogVGV4dEJ1ZmZlckNhbGxiYWNrIHwgVGV4dEJ1ZmZlckNhbGxiYWNrW11cbiAgICBvbkRpZFNhdmVCdWZmZXI/OiBUZXh0QnVmZmVyQ2FsbGJhY2sgfCBUZXh0QnVmZmVyQ2FsbGJhY2tbXVxuICAgIG9uRGlkU3RvcENoYW5naW5nPzogVGV4dEJ1ZmZlckNhbGxiYWNrIHwgVGV4dEJ1ZmZlckNhbGxiYWNrW11cbiAgfVxuICBjb250cm9scz86IFRVUElDb250cm9sRGVmaW5pdGlvbltdXG4gIHBhcmFtcz86IHtbcGFyYW1OYW1lOiBzdHJpbmddOiBJUGFyYW1TcGVjPGFueT59XG4gIHRvb2x0aXBFdmVudD86IFRUb29sdGlwSGFuZGxlciB8IHtwcmlvcml0eT86IG51bWJlciwgaGFuZGxlcjogVFRvb2x0aXBIYW5kbGVyfVxufVxuXG5pbnRlcmZhY2UgSUV2ZW50UmFuZ2VQYXJhbXNJbnRlcm5hbCB7XG4gIGVkaXRvcj86IFRleHRFZGl0b3JcbiAgY29udHJvbGxlcjogYW55XG4gIGRldGFpbD86IGFueVxuICBldmVudFR5cGU/OiBURXZlbnRSYW5nZVR5cGVcbiAgcG9zOiBUUG9zaXRpb25cbn1cblxuZXhwb3J0IGNsYXNzIFVQSSB7XG4gIHByaXZhdGUgaW5zdGFuY2VzOiBNYXA8c3RyaW5nLCBVUElJbnN0YW5jZT5cbiAgcHJpdmF0ZSBkaXNwb3NhYmxlczogQ29tcG9zaXRlRGlzcG9zYWJsZVxuICBjb25zdHJ1Y3RvciAocHJpdmF0ZSBwbHVnaW5NYW5hZ2VyOiBQbHVnaW5NYW5hZ2VyKSB7XG4gICAgdGhpcy5pbnN0YW5jZXMgPSBuZXcgTWFwKClcbiAgICB0aGlzLmRpc3Bvc2FibGVzID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuICB9XG5cbiAgLyoqXG4gIENhbGwgdGhpcyBmdW5jdGlvbiBpbiBjb25zdW1lciB0byBnZXQgYWN0dWFsIGludGVyZmFjZVxuXG4gIEBwYXJhbSBuYW1lOiBQbHVnaW4gcGFja2FnZSBuYW1lXG4gIEBwYXJhbSBjb25zdW1lcjogY2FsbGJhY2sgOjogVVBJSW5zdGFuY2UgLT4gKClcbiAgQHJldHVybnMge0Rpc3Bvc2FibGV9XG4gICovXG4gIHB1YmxpYyBjb25zdW1lIChvcHRpb25zOiBJUmVnaXN0cmF0aW9uT3B0aW9ucyk6IERpc3Bvc2FibGUge1xuICAgIGNvbnN0IHtuYW1lLCBtZW51LCBtZXNzYWdlVHlwZXMsIGV2ZW50cywgY29udHJvbHMsIHBhcmFtcywgY29uc3VtZXIsIHRvb2x0aXBFdmVudH0gPSBvcHRpb25zXG4gICAgaWYgKCFuYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgVVBJRXJyb3IoJ25hbWUgaGFzIHRvIGJlIHNwZWNpZmllZCBmb3IgVVBJJylcbiAgICB9XG4gICAgaWYgKHRoaXMuaW5zdGFuY2VzLmhhcyhuYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IFVQSUVycm9yKGBQbHVnaW4gJHtuYW1lfSBhbHJlYWR5IHJlZ2lzdGVyZWQgd2l0aCBVUElgKVxuICAgIH1cbiAgICBjb25zdCBpbnN0YW5jZSA9IG5ldyBVUElJbnN0YW5jZSh0aGlzLnBsdWdpbk1hbmFnZXIsIG5hbWUpXG4gICAgdGhpcy5pbnN0YW5jZXMuc2V0KG5hbWUsIGluc3RhbmNlKVxuICAgIGNvbnN0IGRpc3AgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG5cbiAgICBpZiAobWVudSkge1xuICAgICAgZGlzcC5hZGQoaW5zdGFuY2UubWVudS5zZXQobWVudSkpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlVHlwZXMpIHtcbiAgICAgIGluc3RhbmNlLm1lc3NhZ2VzLnNldFR5cGVzKG1lc3NhZ2VUeXBlcykgLy8gVE9ETzogTWFrZSBkaXNwb3NhYmxlXG4gICAgfVxuICAgIGlmIChldmVudHMpIHtcbiAgICAgIGZvciAoY29uc3QgayBpbiBldmVudHMpIHtcbiAgICAgICAgaWYgKGluc3RhbmNlLmV2ZW50c1trXSkge1xuICAgICAgICAgIGxldCB2OiBUZXh0QnVmZmVyQ2FsbGJhY2sgfCBUZXh0QnVmZmVyQ2FsbGJhY2tbXSA9IGV2ZW50c1trXVxuICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2KSkgeyB2ID0gW3ZdIH1cbiAgICAgICAgICBmb3IgKGNvbnN0IGkgb2Ygdikge1xuICAgICAgICAgICAgZGlzcC5hZGQoaW5zdGFuY2UuZXZlbnRzW2tdKGkpKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAodG9vbHRpcEV2ZW50KSB7XG4gICAgICBsZXQgaGFuZGxlcjogVFRvb2x0aXBIYW5kbGVyLCBwcmlvcml0eTogbnVtYmVyIHwgdW5kZWZpbmVkXG4gICAgICBpZiAodHlwZW9mIHRvb2x0aXBFdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBoYW5kbGVyID0gdG9vbHRpcEV2ZW50XG4gICAgICAgIHByaW9yaXR5ID0gMTAwXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAoe2hhbmRsZXIsIHByaW9yaXR5fSA9IHRvb2x0aXBFdmVudClcbiAgICAgIH1cbiAgICAgIGlmICghcHJpb3JpdHkpIHsgcHJpb3JpdHkgPSAxMDAgfVxuICAgICAgZGlzcC5hZGQoaW5zdGFuY2UudG9vbHRpcHMub25TaG91bGRTaG93VG9vbHRpcChwcmlvcml0eSwgaGFuZGxlcikpXG4gICAgfVxuICAgIGlmIChjb250cm9scykge1xuICAgICAgZm9yIChjb25zdCBpIG9mIGNvbnRyb2xzKSB7XG4gICAgICAgIGRpc3AuYWRkKGluc3RhbmNlLmNvbnRyb2xzLmFkZChpKSlcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBhcmFtcykge1xuICAgICAgZGlzcC5hZGQoaW5zdGFuY2UucGFyYW1zLmFkZChwYXJhbXMpKVxuICAgIH1cblxuICAgIGlmIChjb25zdW1lcikge1xuICAgICAgY29uc3QgZCA9IGNvbnN1bWVyKGluc3RhbmNlKVxuICAgICAgaWYgKHR5cGVvZiBkID09PSAnb2JqZWN0Jykge1xuICAgICAgICBkaXNwLmFkZChkKVxuICAgICAgfVxuICAgIH1cblxuICAgIGRpc3AuYWRkKG5ldyBEaXNwb3NhYmxlKCgpID0+IHtcbiAgICAgIHRoaXMuaW5zdGFuY2VzLmRlbGV0ZShuYW1lKVxuICAgICAgaW5zdGFuY2UuZGVzdHJveSgpXG4gICAgfSkpXG4gICAgdGhpcy5kaXNwb3NhYmxlcy5hZGQoZGlzcClcbiAgICByZXR1cm4gZGlzcFxuICB9XG5cbiAgcHVibGljIGRpc3Bvc2UgKCkge1xuICAgIHRoaXMuZGlzcG9zYWJsZXMuZGlzcG9zZSgpXG4gIH1cbn1cbiJdfQ==