"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const utils_1 = require("../utils");
const instance_1 = require("./instance");
const error_1 = require("./error");
exports.UPIError = error_1.UPIError;
class UPI {
    constructor(pluginManager) {
        this.pluginManager = pluginManager;
        this.instances = new Map();
        this.disposables = new atom_1.CompositeDisposable();
        this.disposables.add(this.pluginManager.onShouldShowTooltip(this.shouldShowTooltip.bind(this)));
    }
    consume(options) {
        const { name, menu, messageTypes, events, controls, params, consumer, tooltipEvent } = options;
        if (!name) {
            throw new error_1.UPIError('name has to be specified for UPI');
        }
        if (this.instances.has(name)) {
            throw new error_1.UPIError(`Plugin ${name} already registered with UPI`);
        }
        const instance = new instance_1.UPIInstance(this.pluginManager, name, this);
        this.instances.set(name, instance);
        const disp = new atom_1.CompositeDisposable();
        if (menu) {
            disp.add(instance.menu.set(menu));
        }
        if (messageTypes) {
            instance.messages.setTypes(messageTypes);
        }
        if (events) {
            for (const k in events) {
                if (instance.events[k]) {
                    let v = events[k];
                    if (!Array.isArray(v)) {
                        v = [v];
                    }
                    for (const i of v) {
                        disp.add(instance.events[k](i));
                    }
                }
            }
        }
        if (tooltipEvent) {
            let handler, priority;
            if (typeof tooltipEvent === 'function') {
                handler = tooltipEvent;
                priority = 100;
            }
            else {
                ({ handler, priority } = tooltipEvent);
            }
            if (!priority) {
                priority = 100;
            }
            disp.add(instance.tooltips.onShouldShowTooltip(priority, handler));
        }
        if (controls) {
            for (const i of controls) {
                disp.add(instance.controls.add(i));
            }
        }
        if (params) {
            disp.add(instance.params.add(params));
        }
        if (consumer) {
            const d = consumer(instance);
            if (typeof d === 'object') {
                disp.add(d);
            }
        }
        disp.add(new atom_1.Disposable(() => {
            this.instances.delete(name);
            instance.destroy();
        }));
        this.disposables.add(disp);
        return disp;
    }
    dispose() {
        this.disposables.dispose();
    }
    withEventRange({ editor, detail, eventType, pos, controller }, callback) {
        if (pos) {
            pos = atom_1.Point.fromObject(pos);
        }
        if (!eventType) {
            eventType = utils_1.getEventType(detail);
        }
        if (!controller && editor) {
            controller = this.pluginManager.controller(editor);
        }
        if (!controller) {
            return;
        }
        return callback(controller.getEventRange(pos, eventType));
    }
    getEventRange({ editor, detail, eventType, pos, controller }) {
        if (pos) {
            pos = atom_1.Point.fromObject(pos);
        }
        if (!eventType) {
            eventType = utils_1.getEventType(detail);
        }
        if (!controller && editor) {
            controller = this.pluginManager.controller(editor);
        }
        if (!controller) {
            return;
        }
        return controller.getEventRange(pos, eventType);
    }
    shouldShowTooltip({ editor, pos, eventType }) {
        return __awaiter(this, void 0, void 0, function* () {
            const subs = [];
            for (const [pluginName, inst] of this.instances.entries()) {
                for (const vs of inst.tooltipEvents.values()) {
                    subs.push(Object.assign({ pluginName }, vs));
                }
            }
            subs.sort((a, b) => b.priority - a.priority);
            const controller = this.pluginManager.controller(editor);
            if (!controller) {
                return;
            }
            for (const { pluginName, handler } of subs) {
                try {
                    const eventRange = this.getEventRange({ controller, pos, eventType });
                    if (!eventRange) {
                        continue;
                    }
                    const { crange, pos: newPos } = eventRange;
                    const tt = yield Promise.resolve(handler(editor, crange, eventType));
                    if (tt) {
                        const { range, text } = tt;
                        controller.tooltips.show(range, utils_1.MessageObject.fromObject(text), { type: eventType, subtype: 'external' });
                        break;
                    }
                    else {
                        continue;
                    }
                }
                catch (e) {
                    if (e.message) {
                        console.warn(e);
                        e = {
                            status: 'warning',
                            detail: e.message
                        };
                    }
                    if (!e.ignore) {
                        controller.tooltips.hide({ type: eventType });
                        this.pluginManager.outputView.backendStatus(pluginName, e);
                    }
                }
            }
        });
    }
}
exports.UPI = UPI;
//# sourceMappingURL=data:application/json;base64,