"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const utils_1 = require("../../utils");
function create(pluginManager, main, instance) {
    return {
        show({ editor, pos, eventType, detail, tooltip }) {
            const controller = pluginManager.controller(editor);
            if (!controller) {
                return;
            }
            main.withEventRange({ controller, pos, detail, eventType }, ({ crange, pos: evpos, eventType: newEventType }) => {
                Promise.resolve(tooltip(crange)).then(({ range, text, persistOnCursorMove }) => controller.tooltips.show(range, utils_1.MessageObject.fromObject(text), { type: newEventType, subtype: 'external', persistOnCursorMove }))
                    .catch((status = { status: 'warning' }) => {
                    if (status.message) {
                        console.warn(status);
                        status = { status: 'warning' };
                    }
                    if (!status.ignore) {
                        controller.tooltips.hide({ type: newEventType });
                        instance.messages.status(status);
                    }
                });
            });
        },
        onShouldShowTooltip(...args) {
            if (args.length < 2) {
                args.unshift(100);
            }
            const [priority, handler] = args;
            const obj = { priority, handler };
            instance.tooltipEvents.add(obj);
            return new atom_1.Disposable(() => instance.tooltipEvents.delete(obj));
        }
    };
}
exports.create = create;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXBpLTAuMy9pbnN0YW5jZS90b29sdGlwcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUFrRDtBQU1sRCx1Q0FBbUQ7QUFnRW5ELGdCQUF3QixhQUE0QixFQUFFLElBQVMsRUFBRSxRQUFxQjtJQUNwRixNQUFNLENBQUM7UUFFTCxJQUFJLENBQUUsRUFBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFDO1lBQzdDLE1BQU0sVUFBVSxHQUFHLGFBQWEsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUE7WUFDbkQsRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO2dCQUFDLE1BQU0sQ0FBQTtZQUFDLENBQUM7WUFDM0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBQyxFQUFFLENBQUMsRUFBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFDO2dCQUN0RyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxtQkFBbUIsRUFBQyxLQUN2RSxVQUFVLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDdEIsS0FBSyxFQUFFLHFCQUFhLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUNyQyxFQUFDLElBQUksRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxtQkFBbUIsRUFBQyxDQUMvRCxDQUNGO3FCQUNBLEtBQUssQ0FBQyxDQUFDLE1BQU0sR0FBRyxFQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUM7b0JBQ2xDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO3dCQUNuQixPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO3dCQUNwQixNQUFNLEdBQUcsRUFBQyxNQUFNLEVBQUUsU0FBUyxFQUFDLENBQUE7b0JBQzlCLENBQUM7b0JBQ0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzt3QkFDbkIsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBQyxJQUFJLEVBQUUsWUFBWSxFQUFDLENBQUMsQ0FBQTt3QkFDOUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUE7b0JBQ2xDLENBQUM7Z0JBQ0gsQ0FBQyxDQUFDLENBQUE7WUFDSixDQUFDLENBQUMsQ0FBQTtRQUNKLENBQUM7UUFDRCxtQkFBbUIsQ0FBRSxHQUFHLElBQVc7WUFDakMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNwQixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQ25CLENBQUM7WUFDRCxNQUFNLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQTtZQUNoQyxNQUFNLEdBQUcsR0FBRyxFQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUMsQ0FBQTtZQUMvQixRQUFRLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUMvQixNQUFNLENBQUMsSUFBSSxpQkFBVSxDQUFDLE1BQU0sUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtRQUNqRSxDQUFDO0tBQ0YsQ0FBQTtBQUNILENBQUM7QUFuQ0Qsd0JBbUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXNwb3NhYmxlLCBUZXh0RWRpdG9yLCBSYW5nZX0gZnJvbSAnYXRvbSdcbmltcG9ydCB7UGx1Z2luTWFuYWdlcn0gZnJvbSAnLi4vLi4vcGx1Z2luLW1hbmFnZXInXG5pbXBvcnQge1VQSX0gZnJvbSAnLi4vJ1xuaW1wb3J0IHtVUElJbnN0YW5jZX0gZnJvbSAnLi8nXG5pbXBvcnQge1RFdmVudFJhbmdlVHlwZX0gZnJvbSAnLi4vLi4vZWRpdG9yLWNvbnRyb2wnXG5pbXBvcnQge1RQb3NpdGlvbn0gZnJvbSAnLi4vLi4vcmVzdWx0cy1kYidcbmltcG9ydCB7VE1lc3NhZ2UsIE1lc3NhZ2VPYmplY3R9IGZyb20gJy4uLy4uL3V0aWxzJ1xuXG5pbnRlcmZhY2UgSVNob3dUb29sdGlwUGFyYW1zIHtcbiAgZWRpdG9yOiBUZXh0RWRpdG9yXG4gIHBvczogVFBvc2l0aW9uXG4gIGV2ZW50VHlwZT86IFRFdmVudFJhbmdlVHlwZVxuICBkZXRhaWw/OiBhbnlcbiAgdG9vbHRpcDogVFRvb2x0aXBGdW5jdGlvblxufVxudHlwZSBUVG9vbHRpcEZ1bmN0aW9uID0gKGNyYW5nZTogUmFuZ2UpID0+IElUb29sdGlwRGF0YSB8IFByb21pc2U8SVRvb2x0aXBEYXRhPlxuaW50ZXJmYWNlIElUb29sdGlwRGF0YSB7XG4gIHJhbmdlOiBSYW5nZVxuICB0ZXh0OiBUTWVzc2FnZVxuICBwZXJzaXN0T25DdXJzb3JNb3ZlPzogYm9vbGVhblxufVxuZXhwb3J0IHR5cGUgVFRvb2x0aXBIYW5kbGVyID1cbiAgKGVkaXRvcjogVGV4dEVkaXRvciwgY3JhbmdlOiBSYW5nZSwgdHlwZTogVEV2ZW50UmFuZ2VUeXBlKSA9PiBJVG9vbHRpcERhdGEgfCBQcm9taXNlPElUb29sdGlwRGF0YT5cblxuZXhwb3J0IGludGVyZmFjZSBJTWFpbkludGVyZmFjZSB7XG4gIC8qKlxuICBTaG93IHRvb2x0aXAgaW4gZWRpdG9yLlxuXG4gIGVkaXRvcjogZWRpdG9yIHRoYXQgd2lsbCBzaG93IHRvb2x0aXBcbiAgcG9zOiB0b29sdGlwIHBvc2l0aW9uXG4gIGV2ZW50VHlwZTogb25lIG9mICdjb250ZXh0JywgJ2tleWJvYXJkJyBhbmQgJ21vdXNlJ1xuICBkZXRhaWw6IGZvciBhdXRvbWF0aWMgc2VsZWN0aW9uIGJldHdlZW4gJ2NvbnRleHQnIGFuZCAna2V5Ym9hcmQnLlxuICAgICAgICAgIElnbm9yZWQgaWYgJ2V2ZW50VHlwZScgaXMgc2V0LlxuICB0b29sdGlwOiBmdW5jdGlvbihjcmFuZ2UpXG4gICAgY3JhbmdlOiBSYW5nZSwgY3VycmVudGx5IHNlbGVjdGVkIHJhbmdlIGluIGVkaXRvciAocG9zc2libHkgZW1wdHkpXG5cbiAgICBSZXR1cm5zIHtyYW5nZSwgdGV4dH0gb3IgUHJvbWlzZVxuICAgICAgcmFuZ2U6IFJhbmdlLCB0b29sdGlwIGhpZ2hsaWdodGluZyByYW5nZVxuICAgICAgcGVyc2lzdE9uQ3Vyc29yTW92ZTogQm9vbGVhbiwgb3B0aW9uYWwsIGRlZmF1bHQgZmFsc2UsIHBlcnNpc3Qgb24gY3Vyc29yIG1vdmUgcmVnYXJkbGVzcyBvZiBzZXR0aW5nc1xuICAgICAgdGV4dDogdG9vbHRpcCB0ZXh0LiBTdHJpbmcgb3Ige3RleHQsIGhpZ2hsaWdodGVyfSBvciB7aHRtbH1cbiAgICAgICAgdGV4dDogdG9vbHRpcCB0ZXh0XG4gICAgICAgIGhpZ2hsaWdodGVyOiBncmFtbWFyIHNjb3BlIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGhpZ2hsaWdodCB0b29sdGlwIHRleHRcbiAgICAgICAgaHRtbDogaHRtbCB0byBiZSBkaXNwbGF5ZWQgaW4gdG9vbHRpcFxuICAqL1xuICBzaG93IChwYXJhbXM6IElTaG93VG9vbHRpcFBhcmFtcyk6IHZvaWRcblxuICAvKipcbiAgRWRpdG9yIGV2ZW50IHN1YnNjcmlwdGlvbi4gRmlyZXMgd2hlbiBtb3VzZSBjdXJzb3Igc3RvcHBlZCBvdmVyIGEgc3ltYm9sIGluXG4gIGVkaXRvci5cblxuICBwcmlvcml0eTogZXZlbnQgcHJpb3JpdHksIGhpZ2hlciB2YWx1ZSBtZWFucyBoaWdoZXIgcHJpb3JpdHksXG4gICAgICAgICAgICBzdWJzY3JpcHRpb24gd2l0aCBoaWdodGVzdCBwcmlvcml0eSB3aWxsIGJlIGNhbGxlZCBmaXJzdC5cbiAgY2FsbGJhY2s6IGNhbGxiYWNrKGVkaXRvciwgY3JhbmdlLCB0eXBlKVxuICAgIGVkaXRvcjogVGV4dEVkaXRvciwgZWRpdG9yIHRoYXQgZ2VuZXJhdGVkIGV2ZW50XG4gICAgY3JhbmdlOiBSYW5nZSwgY3Vyc29yIHJhbmdlIHRoYXQgZ2VuZXJhdGVkIGV2ZW50LlxuICAgIHR5cGU6IE9uZSBvZiAnbW91c2UnLCAnc2VsZWN0aW9uJyAtLSB0eXBlIG9mIGV2ZW50IHRoYXQgdHJpZ2dlcmVkIHRoaXNcblxuICAgIFJldHVybnMge3JhbmdlLCB0ZXh0fSBvciBQcm9taXNlLlxuICAgICAgcmFuZ2U6IFJhbmdlLCB0b29sdGlwIGhpZ2hsaWdodGluZyByYW5nZVxuICAgICAgdGV4dDogdG9vbHRpcCB0ZXh0LiBTdHJpbmcgb3Ige3RleHQsIGhpZ2hsaWdodGVyfSBvciB7aHRtbH1cbiAgICAgICAgdGV4dDogdG9vbHRpcCB0ZXh0XG4gICAgICAgIGhpZ2hsaWdodGVyOiBncmFtbWFyIHNjb3BlIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGhpZ2hsaWdodCB0b29sdGlwIHRleHRcbiAgICAgICAgaHRtbDogaHRtbCB0byBiZSBkaXNwbGF5ZWQgaW4gdG9vbHRpcFxuXG4gIHJldHVybnMgRGlzcG9zYWJsZVxuICAqL1xuICBvblNob3VsZFNob3dUb29sdGlwIChwcmlvcml0eTogbnVtYmVyLCBoYW5kbGVyOiBUVG9vbHRpcEhhbmRsZXIpOiBEaXNwb3NhYmxlXG4gIG9uU2hvdWxkU2hvd1Rvb2x0aXAgKGhhbmRsZXI6IFRUb29sdGlwSGFuZGxlcik6IERpc3Bvc2FibGVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZSAocGx1Z2luTWFuYWdlcjogUGx1Z2luTWFuYWdlciwgbWFpbjogVVBJLCBpbnN0YW5jZTogVVBJSW5zdGFuY2UpOiBJTWFpbkludGVyZmFjZSB7XG4gIHJldHVybiB7XG4gICAgLy8gVE9ETzogbWVyZ2UgdGhpcyB0byBVUElcbiAgICBzaG93ICh7ZWRpdG9yLCBwb3MsIGV2ZW50VHlwZSwgZGV0YWlsLCB0b29sdGlwfSkge1xuICAgICAgY29uc3QgY29udHJvbGxlciA9IHBsdWdpbk1hbmFnZXIuY29udHJvbGxlcihlZGl0b3IpXG4gICAgICBpZiAoIWNvbnRyb2xsZXIpIHsgcmV0dXJuIH1cbiAgICAgIG1haW4ud2l0aEV2ZW50UmFuZ2Uoe2NvbnRyb2xsZXIsIHBvcywgZGV0YWlsLCBldmVudFR5cGV9LCAoe2NyYW5nZSwgcG9zOiBldnBvcywgZXZlbnRUeXBlOiBuZXdFdmVudFR5cGV9KSA9PiB7XG4gICAgICAgIFByb21pc2UucmVzb2x2ZSh0b29sdGlwKGNyYW5nZSkpLnRoZW4oKHtyYW5nZSwgdGV4dCwgcGVyc2lzdE9uQ3Vyc29yTW92ZX0pID0+XG4gICAgICAgICAgY29udHJvbGxlci50b29sdGlwcy5zaG93KFxuICAgICAgICAgICAgcmFuZ2UsIE1lc3NhZ2VPYmplY3QuZnJvbU9iamVjdCh0ZXh0KSxcbiAgICAgICAgICAgIHt0eXBlOiBuZXdFdmVudFR5cGUsIHN1YnR5cGU6ICdleHRlcm5hbCcsIHBlcnNpc3RPbkN1cnNvck1vdmV9XG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICAgIC5jYXRjaCgoc3RhdHVzID0ge3N0YXR1czogJ3dhcm5pbmcnfSkgPT4ge1xuICAgICAgICAgIGlmIChzdGF0dXMubWVzc2FnZSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKHN0YXR1cylcbiAgICAgICAgICAgIHN0YXR1cyA9IHtzdGF0dXM6ICd3YXJuaW5nJ31cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFzdGF0dXMuaWdub3JlKSB7XG4gICAgICAgICAgICBjb250cm9sbGVyLnRvb2x0aXBzLmhpZGUoe3R5cGU6IG5ld0V2ZW50VHlwZX0pXG4gICAgICAgICAgICBpbnN0YW5jZS5tZXNzYWdlcy5zdGF0dXMoc3RhdHVzKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSxcbiAgICBvblNob3VsZFNob3dUb29sdGlwICguLi5hcmdzOiBhbnlbXSkge1xuICAgICAgaWYgKGFyZ3MubGVuZ3RoIDwgMikge1xuICAgICAgICBhcmdzLnVuc2hpZnQoMTAwKVxuICAgICAgfVxuICAgICAgY29uc3QgW3ByaW9yaXR5LCBoYW5kbGVyXSA9IGFyZ3NcbiAgICAgIGNvbnN0IG9iaiA9IHtwcmlvcml0eSwgaGFuZGxlcn1cbiAgICAgIGluc3RhbmNlLnRvb2x0aXBFdmVudHMuYWRkKG9iailcbiAgICAgIHJldHVybiBuZXcgRGlzcG9zYWJsZSgoKSA9PiBpbnN0YW5jZS50b29sdGlwRXZlbnRzLmRlbGV0ZShvYmopKVxuICAgIH1cbiAgfVxufVxuIl19