"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
function create(pluginManager, main, instance) {
    return {
        show({ editor, pos, eventType, detail, tooltip }) {
            const controller = pluginManager.controller(editor);
            if (!controller) {
                return;
            }
            main.withEventRange({ controller, pos, detail, eventType }, ({ crange, pos: evpos }, newEventType) => {
                Promise.resolve(tooltip(crange)).then(({ range, text, persistOnCursorMove }) => controller.showTooltip(evpos, range, text, { newEventType, subtype: 'external', persistOnCursorMove }))
                    .catch((status = { status: 'warning' }) => {
                    if (status.message) {
                        console.warn(status);
                        status = { status: 'warning' };
                    }
                    if (!status.ignore) {
                        controller.hideTooltip({ newEventType });
                        instance.messages.status(status);
                    }
                });
            });
        },
        onShouldShowTooltip(...args) {
            if (args.length < 2) {
                args.unshift(100);
            }
            const [priority, handler] = args;
            const obj = { priority, handler };
            instance.tooltipEvents.add(obj);
            return new atom_1.Disposable(() => instance.tooltipEvents.delete(obj));
        }
    };
}
exports.create = create;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXBpLTAuMy9pbnN0YW5jZS90b29sdGlwcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUEyQztBQXNFM0MsZ0JBQXdCLGFBQTRCLEVBQUUsSUFBUyxFQUFFLFFBQXFCO0lBQ3BGLE1BQU0sQ0FBQztRQUVMLElBQUksQ0FBRSxFQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUM7WUFDN0MsTUFBTSxVQUFVLEdBQUcsYUFBYSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQTtZQUNuRCxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7Z0JBQUMsTUFBTSxDQUFBO1lBQUMsQ0FBQztZQUMzQixJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFDLEVBQUUsQ0FBQyxFQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFDLEVBQUUsWUFBWTtnQkFDM0YsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsbUJBQW1CLEVBQUMsS0FDdkUsVUFBVSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLG1CQUFtQixFQUFDLENBQUMsQ0FBQztxQkFDdEcsS0FBSyxDQUFDLENBQUMsTUFBTSxHQUFHLEVBQUMsTUFBTSxFQUFFLFNBQVMsRUFBQztvQkFDbEMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7d0JBQ25CLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7d0JBQ3BCLE1BQU0sR0FBRyxFQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUMsQ0FBQTtvQkFDOUIsQ0FBQztvQkFDRCxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO3dCQUNuQixVQUFVLENBQUMsV0FBVyxDQUFDLEVBQUMsWUFBWSxFQUFDLENBQUMsQ0FBQTt3QkFDdEMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUE7b0JBQ2xDLENBQUM7Z0JBQ0gsQ0FBQyxDQUFDLENBQUE7WUFDSixDQUFDLENBQUMsQ0FBQTtRQUNKLENBQUM7UUFDRCxtQkFBbUIsQ0FBRSxHQUFHLElBQVc7WUFDakMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNwQixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQ25CLENBQUM7WUFDRCxNQUFNLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQTtZQUNoQyxNQUFNLEdBQUcsR0FBRyxFQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUMsQ0FBQTtZQUMvQixRQUFRLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUMvQixNQUFNLENBQUMsSUFBSSxpQkFBVSxDQUFDLE1BQU0sUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtRQUNqRSxDQUFDO0tBQ0YsQ0FBQTtBQUNILENBQUM7QUEvQkQsd0JBK0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXNwb3NhYmxlLCBUZXh0RWRpdG9yfSBmcm9tICdhdG9tJ1xuaW1wb3J0IHtQbHVnaW5NYW5hZ2VyfSBmcm9tICcuLi8uLi9wbHVnaW4tbWFuYWdlcidcbmltcG9ydCB7VVBJfSBmcm9tICcuLi8nXG5pbXBvcnQge1VQSUluc3RhbmNlfSBmcm9tICcuLydcbmltcG9ydCB7VEV2ZW50UmFuZ2VUeXBlfSBmcm9tICcuL2dlbmVyYWwnXG5pbXBvcnQge1RQb3NpdGlvbn0gZnJvbSAnLi4vLi4vcmVzdWx0cy1kYidcbmltcG9ydCB7VE1lc3NhZ2V9IGZyb20gJy4uLy4uL3V0aWxzJ1xuXG5pbnRlcmZhY2UgSVNob3dUb29sdGlwUGFyYW1zIHtcbiAgZWRpdG9yOiBUZXh0RWRpdG9yXG4gIHBvczogVFBvc2l0aW9uXG4gIGV2ZW50VHlwZTogVEV2ZW50UmFuZ2VUeXBlXG4gIGRldGFpbDogYW55XG4gIHRvb2x0aXA6IFRUb29sdGlwRnVuY3Rpb25cbn1cbnR5cGUgVFRvb2x0aXBGdW5jdGlvbiA9IChjcmFuZ2U6IFJhbmdlKSA9PiBJVG9vbHRpcERhdGEgfCBQcm9taXNlPElUb29sdGlwRGF0YT5cbmludGVyZmFjZSBJVG9vbHRpcERhdGEge1xuICByYW5nZTogUmFuZ2VcbiAgdGV4dDogVE1lc3NhZ2VcbiAgcGVyc2lzdE9uQ3Vyc29yTW92ZT86IGJvb2xlYW5cbn1cbmV4cG9ydCB0eXBlIFRUb29sdGlwSGFuZGxlciA9XG4gIChlZGl0b3I6IFRleHRFZGl0b3IsIGNyYW5nZTogUmFuZ2UsIHR5cGU6IFRFdmVudFJhbmdlVHlwZSkgPT4gSVRvb2x0aXBEYXRhIHwgUHJvbWlzZTxJVG9vbHRpcERhdGE+XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU1haW5JbnRlcmZhY2Uge1xuICAvKipcbiAgU2hvdyB0b29sdGlwIGluIGVkaXRvci5cblxuICBlZGl0b3I6IGVkaXRvciB0aGF0IHdpbGwgc2hvdyB0b29sdGlwXG4gIHBvczogdG9vbHRpcCBwb3NpdGlvblxuICBldmVudFR5cGU6IG9uZSBvZiAnY29udGV4dCcsICdrZXlib2FyZCcgYW5kICdtb3VzZSdcbiAgZGV0YWlsOiBmb3IgYXV0b21hdGljIHNlbGVjdGlvbiBiZXR3ZWVuICdjb250ZXh0JyBhbmQgJ2tleWJvYXJkJy5cbiAgICAgICAgICBJZ25vcmVkIGlmICdldmVudFR5cGUnIGlzIHNldC5cbiAgdG9vbHRpcDogZnVuY3Rpb24oY3JhbmdlKVxuICAgIGNyYW5nZTogUmFuZ2UsIGN1cnJlbnRseSBzZWxlY3RlZCByYW5nZSBpbiBlZGl0b3IgKHBvc3NpYmx5IGVtcHR5KVxuXG4gICAgUmV0dXJucyB7cmFuZ2UsIHRleHR9IG9yIFByb21pc2VcbiAgICAgIHJhbmdlOiBSYW5nZSwgdG9vbHRpcCBoaWdobGlnaHRpbmcgcmFuZ2VcbiAgICAgIHBlcnNpc3RPbkN1cnNvck1vdmU6IEJvb2xlYW4sIG9wdGlvbmFsLCBkZWZhdWx0IGZhbHNlLCBwZXJzaXN0IG9uIGN1cnNvciBtb3ZlIHJlZ2FyZGxlc3Mgb2Ygc2V0dGluZ3NcbiAgICAgIHRleHQ6IHRvb2x0aXAgdGV4dC4gU3RyaW5nIG9yIHt0ZXh0LCBoaWdobGlnaHRlcn0gb3Ige2h0bWx9XG4gICAgICAgIHRleHQ6IHRvb2x0aXAgdGV4dFxuICAgICAgICBoaWdobGlnaHRlcjogZ3JhbW1hciBzY29wZSB0aGF0IHdpbGwgYmUgdXNlZCB0byBoaWdobGlnaHQgdG9vbHRpcCB0ZXh0XG4gICAgICAgIGh0bWw6IGh0bWwgdG8gYmUgZGlzcGxheWVkIGluIHRvb2x0aXBcbiAgKi9cbiAgc2hvdyAocGFyYW1zOiBJU2hvd1Rvb2x0aXBQYXJhbXMpOiB2b2lkXG5cbiAgLyoqXG4gIEVkaXRvciBldmVudCBzdWJzY3JpcHRpb24uIEZpcmVzIHdoZW4gbW91c2UgY3Vyc29yIHN0b3BwZWQgb3ZlciBhIHN5bWJvbCBpblxuICBlZGl0b3IuXG5cbiAgcHJpb3JpdHk6IGV2ZW50IHByaW9yaXR5LCBoaWdoZXIgdmFsdWUgbWVhbnMgaGlnaGVyIHByaW9yaXR5LFxuICAgICAgICAgICAgc3Vic2NyaXB0aW9uIHdpdGggaGlnaHRlc3QgcHJpb3JpdHkgd2lsbCBiZSBjYWxsZWQgZmlyc3QuXG4gIGNhbGxiYWNrOiBjYWxsYmFjayhlZGl0b3IsIGNyYW5nZSwgdHlwZSlcbiAgICBlZGl0b3I6IFRleHRFZGl0b3IsIGVkaXRvciB0aGF0IGdlbmVyYXRlZCBldmVudFxuICAgIGNyYW5nZTogUmFuZ2UsIGN1cnNvciByYW5nZSB0aGF0IGdlbmVyYXRlZCBldmVudC5cbiAgICB0eXBlOiBPbmUgb2YgJ21vdXNlJywgJ3NlbGVjdGlvbicgLS0gdHlwZSBvZiBldmVudCB0aGF0IHRyaWdnZXJlZCB0aGlzXG5cbiAgICBSZXR1cm5zIHtyYW5nZSwgdGV4dH0gb3IgUHJvbWlzZS5cbiAgICAgIHJhbmdlOiBSYW5nZSwgdG9vbHRpcCBoaWdobGlnaHRpbmcgcmFuZ2VcbiAgICAgIHRleHQ6IHRvb2x0aXAgdGV4dC4gU3RyaW5nIG9yIHt0ZXh0LCBoaWdobGlnaHRlcn0gb3Ige2h0bWx9XG4gICAgICAgIHRleHQ6IHRvb2x0aXAgdGV4dFxuICAgICAgICBoaWdobGlnaHRlcjogZ3JhbW1hciBzY29wZSB0aGF0IHdpbGwgYmUgdXNlZCB0byBoaWdobGlnaHQgdG9vbHRpcCB0ZXh0XG4gICAgICAgIGh0bWw6IGh0bWwgdG8gYmUgZGlzcGxheWVkIGluIHRvb2x0aXBcblxuICByZXR1cm5zIERpc3Bvc2FibGVcbiAgKi9cbiAgb25TaG91bGRTaG93VG9vbHRpcCAocHJpb3JpdHk6IG51bWJlciwgaGFuZGxlcjogVFRvb2x0aXBIYW5kbGVyKTogRGlzcG9zYWJsZVxuICBvblNob3VsZFNob3dUb29sdGlwIChoYW5kbGVyOiBUVG9vbHRpcEhhbmRsZXIpOiBEaXNwb3NhYmxlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGUgKHBsdWdpbk1hbmFnZXI6IFBsdWdpbk1hbmFnZXIsIG1haW46IFVQSSwgaW5zdGFuY2U6IFVQSUluc3RhbmNlKTogSU1haW5JbnRlcmZhY2Uge1xuICByZXR1cm4ge1xuICAgIC8vIFRPRE86IG1lcmdlIHRoaXMgdG8gVVBJXG4gICAgc2hvdyAoe2VkaXRvciwgcG9zLCBldmVudFR5cGUsIGRldGFpbCwgdG9vbHRpcH0pIHtcbiAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBwbHVnaW5NYW5hZ2VyLmNvbnRyb2xsZXIoZWRpdG9yKVxuICAgICAgaWYgKCFjb250cm9sbGVyKSB7IHJldHVybiB9XG4gICAgICBtYWluLndpdGhFdmVudFJhbmdlKHtjb250cm9sbGVyLCBwb3MsIGRldGFpbCwgZXZlbnRUeXBlfSwgKHtjcmFuZ2UsIHBvczogZXZwb3N9LCBuZXdFdmVudFR5cGUpID0+IHtcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKHRvb2x0aXAoY3JhbmdlKSkudGhlbigoe3JhbmdlLCB0ZXh0LCBwZXJzaXN0T25DdXJzb3JNb3ZlfSkgPT5cbiAgICAgICAgICBjb250cm9sbGVyLnNob3dUb29sdGlwKGV2cG9zLCByYW5nZSwgdGV4dCwge25ld0V2ZW50VHlwZSwgc3VidHlwZTogJ2V4dGVybmFsJywgcGVyc2lzdE9uQ3Vyc29yTW92ZX0pKVxuICAgICAgICAuY2F0Y2goKHN0YXR1cyA9IHtzdGF0dXM6ICd3YXJuaW5nJ30pID0+IHtcbiAgICAgICAgICBpZiAoc3RhdHVzLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihzdGF0dXMpXG4gICAgICAgICAgICBzdGF0dXMgPSB7c3RhdHVzOiAnd2FybmluZyd9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghc3RhdHVzLmlnbm9yZSkge1xuICAgICAgICAgICAgY29udHJvbGxlci5oaWRlVG9vbHRpcCh7bmV3RXZlbnRUeXBlfSlcbiAgICAgICAgICAgIGluc3RhbmNlLm1lc3NhZ2VzLnN0YXR1cyhzdGF0dXMpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9LFxuICAgIG9uU2hvdWxkU2hvd1Rvb2x0aXAgKC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgICBpZiAoYXJncy5sZW5ndGggPCAyKSB7XG4gICAgICAgIGFyZ3MudW5zaGlmdCgxMDApXG4gICAgICB9XG4gICAgICBjb25zdCBbcHJpb3JpdHksIGhhbmRsZXJdID0gYXJnc1xuICAgICAgY29uc3Qgb2JqID0ge3ByaW9yaXR5LCBoYW5kbGVyfVxuICAgICAgaW5zdGFuY2UudG9vbHRpcEV2ZW50cy5hZGQob2JqKVxuICAgICAgcmV0dXJuIG5ldyBEaXNwb3NhYmxlKCgpID0+IGluc3RhbmNlLnRvb2x0aXBFdmVudHMuZGVsZXRlKG9iaikpXG4gICAgfVxuICB9XG59XG4iXX0=