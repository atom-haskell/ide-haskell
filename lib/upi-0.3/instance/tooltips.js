"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
function create(pluginManager, main, instance) {
    return {
        show({ editor, pos, eventType, detail, tooltip }) {
            const controller = pluginManager.controller(editor);
            if (!controller) {
                return;
            }
            main.withEventRange({ controller, pos, detail, eventType }, ({ crange, pos: evpos, eventType: newEventType }) => {
                Promise.resolve(tooltip(crange)).then(({ range, text, persistOnCursorMove }) => controller.showTooltip(evpos, range, text, { eventType: newEventType, subtype: 'external', persistOnCursorMove }))
                    .catch((status = { status: 'warning' }) => {
                    if (status.message) {
                        console.warn(status);
                        status = { status: 'warning' };
                    }
                    if (!status.ignore) {
                        controller.hideTooltip({ eventType: newEventType });
                        instance.messages.status(status);
                    }
                });
            });
        },
        onShouldShowTooltip(...args) {
            if (args.length < 2) {
                args.unshift(100);
            }
            const [priority, handler] = args;
            const obj = { priority, handler };
            instance.tooltipEvents.add(obj);
            return new atom_1.Disposable(() => instance.tooltipEvents.delete(obj));
        }
    };
}
exports.create = create;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXBpLTAuMy9pbnN0YW5jZS90b29sdGlwcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUFrRDtBQXNFbEQsZ0JBQXdCLGFBQTRCLEVBQUUsSUFBUyxFQUFFLFFBQXFCO0lBQ3BGLE1BQU0sQ0FBQztRQUVMLElBQUksQ0FBRSxFQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUM7WUFDN0MsTUFBTSxVQUFVLEdBQUcsYUFBYSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQTtZQUNuRCxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7Z0JBQUMsTUFBTSxDQUFBO1lBQUMsQ0FBQztZQUMzQixJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFDLEVBQUUsQ0FBQyxFQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUM7Z0JBQ3RHLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLG1CQUFtQixFQUFDLEtBQ3ZFLFVBQVUsQ0FBQyxXQUFXLENBQ3BCLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUNsQixFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxtQkFBbUIsRUFBQyxDQUNwRSxDQUNGO3FCQUNBLEtBQUssQ0FBQyxDQUFDLE1BQU0sR0FBRyxFQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUM7b0JBQ2xDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO3dCQUNuQixPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO3dCQUNwQixNQUFNLEdBQUcsRUFBQyxNQUFNLEVBQUUsU0FBUyxFQUFDLENBQUE7b0JBQzlCLENBQUM7b0JBQ0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzt3QkFDbkIsVUFBVSxDQUFDLFdBQVcsQ0FBQyxFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUMsQ0FBQyxDQUFBO3dCQUNqRCxRQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtvQkFDbEMsQ0FBQztnQkFDSCxDQUFDLENBQUMsQ0FBQTtZQUNKLENBQUMsQ0FBQyxDQUFBO1FBQ0osQ0FBQztRQUNELG1CQUFtQixDQUFFLEdBQUcsSUFBVztZQUNqQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BCLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDbkIsQ0FBQztZQUNELE1BQU0sQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFBO1lBQ2hDLE1BQU0sR0FBRyxHQUFHLEVBQUMsUUFBUSxFQUFFLE9BQU8sRUFBQyxDQUFBO1lBQy9CLFFBQVEsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQy9CLE1BQU0sQ0FBQyxJQUFJLGlCQUFVLENBQUMsTUFBTSxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO1FBQ2pFLENBQUM7S0FDRixDQUFBO0FBQ0gsQ0FBQztBQW5DRCx3QkFtQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0Rpc3Bvc2FibGUsIFRleHRFZGl0b3IsIFJhbmdlfSBmcm9tICdhdG9tJ1xuaW1wb3J0IHtQbHVnaW5NYW5hZ2VyfSBmcm9tICcuLi8uLi9wbHVnaW4tbWFuYWdlcidcbmltcG9ydCB7VVBJfSBmcm9tICcuLi8nXG5pbXBvcnQge1VQSUluc3RhbmNlfSBmcm9tICcuLydcbmltcG9ydCB7VEV2ZW50UmFuZ2VUeXBlfSBmcm9tICcuLi8uLi9lZGl0b3ItY29udHJvbCdcbmltcG9ydCB7VFBvc2l0aW9ufSBmcm9tICcuLi8uLi9yZXN1bHRzLWRiJ1xuaW1wb3J0IHtUTWVzc2FnZX0gZnJvbSAnLi4vLi4vdXRpbHMnXG5cbmludGVyZmFjZSBJU2hvd1Rvb2x0aXBQYXJhbXMge1xuICBlZGl0b3I6IFRleHRFZGl0b3JcbiAgcG9zOiBUUG9zaXRpb25cbiAgZXZlbnRUeXBlPzogVEV2ZW50UmFuZ2VUeXBlXG4gIGRldGFpbD86IGFueVxuICB0b29sdGlwOiBUVG9vbHRpcEZ1bmN0aW9uXG59XG50eXBlIFRUb29sdGlwRnVuY3Rpb24gPSAoY3JhbmdlOiBSYW5nZSkgPT4gSVRvb2x0aXBEYXRhIHwgUHJvbWlzZTxJVG9vbHRpcERhdGE+XG5pbnRlcmZhY2UgSVRvb2x0aXBEYXRhIHtcbiAgcmFuZ2U6IFJhbmdlXG4gIHRleHQ6IFRNZXNzYWdlXG4gIHBlcnNpc3RPbkN1cnNvck1vdmU/OiBib29sZWFuXG59XG5leHBvcnQgdHlwZSBUVG9vbHRpcEhhbmRsZXIgPVxuICAoZWRpdG9yOiBUZXh0RWRpdG9yLCBjcmFuZ2U6IFJhbmdlLCB0eXBlOiBURXZlbnRSYW5nZVR5cGUpID0+IElUb29sdGlwRGF0YSB8IFByb21pc2U8SVRvb2x0aXBEYXRhPlxuXG5leHBvcnQgaW50ZXJmYWNlIElNYWluSW50ZXJmYWNlIHtcbiAgLyoqXG4gIFNob3cgdG9vbHRpcCBpbiBlZGl0b3IuXG5cbiAgZWRpdG9yOiBlZGl0b3IgdGhhdCB3aWxsIHNob3cgdG9vbHRpcFxuICBwb3M6IHRvb2x0aXAgcG9zaXRpb25cbiAgZXZlbnRUeXBlOiBvbmUgb2YgJ2NvbnRleHQnLCAna2V5Ym9hcmQnIGFuZCAnbW91c2UnXG4gIGRldGFpbDogZm9yIGF1dG9tYXRpYyBzZWxlY3Rpb24gYmV0d2VlbiAnY29udGV4dCcgYW5kICdrZXlib2FyZCcuXG4gICAgICAgICAgSWdub3JlZCBpZiAnZXZlbnRUeXBlJyBpcyBzZXQuXG4gIHRvb2x0aXA6IGZ1bmN0aW9uKGNyYW5nZSlcbiAgICBjcmFuZ2U6IFJhbmdlLCBjdXJyZW50bHkgc2VsZWN0ZWQgcmFuZ2UgaW4gZWRpdG9yIChwb3NzaWJseSBlbXB0eSlcblxuICAgIFJldHVybnMge3JhbmdlLCB0ZXh0fSBvciBQcm9taXNlXG4gICAgICByYW5nZTogUmFuZ2UsIHRvb2x0aXAgaGlnaGxpZ2h0aW5nIHJhbmdlXG4gICAgICBwZXJzaXN0T25DdXJzb3JNb3ZlOiBCb29sZWFuLCBvcHRpb25hbCwgZGVmYXVsdCBmYWxzZSwgcGVyc2lzdCBvbiBjdXJzb3IgbW92ZSByZWdhcmRsZXNzIG9mIHNldHRpbmdzXG4gICAgICB0ZXh0OiB0b29sdGlwIHRleHQuIFN0cmluZyBvciB7dGV4dCwgaGlnaGxpZ2h0ZXJ9IG9yIHtodG1sfVxuICAgICAgICB0ZXh0OiB0b29sdGlwIHRleHRcbiAgICAgICAgaGlnaGxpZ2h0ZXI6IGdyYW1tYXIgc2NvcGUgdGhhdCB3aWxsIGJlIHVzZWQgdG8gaGlnaGxpZ2h0IHRvb2x0aXAgdGV4dFxuICAgICAgICBodG1sOiBodG1sIHRvIGJlIGRpc3BsYXllZCBpbiB0b29sdGlwXG4gICovXG4gIHNob3cgKHBhcmFtczogSVNob3dUb29sdGlwUGFyYW1zKTogdm9pZFxuXG4gIC8qKlxuICBFZGl0b3IgZXZlbnQgc3Vic2NyaXB0aW9uLiBGaXJlcyB3aGVuIG1vdXNlIGN1cnNvciBzdG9wcGVkIG92ZXIgYSBzeW1ib2wgaW5cbiAgZWRpdG9yLlxuXG4gIHByaW9yaXR5OiBldmVudCBwcmlvcml0eSwgaGlnaGVyIHZhbHVlIG1lYW5zIGhpZ2hlciBwcmlvcml0eSxcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbiB3aXRoIGhpZ2h0ZXN0IHByaW9yaXR5IHdpbGwgYmUgY2FsbGVkIGZpcnN0LlxuICBjYWxsYmFjazogY2FsbGJhY2soZWRpdG9yLCBjcmFuZ2UsIHR5cGUpXG4gICAgZWRpdG9yOiBUZXh0RWRpdG9yLCBlZGl0b3IgdGhhdCBnZW5lcmF0ZWQgZXZlbnRcbiAgICBjcmFuZ2U6IFJhbmdlLCBjdXJzb3IgcmFuZ2UgdGhhdCBnZW5lcmF0ZWQgZXZlbnQuXG4gICAgdHlwZTogT25lIG9mICdtb3VzZScsICdzZWxlY3Rpb24nIC0tIHR5cGUgb2YgZXZlbnQgdGhhdCB0cmlnZ2VyZWQgdGhpc1xuXG4gICAgUmV0dXJucyB7cmFuZ2UsIHRleHR9IG9yIFByb21pc2UuXG4gICAgICByYW5nZTogUmFuZ2UsIHRvb2x0aXAgaGlnaGxpZ2h0aW5nIHJhbmdlXG4gICAgICB0ZXh0OiB0b29sdGlwIHRleHQuIFN0cmluZyBvciB7dGV4dCwgaGlnaGxpZ2h0ZXJ9IG9yIHtodG1sfVxuICAgICAgICB0ZXh0OiB0b29sdGlwIHRleHRcbiAgICAgICAgaGlnaGxpZ2h0ZXI6IGdyYW1tYXIgc2NvcGUgdGhhdCB3aWxsIGJlIHVzZWQgdG8gaGlnaGxpZ2h0IHRvb2x0aXAgdGV4dFxuICAgICAgICBodG1sOiBodG1sIHRvIGJlIGRpc3BsYXllZCBpbiB0b29sdGlwXG5cbiAgcmV0dXJucyBEaXNwb3NhYmxlXG4gICovXG4gIG9uU2hvdWxkU2hvd1Rvb2x0aXAgKHByaW9yaXR5OiBudW1iZXIsIGhhbmRsZXI6IFRUb29sdGlwSGFuZGxlcik6IERpc3Bvc2FibGVcbiAgb25TaG91bGRTaG93VG9vbHRpcCAoaGFuZGxlcjogVFRvb2x0aXBIYW5kbGVyKTogRGlzcG9zYWJsZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlIChwbHVnaW5NYW5hZ2VyOiBQbHVnaW5NYW5hZ2VyLCBtYWluOiBVUEksIGluc3RhbmNlOiBVUElJbnN0YW5jZSk6IElNYWluSW50ZXJmYWNlIHtcbiAgcmV0dXJuIHtcbiAgICAvLyBUT0RPOiBtZXJnZSB0aGlzIHRvIFVQSVxuICAgIHNob3cgKHtlZGl0b3IsIHBvcywgZXZlbnRUeXBlLCBkZXRhaWwsIHRvb2x0aXB9KSB7XG4gICAgICBjb25zdCBjb250cm9sbGVyID0gcGx1Z2luTWFuYWdlci5jb250cm9sbGVyKGVkaXRvcilcbiAgICAgIGlmICghY29udHJvbGxlcikgeyByZXR1cm4gfVxuICAgICAgbWFpbi53aXRoRXZlbnRSYW5nZSh7Y29udHJvbGxlciwgcG9zLCBkZXRhaWwsIGV2ZW50VHlwZX0sICh7Y3JhbmdlLCBwb3M6IGV2cG9zLCBldmVudFR5cGU6IG5ld0V2ZW50VHlwZX0pID0+IHtcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKHRvb2x0aXAoY3JhbmdlKSkudGhlbigoe3JhbmdlLCB0ZXh0LCBwZXJzaXN0T25DdXJzb3JNb3ZlfSkgPT5cbiAgICAgICAgICBjb250cm9sbGVyLnNob3dUb29sdGlwKFxuICAgICAgICAgICAgZXZwb3MsIHJhbmdlLCB0ZXh0LFxuICAgICAgICAgICAge2V2ZW50VHlwZTogbmV3RXZlbnRUeXBlLCBzdWJ0eXBlOiAnZXh0ZXJuYWwnLCBwZXJzaXN0T25DdXJzb3JNb3ZlfVxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgICAuY2F0Y2goKHN0YXR1cyA9IHtzdGF0dXM6ICd3YXJuaW5nJ30pID0+IHtcbiAgICAgICAgICBpZiAoc3RhdHVzLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihzdGF0dXMpXG4gICAgICAgICAgICBzdGF0dXMgPSB7c3RhdHVzOiAnd2FybmluZyd9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghc3RhdHVzLmlnbm9yZSkge1xuICAgICAgICAgICAgY29udHJvbGxlci5oaWRlVG9vbHRpcCh7ZXZlbnRUeXBlOiBuZXdFdmVudFR5cGV9KVxuICAgICAgICAgICAgaW5zdGFuY2UubWVzc2FnZXMuc3RhdHVzKHN0YXR1cylcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0sXG4gICAgb25TaG91bGRTaG93VG9vbHRpcCAoLi4uYXJnczogYW55W10pIHtcbiAgICAgIGlmIChhcmdzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgYXJncy51bnNoaWZ0KDEwMClcbiAgICAgIH1cbiAgICAgIGNvbnN0IFtwcmlvcml0eSwgaGFuZGxlcl0gPSBhcmdzXG4gICAgICBjb25zdCBvYmogPSB7cHJpb3JpdHksIGhhbmRsZXJ9XG4gICAgICBpbnN0YW5jZS50b29sdGlwRXZlbnRzLmFkZChvYmopXG4gICAgICByZXR1cm4gbmV3IERpc3Bvc2FibGUoKCkgPT4gaW5zdGFuY2UudG9vbHRpcEV2ZW50cy5kZWxldGUob2JqKSlcbiAgICB9XG4gIH1cbn1cbiJdfQ==