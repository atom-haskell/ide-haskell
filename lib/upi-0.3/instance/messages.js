"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
function create(pluginName, pluginManager) {
    return {
        status(status) {
            pluginManager.outputView.backendStatus(pluginName, status);
        },
        add(messages, types) {
            messages = messages.map((m) => {
                if (m.position) {
                    m.position = atom_1.Point.fromObject(m.position);
                }
                return m;
            });
            pluginManager.checkResults.appendResults(messages, types);
        },
        set(messages, types) {
            messages = messages.map((m) => {
                if (m.position) {
                    m.position = atom_1.Point.fromObject(m.position);
                }
                return m;
            });
            pluginManager.checkResults.setResults(messages, types);
        },
        clear(types) {
            pluginManager.checkResults.setResults([], types);
        },
        setTypes(types) {
            for (const type of Object.keys(types)) {
                const opts = types[type];
                pluginManager.outputView.createTab(type, opts);
            }
        },
    };
}
exports.create = create;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXBpLTAuMy9pbnN0YW5jZS9tZXNzYWdlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUEwQjtBQTREMUIsZ0JBQXdCLFVBQWtCLEVBQUUsYUFBNEI7SUFDdEUsTUFBTSxDQUFDO1FBQ0wsTUFBTSxDQUFFLE1BQU07WUFDWixhQUFhLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsTUFBYSxDQUFDLENBQUE7UUFDbkUsQ0FBQztRQUNELEdBQUcsQ0FBRSxRQUFRLEVBQUUsS0FBSztZQUNsQixRQUFRLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO29CQUNmLENBQUMsQ0FBQyxRQUFRLEdBQUcsWUFBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUE7Z0JBQzNDLENBQUM7Z0JBQ0QsTUFBTSxDQUFDLENBQUMsQ0FBQTtZQUNWLENBQUMsQ0FBQyxDQUFBO1lBQ0YsYUFBYSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBQzNELENBQUM7UUFDRCxHQUFHLENBQUUsUUFBUSxFQUFFLEtBQUs7WUFDbEIsUUFBUSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUN4QixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztvQkFDZixDQUFDLENBQUMsUUFBUSxHQUFHLFlBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFBO2dCQUMzQyxDQUFDO2dCQUNELE1BQU0sQ0FBQyxDQUFDLENBQUE7WUFDVixDQUFDLENBQUMsQ0FBQTtZQUNGLGFBQWEsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUN4RCxDQUFDO1FBQ0QsS0FBSyxDQUFFLEtBQUs7WUFDVixhQUFhLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFDbEQsQ0FBQztRQUNELFFBQVEsQ0FBRSxLQUFLO1lBQ2IsR0FBRyxDQUFDLENBQUMsTUFBTSxJQUFJLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3RDLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtnQkFDeEIsYUFBYSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFBO1lBQ2hELENBQUM7UUFDSCxDQUFDO0tBQ0YsQ0FBQTtBQUNILENBQUM7QUFqQ0Qsd0JBaUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtQb2ludH0gZnJvbSAnYXRvbSdcbmltcG9ydCB7UGx1Z2luTWFuYWdlcn0gZnJvbSAnLi4vLi4vcGx1Z2luLW1hbmFnZXInXG5pbXBvcnQge0lSZXN1bHRJdGVtLCBUU2V2ZXJpdHl9IGZyb20gJy4uLy4uL3Jlc3VsdHMtZGInXG5pbXBvcnQge0lTdGF0dXMsIElTZXRUeXBlc1BhcmFtc30gZnJvbSAnLi4vLi4vb3V0cHV0LXBhbmVsJ1xuXG5leHBvcnQgaW50ZXJmYWNlIElNYWluSW50ZXJmYWNlIHtcbiAgLyoqXG4gIFNldHMgYmFja2VuZCBzdGF0dXNcbiAgQHBhcmFtIHN0YXR1cyB7T2JqZWN0fVxuICAgIHN0YXR1czogb25lIG9mICdwcm9ncmVzcycsICdyZWFkeScsICdlcnJvcicsICd3YXJuaW5nJ1xuICAgIHByb2dyZXNzOiBmbG9hdCBiZXR3ZWVuIDAgYW5kIDEsIG9ubHkgcmVsZXZhbnQgd2hlbiBzdGF0dXMgaXMgJ3Byb2dyZXNzJ1xuICAgICAgICAgICAgICBpZiAwIG9yIHVuZGVmaW5lZCwgcHJvZ3Jlc3MgYmFyIGlzIG5vdCBzaG93blxuICAqL1xuICBzdGF0dXMgKHN0YXR1czogSVN0YXR1cyk6IHZvaWRcblxuICAvKipcbiAgQWRkIG1lc3NhZ2VzIHRvIGlkZS1oYXNrZWxsIG91dHB1dFxuICBAcGFyYW0gbWVzc2FnZXM6IHtBcnJheTxPYmplY3Q+fVxuICAgIHVyaTogU3RyaW5nLCBGaWxlIFVSSSBtZXNzYWdlIHJlbGF0ZXMgdG9cbiAgICBwb3NpdGlvbjogUG9pbnQsIG9yIFBvaW50LWxpa2UgT2JqZWN0LCBwb3NpdGlvbiB0byB3aGljaCBtZXNzYWdlIHJlbGF0ZXNcbiAgICBtZXNzYWdlOiBTdHJpbmcgb3Igezx0ZXh0IHwgaHRtbD4sIGhpZ2hsaWdodGVyP30sIG1lc3NhZ2VcbiAgICBzZXZlcml0eTogU3RyaW5nLCBvbmUgb2YgJ2Vycm9yJywgJ3dhcm5pbmcnLCAnbGludCcsICdidWlsZCcsXG4gICAgICAgICAgICAgIG9yIHVzZXItZGVmaW5lZCwgc2VlIGBzZXRNZXNzYWdlVHlwZXNgXG4gIEBwYXJhbSB0eXBlczogQXJyYXkgb2YgU3RyaW5nLCBjb250YWluaW5nIHBvc3NpYmxlIG1lc3NhZ2UgYHNldmVyaXR5YC4gSWYgdW5kZWZpbmVkLFxuICAgICAgICAgd2lsbCBiZSB0YWtlbiBmcm9tIGBtZXNzYWdlc2BcbiAgKi9cbiAgYWRkIChtZXNzYWdlczogSVJlc3VsdEl0ZW1bXSwgdHlwZXM6IFRTZXZlcml0eVtdKTogdm9pZFxuXG4gIC8qKlxuICBTZXQgbWVzc2FnZXMgaW4gaWRlLWhhc2tlbGwgb3V0cHV0LiBDbGVhcnMgYWxsIGV4aXN0aW5nIG1lc3NhZ2VzIHdpdGhcbiAgYHNldmVyaXR5YCBpbiBgdHlwZXNgXG4gIG1lc3NhZ2VzOiBBcnJheSBvZiBPYmplY3RcbiAgICB1cmk6IFN0cmluZywgRmlsZSBVUkkgbWVzc2FnZSByZWxhdGVzIHRvXG4gICAgcG9zaXRpb246IFBvaW50LCBvciBQb2ludC1saWtlIE9iamVjdCwgcG9zaXRpb24gdG8gd2hpY2ggbWVzc2FnZSByZWxhdGVzXG4gICAgbWVzc2FnZTogU3RyaW5nLCBtZXNzYWdlXG4gICAgc2V2ZXJpdHk6IFN0cmluZywgb25lIG9mICdlcnJvcicsICd3YXJuaW5nJywgJ2xpbnQnLCAnYnVpbGQnLFxuICAgICAgICAgICAgICBvciB1c2VyLWRlZmluZWQsIHNlZSBgc2V0TWVzc2FnZVR5cGVzYFxuICB0eXBlczogQXJyYXkgb2YgU3RyaW5nLCBjb250YWluaW5nIHBvc3NpYmxlIG1lc3NhZ2UgYHNldmVyaXR5YC4gSWYgdW5kZWZpbmVkLFxuICAgICAgICAgd2lsbCBiZSB0YWtlbiBmcm9tIGBtZXNzYWdlc2BcbiAgKi9cbiAgc2V0IChtZXNzYWdlczogSVJlc3VsdEl0ZW1bXSwgdHlwZXM6IFRTZXZlcml0eVtdKTogdm9pZFxuXG4gIC8qKlxuICBDbGVhciBhbGwgZXhpc3RpbmcgbWVzc2FnZXMgd2l0aCBgc2V2ZXJpdHlgIGluIGB0eXBlc2BcbiAgVGhpcyBpcyBzaG9ydGhhbmQgZnJvbSBgc2V0TWVzc2FnZXMoW10sdHlwZXMpYFxuICAqL1xuICBjbGVhciAodHlwZXM6IFRTZXZlcml0eVtdKTogdm9pZFxuXG4gIC8qKlxuICBTZXQgcG9zc2libGUgbWVzc2FnZSBgc2V2ZXJpdHlgIHRoYXQgeW91ciBwYWNrYWdlIHdpbGwgdXNlLlxuICB0eXBlczogT2JqZWN0IHdpdGgga2V5cyByZXByZXNlbnRpbmcgcG9zc2libGUgbWVzc2FnZSBgc2V2ZXJpdHlgIChpLmUuIHRhYiBuYW1lKVxuICAgICAgICAgYW5kIHZhbHVlcyBiZWluZyBPYmplY3RzIHdpdGgga2V5c1xuICAgIHVyaUZpbHRlcjogQm9vbCwgc2hvdWxkIHVyaSBmaWx0ZXIgYXBwbHkgdG8gdGFiP1xuICAgIGF1dG9TY3JvbGw6IEJvb2wsIHNob3VsZCB0YWIgYXV0by1zY3JvbGw/XG5cbiAgVGhpcyBhbGxvd3MgdG8gZGVmaW5lIGN1c3RvbSBvdXRwdXQgcGFuZWwgdGFicy5cbiAgKi9cbiAgc2V0VHlwZXMgKHR5cGVzOiBJU2V0VHlwZXNQYXJhbXMpOiB2b2lkIC8vIFRPRE86IHNob3VsZCBhZGQgZGlzcG9zYWJsZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlIChwbHVnaW5OYW1lOiBzdHJpbmcsIHBsdWdpbk1hbmFnZXI6IFBsdWdpbk1hbmFnZXIpOiBJTWFpbkludGVyZmFjZSB7XG4gIHJldHVybiB7XG4gICAgc3RhdHVzIChzdGF0dXMpIHtcbiAgICAgIHBsdWdpbk1hbmFnZXIub3V0cHV0Vmlldy5iYWNrZW5kU3RhdHVzKHBsdWdpbk5hbWUsIHN0YXR1cyBhcyBhbnkpIC8vIFRPRE8gRml4IHRoaXNcbiAgICB9LFxuICAgIGFkZCAobWVzc2FnZXMsIHR5cGVzKSB7XG4gICAgICBtZXNzYWdlcyA9IG1lc3NhZ2VzLm1hcCgobSkgPT4ge1xuICAgICAgICBpZiAobS5wb3NpdGlvbikge1xuICAgICAgICAgIG0ucG9zaXRpb24gPSBQb2ludC5mcm9tT2JqZWN0KG0ucG9zaXRpb24pXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1cbiAgICAgIH0pXG4gICAgICBwbHVnaW5NYW5hZ2VyLmNoZWNrUmVzdWx0cy5hcHBlbmRSZXN1bHRzKG1lc3NhZ2VzLCB0eXBlcylcbiAgICB9LFxuICAgIHNldCAobWVzc2FnZXMsIHR5cGVzKSB7XG4gICAgICBtZXNzYWdlcyA9IG1lc3NhZ2VzLm1hcCgobSkgPT4ge1xuICAgICAgICBpZiAobS5wb3NpdGlvbikge1xuICAgICAgICAgIG0ucG9zaXRpb24gPSBQb2ludC5mcm9tT2JqZWN0KG0ucG9zaXRpb24pXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1cbiAgICAgIH0pXG4gICAgICBwbHVnaW5NYW5hZ2VyLmNoZWNrUmVzdWx0cy5zZXRSZXN1bHRzKG1lc3NhZ2VzLCB0eXBlcylcbiAgICB9LFxuICAgIGNsZWFyICh0eXBlcykge1xuICAgICAgcGx1Z2luTWFuYWdlci5jaGVja1Jlc3VsdHMuc2V0UmVzdWx0cyhbXSwgdHlwZXMpXG4gICAgfSxcbiAgICBzZXRUeXBlcyAodHlwZXMpIHtcbiAgICAgIGZvciAoY29uc3QgdHlwZSBvZiBPYmplY3Qua2V5cyh0eXBlcykpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHR5cGVzW3R5cGVdXG4gICAgICAgIHBsdWdpbk1hbmFnZXIub3V0cHV0Vmlldy5jcmVhdGVUYWIodHlwZSwgb3B0cylcbiAgICAgIH1cbiAgICB9LFxuICB9XG59XG4iXX0=