"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const error_1 = require("../error");
exports.UPIError = error_1.UPIError;
const Menu = require("./menu");
const Messages = require("./messages");
const Events = require("./events");
const Tooltips = require("./tooltips");
const Controls = require("./controls");
const Params = require("./params");
class UPIInstance {
    constructor(pluginManager, pluginName, main) {
        this.disposables = new atom_1.CompositeDisposable();
        this.tooltipEvents = new Set();
        this.destroyed = false;
        this.utils = { withEventRange: main.withEventRange.bind(main) };
        this.menu = Menu.create(this.disposables);
        this.messages = Messages.create(pluginName, pluginManager);
        this.tooltips = Tooltips.create(pluginManager, main, this);
        this.events = Events.create(pluginManager, this.disposables);
        this.controls = Controls.create(pluginManager);
        this.params = Params.create(pluginName, pluginManager);
    }
    destroy() {
        this.disposables.dispose();
        this.tooltipEvents.clear();
        Object.getOwnPropertyNames(this).forEach((p) => {
            this[p] = null;
        });
        this.destroyed = true;
    }
    check() {
        if (this.destroyed) {
            throw new error_1.UPIError('This UPI interface was destroyed');
        }
        return this;
    }
}
exports.UPIInstance = UPIInstance;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXBpLTAuMy9pbnN0YW5jZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUF3QztBQUV4QyxvQ0FBaUM7QUFFekIsb0NBQVE7QUFFaEIsK0JBQThCO0FBQzlCLHVDQUFzQztBQUN0QyxtQ0FBa0M7QUFDbEMsdUNBQXNDO0FBQ3RDLHVDQUFzQztBQUN0QyxtQ0FBa0M7QUFLbEM7SUFXRSxZQUFhLGFBQTRCLEVBQUUsVUFBa0IsRUFBRSxJQUFTO1FBQ3RFLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSwwQkFBbUIsRUFBRSxDQUFBO1FBQzVDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQTtRQUM5QixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQTtRQUV0QixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFDLENBQUE7UUFFN0QsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUN6QyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxDQUFBO1FBRTFELElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQzFELElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQzVELElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQTtRQUM5QyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxDQUFBO0lBQ3hELENBQUM7SUFFTSxPQUFPO1FBQ1osSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUMxQixJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQzFCLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ3pDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUE7UUFDaEIsQ0FBQyxDQUFDLENBQUE7UUFDRixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQTtJQUN2QixDQUFDO0lBRU0sS0FBSztRQUNWLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ25CLE1BQU0sSUFBSSxnQkFBUSxDQUFDLGtDQUFrQyxDQUFDLENBQUE7UUFDeEQsQ0FBQztRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUE7SUFDYixDQUFDO0NBQ0Y7QUExQ0Qsa0NBMENDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb3NpdGVEaXNwb3NhYmxlfSBmcm9tICdhdG9tJ1xuaW1wb3J0IHtQbHVnaW5NYW5hZ2VyfSBmcm9tICcuLi8uLi9wbHVnaW4tbWFuYWdlcidcbmltcG9ydCB7VVBJRXJyb3J9IGZyb20gJy4uL2Vycm9yJ1xuaW1wb3J0IHtVUEl9IGZyb20gJy4uLydcbmV4cG9ydCB7VVBJRXJyb3J9XG5cbmltcG9ydCAqIGFzIE1lbnUgZnJvbSAnLi9tZW51J1xuaW1wb3J0ICogYXMgTWVzc2FnZXMgZnJvbSAnLi9tZXNzYWdlcydcbmltcG9ydCAqIGFzIEV2ZW50cyBmcm9tICcuL2V2ZW50cydcbmltcG9ydCAqIGFzIFRvb2x0aXBzIGZyb20gJy4vdG9vbHRpcHMnXG5pbXBvcnQgKiBhcyBDb250cm9scyBmcm9tICcuL2NvbnRyb2xzJ1xuaW1wb3J0ICogYXMgUGFyYW1zIGZyb20gJy4vcGFyYW1zJ1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSAnLi91dGlscydcblxuZXhwb3J0IHR5cGUgVFRvb2x0aXBIYW5kbGVyU3BlYyA9IHtwcmlvcml0eTogbnVtYmVyLCBoYW5kbGVyOiBUb29sdGlwcy5UVG9vbHRpcEhhbmRsZXJ9XG5cbmV4cG9ydCBjbGFzcyBVUElJbnN0YW5jZSB7XG4gIHB1YmxpYyBtZW51OiBNZW51LklNYWluSW50ZXJmYWNlXG4gIHB1YmxpYyBtZXNzYWdlczogTWVzc2FnZXMuSU1haW5JbnRlcmZhY2VcbiAgcHVibGljIGV2ZW50czogRXZlbnRzLklNYWluSW50ZXJmYWNlXG4gIHB1YmxpYyB0b29sdGlwczogVG9vbHRpcHMuSU1haW5JbnRlcmZhY2VcbiAgcHVibGljIGNvbnRyb2xzOiBDb250cm9scy5JTWFpbkludGVyZmFjZVxuICBwdWJsaWMgcGFyYW1zOiBQYXJhbXMuSU1haW5JbnRlcmZhY2VcbiAgcHVibGljIHV0aWxzOiBVdGlscy5JTWFpbkludGVyZmFjZVxuICBwdWJsaWMgdG9vbHRpcEV2ZW50czogU2V0PFRUb29sdGlwSGFuZGxlclNwZWM+XG4gIHByaXZhdGUgZGlzcG9zYWJsZXM6IENvbXBvc2l0ZURpc3Bvc2FibGVcbiAgcHJpdmF0ZSBkZXN0cm95ZWQ6IGJvb2xlYW5cbiAgY29uc3RydWN0b3IgKHBsdWdpbk1hbmFnZXI6IFBsdWdpbk1hbmFnZXIsIHBsdWdpbk5hbWU6IHN0cmluZywgbWFpbjogVVBJKSB7XG4gICAgdGhpcy5kaXNwb3NhYmxlcyA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKClcbiAgICB0aGlzLnRvb2x0aXBFdmVudHMgPSBuZXcgU2V0KClcbiAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlXG5cbiAgICB0aGlzLnV0aWxzID0ge3dpdGhFdmVudFJhbmdlOiBtYWluLndpdGhFdmVudFJhbmdlLmJpbmQobWFpbil9XG5cbiAgICB0aGlzLm1lbnUgPSBNZW51LmNyZWF0ZSh0aGlzLmRpc3Bvc2FibGVzKVxuICAgIHRoaXMubWVzc2FnZXMgPSBNZXNzYWdlcy5jcmVhdGUocGx1Z2luTmFtZSwgcGx1Z2luTWFuYWdlcilcblxuICAgIHRoaXMudG9vbHRpcHMgPSBUb29sdGlwcy5jcmVhdGUocGx1Z2luTWFuYWdlciwgbWFpbiwgdGhpcylcbiAgICB0aGlzLmV2ZW50cyA9IEV2ZW50cy5jcmVhdGUocGx1Z2luTWFuYWdlciwgdGhpcy5kaXNwb3NhYmxlcylcbiAgICB0aGlzLmNvbnRyb2xzID0gQ29udHJvbHMuY3JlYXRlKHBsdWdpbk1hbmFnZXIpXG4gICAgdGhpcy5wYXJhbXMgPSBQYXJhbXMuY3JlYXRlKHBsdWdpbk5hbWUsIHBsdWdpbk1hbmFnZXIpXG4gIH1cblxuICBwdWJsaWMgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5kaXNwb3NhYmxlcy5kaXNwb3NlKClcbiAgICB0aGlzLnRvb2x0aXBFdmVudHMuY2xlYXIoKVxuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpLmZvckVhY2goKHApID0+IHtcbiAgICAgIHRoaXNbcF0gPSBudWxsXG4gICAgfSlcbiAgICB0aGlzLmRlc3Ryb3llZCA9IHRydWVcbiAgfVxuXG4gIHB1YmxpYyBjaGVjayAoKSB7XG4gICAgaWYgKHRoaXMuZGVzdHJveWVkKSB7XG4gICAgICB0aHJvdyBuZXcgVVBJRXJyb3IoJ1RoaXMgVVBJIGludGVyZmFjZSB3YXMgZGVzdHJveWVkJylcbiAgICB9XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxufVxuIl19