"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const plugin_manager_1 = require("./plugin-manager");
const prettify_1 = require("./prettify");
const utils_1 = require("./utils");
const UPI = require("./upi");
const UPI3 = require("./upi-0.3");
let upiProvided = false;
let disposables;
let pluginManager;
let menu;
let upi3;
var config_1 = require("./config");
exports.config = config_1.config;
function cleanConfig() { }
function activate(state) {
    cleanConfig();
    atom.views.getView(atom.workspace).classList.add('ide-haskell');
    require('etch').setScheduler(atom.views);
    upiProvided = false;
    if (atom.config.get('ide-haskell.startupMessageIdeBackend')) {
        setTimeout(() => {
            if (!upiProvided) {
                atom.notifications.addWarning(`Ide-Haskell needs backends that provide most of functionality.
            Please refer to README for details`, { dismissable: true });
            }
        }, 5000);
    }
    disposables = new atom_1.CompositeDisposable();
    pluginManager = new plugin_manager_1.PluginManager(state);
    disposables.add(atom.commands.add('atom-workspace', {
        'ide-haskell:toggle-output': () => pluginManager && pluginManager.togglePanel()
    }));
    disposables.add(atom.commands.add('atom-text-editor[data-grammar~="haskell"]', {
        'ide-haskell:prettify-file': ({ currentTarget }) => {
            prettify_1.prettifyFile(currentTarget.getModel());
        },
        'ide-haskell:close-tooltip': ({ currentTarget, abortKeyBinding }) => {
            const controller = pluginManager && pluginManager.controller(currentTarget.getModel());
            if (!controller) {
                return;
            }
            if (controller.tooltips.has()) {
                controller.tooltips.hide();
            }
            else if (abortKeyBinding) {
                abortKeyBinding();
            }
        },
        'ide-haskell:next-error': () => pluginManager && pluginManager.nextError(),
        'ide-haskell:prev-error': () => pluginManager && pluginManager.prevError()
    }));
    disposables.add(atom.commands.add('atom-text-editor[data-grammar~="cabal"]', {
        'ide-haskell:prettify-file': ({ currentTarget }) => {
            prettify_1.prettifyFile(currentTarget.getModel(), 'cabal');
        }
    }));
    atom.keymaps.add('ide-haskell', {
        'atom-text-editor[data-grammar~="haskell"]': { escape: 'ide-haskell:close-tooltip' }
    });
    menu = new atom_1.CompositeDisposable();
    menu.add(atom.menu.add([{
            label: utils_1.MAIN_MENU_LABEL,
            submenu: [
                { label: 'Prettify', command: 'ide-haskell:prettify-file' },
                { label: 'Toggle Panel', command: 'ide-haskell:toggle-output' }
            ]
        }]));
    upi3 = new UPI3.UPI(pluginManager);
}
exports.activate = activate;
function deactivate() {
    pluginManager && pluginManager.deactivate();
    upi3 && upi3.dispose();
    atom.keymaps.removeBindingsFromSource('ide-haskell');
    disposables && disposables.dispose();
    menu && menu.dispose();
    atom.menu.update();
}
exports.deactivate = deactivate;
function serialize() {
    if (pluginManager) {
        return pluginManager.serialize();
    }
}
exports.serialize = serialize;
function provideUpi() {
    upiProvided = true;
    return new UPI.UPI(pluginManager);
}
exports.provideUpi = provideUpi;
function provideUpi3() {
    upiProvided = true;
    return upi3;
}
exports.provideUpi3 = provideUpi3;
function consumeLinter(indieRegistry) {
    if (!(disposables && pluginManager)) {
        return;
    }
    const linter = indieRegistry.register({ name: 'IDE-Haskell' });
    disposables.add(linter);
    pluginManager.setLinter(linter);
    return linter;
}
exports.consumeLinter = consumeLinter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRlLWhhc2tlbGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaWRlLWhhc2tlbGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBd0M7QUFDeEMscURBQXNEO0FBQ3RELHlDQUF1QztBQUN2QyxtQ0FBdUM7QUFDdkMsNkJBQTRCO0FBQzVCLGtDQUFpQztBQUVqQyxJQUFJLFdBQVcsR0FBRyxLQUFLLENBQUE7QUFDdkIsSUFBSSxXQUE0QyxDQUFBO0FBQ2hELElBQUksYUFBd0MsQ0FBQTtBQUM1QyxJQUFJLElBQXFDLENBQUE7QUFDekMsSUFBSSxJQUEwQixDQUFBO0FBRTlCLG1DQUErQjtBQUF2QiwwQkFBQSxNQUFNLENBQUE7QUFFZCx5QkFBbUMsQ0FBQztBQU9wQyxrQkFBMEIsS0FBYTtJQUNyQyxXQUFXLEVBQUUsQ0FBQTtJQUViLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFBO0lBRS9ELE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBRXhDLFdBQVcsR0FBRyxLQUFLLENBQUE7SUFFbkIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsc0NBQXNDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUQsVUFBVSxDQUNSO1lBQ0UsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO2dCQUNqQixJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FDM0I7K0NBQ21DLEVBQ25DLEVBQUMsV0FBVyxFQUFFLElBQUksRUFBQyxDQUFDLENBQUE7WUFDeEIsQ0FBQztRQUNILENBQUMsRUFDRCxJQUFJLENBQ0wsQ0FBQTtJQUNILENBQUM7SUFFRCxXQUFXLEdBQUcsSUFBSSwwQkFBbUIsRUFBRSxDQUFB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RSxDQUFBO0FBQ3BCLENBQUM7QUFaRCxnQ0FZQztBQUVEO0lBQ0UsRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUNqQixNQUFNLENBQUMsYUFBYSxDQUFDLFNBQVMsRUFBRSxDQUFBO0lBQ25DLENBQUM7QUFDSCxDQUFDO0FBSkQsOEJBSUM7QUFFRDtJQUNFLFdBQVcsR0FBRyxJQUFJLENBQUE7SUFDbEIsTUFBTSxDQUFDLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxhQUFjLENBQUMsQ0FBQTtBQUNwQyxDQUFDO0FBSEQsZ0NBR0M7QUFFRDtJQUNFLFdBQVcsR0FBRyxJQUFJLENBQUE7SUFDbEIsTUFBTSxDQUFDLElBQUksQ0FBQTtBQUNiLENBQUM7QUFIRCxrQ0FHQztBQU9ELHVCQUErQixhQUE4QjtJQUMzRCxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxJQUFJLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUFDLE1BQU0sQ0FBQTtJQUFDLENBQUM7SUFDL0MsTUFBTSxNQUFNLEdBQUcsYUFBYSxDQUFDLFFBQVEsQ0FBQyxFQUFDLElBQUksRUFBRSxhQUFhLEVBQUMsQ0FBQyxDQUFBO0lBQzVELFdBQVcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDdkIsYUFBYSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUMvQixNQUFNLENBQUMsTUFBTSxDQUFBO0FBQ2YsQ0FBQztBQU5ELHNDQU1DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb3NpdGVEaXNwb3NhYmxlfSBmcm9tICdhdG9tJ1xuaW1wb3J0IHtQbHVnaW5NYW5hZ2VyLCBJU3RhdGV9IGZyb20gJy4vcGx1Z2luLW1hbmFnZXInXG5pbXBvcnQge3ByZXR0aWZ5RmlsZX0gZnJvbSAnLi9wcmV0dGlmeSdcbmltcG9ydCB7TUFJTl9NRU5VX0xBQkVMfSBmcm9tICcuL3V0aWxzJ1xuaW1wb3J0ICogYXMgVVBJIGZyb20gJy4vdXBpJ1xuaW1wb3J0ICogYXMgVVBJMyBmcm9tICcuL3VwaS0wLjMnXG5cbmxldCB1cGlQcm92aWRlZCA9IGZhbHNlXG5sZXQgZGlzcG9zYWJsZXM6IENvbXBvc2l0ZURpc3Bvc2FibGUgfCB1bmRlZmluZWRcbmxldCBwbHVnaW5NYW5hZ2VyOiBQbHVnaW5NYW5hZ2VyIHwgdW5kZWZpbmVkXG5sZXQgbWVudTogQ29tcG9zaXRlRGlzcG9zYWJsZSB8IHVuZGVmaW5lZFxubGV0IHVwaTM6IFVQSTMuVVBJIHwgdW5kZWZpbmVkXG5cbmV4cG9ydCB7Y29uZmlnfSBmcm9tICcuL2NvbmZpZydcblxuZnVuY3Rpb24gY2xlYW5Db25maWcgKCkgeyAvKm5vb3AqLyB9XG5cbmRlY2xhcmUgaW50ZXJmYWNlIElFdmVudERlc2Mge1xuICBjdXJyZW50VGFyZ2V0OiBIVE1MRWxlbWVudCAmIHsgZ2V0TW9kZWwgKCk6IEF0b21UeXBlcy5UZXh0RWRpdG9yIH1cbiAgYWJvcnRLZXlCaW5kaW5nPyAoKTogdm9pZFxufVxuXG5leHBvcnQgZnVuY3Rpb24gYWN0aXZhdGUgKHN0YXRlOiBJU3RhdGUpIHtcbiAgY2xlYW5Db25maWcoKVxuXG4gIGF0b20udmlld3MuZ2V0VmlldyhhdG9tLndvcmtzcGFjZSkuY2xhc3NMaXN0LmFkZCgnaWRlLWhhc2tlbGwnKVxuXG4gIHJlcXVpcmUoJ2V0Y2gnKS5zZXRTY2hlZHVsZXIoYXRvbS52aWV3cylcblxuICB1cGlQcm92aWRlZCA9IGZhbHNlXG5cbiAgaWYgKGF0b20uY29uZmlnLmdldCgnaWRlLWhhc2tlbGwuc3RhcnR1cE1lc3NhZ2VJZGVCYWNrZW5kJykpIHtcbiAgICBzZXRUaW1lb3V0KFxuICAgICAgKCkgPT4ge1xuICAgICAgICBpZiAoIXVwaVByb3ZpZGVkKSB7XG4gICAgICAgICAgYXRvbS5ub3RpZmljYXRpb25zLmFkZFdhcm5pbmcoXG4gICAgICAgICAgICBgSWRlLUhhc2tlbGwgbmVlZHMgYmFja2VuZHMgdGhhdCBwcm92aWRlIG1vc3Qgb2YgZnVuY3Rpb25hbGl0eS5cbiAgICAgICAgICAgIFBsZWFzZSByZWZlciB0byBSRUFETUUgZm9yIGRldGFpbHNgLFxuICAgICAgICAgICAge2Rpc21pc3NhYmxlOiB0cnVlfSlcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIDUwMDBcbiAgICApXG4gIH1cblxuICBkaXNwb3NhYmxlcyA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKClcblxuICBwbHVnaW5NYW5hZ2VyID0gbmV3IFBsdWdpbk1hbmFnZXIoc3RhdGUpXG5cbiAgLy8gZ2xvYmFsIGNvbW1hbmRzXG4gIGRpc3Bvc2FibGVzLmFkZChhdG9tLmNvbW1hbmRzLmFkZCgnYXRvbS13b3Jrc3BhY2UnLCB7XG4gICAgJ2lkZS1oYXNrZWxsOnRvZ2dsZS1vdXRwdXQnOiAoKSA9PlxuICAgICAgcGx1Z2luTWFuYWdlciAmJiBwbHVnaW5NYW5hZ2VyLnRvZ2dsZVBhbmVsKClcbiAgfSkpXG5cbiAgZGlzcG9zYWJsZXMuYWRkKFxuICAgIGF0b20uY29tbWFuZHMuYWRkKCdhdG9tLXRleHQtZWRpdG9yW2RhdGEtZ3JhbW1hcn49XCJoYXNrZWxsXCJdJywge1xuICAgICAgJ2lkZS1oYXNrZWxsOnByZXR0aWZ5LWZpbGUnOiAoe2N1cnJlbnRUYXJnZXR9OiBJRXZlbnREZXNjKSA9PiB7XG4gICAgICAgIHByZXR0aWZ5RmlsZShjdXJyZW50VGFyZ2V0LmdldE1vZGVsKCkpXG4gICAgICB9LFxuICAgICAgJ2lkZS1oYXNrZWxsOmNsb3NlLXRvb2x0aXAnOiAoe2N1cnJlbnRUYXJnZXQsIGFib3J0S2V5QmluZGluZ306IElFdmVudERlc2MpID0+IHtcbiAgICAgICAgY29uc3QgY29udHJvbGxlciA9IHBsdWdpbk1hbmFnZXIgJiYgcGx1Z2luTWFuYWdlci5jb250cm9sbGVyKGN1cnJlbnRUYXJnZXQuZ2V0TW9kZWwoKSlcbiAgICAgICAgaWYgKCFjb250cm9sbGVyKSB7IHJldHVybiB9XG4gICAgICAgIGlmIChjb250cm9sbGVyLnRvb2x0aXBzLmhhcygpKSB7XG4gICAgICAgICAgY29udHJvbGxlci50b29sdGlwcy5oaWRlKClcbiAgICAgICAgfSBlbHNlIGlmIChhYm9ydEtleUJpbmRpbmcpIHtcbiAgICAgICAgICBhYm9ydEtleUJpbmRpbmcoKVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJ2lkZS1oYXNrZWxsOm5leHQtZXJyb3InOiAoKSA9PiBwbHVnaW5NYW5hZ2VyICYmIHBsdWdpbk1hbmFnZXIubmV4dEVycm9yKCksXG4gICAgICAnaWRlLWhhc2tlbGw6cHJldi1lcnJvcic6ICgpID0+IHBsdWdpbk1hbmFnZXIgJiYgcGx1Z2luTWFuYWdlci5wcmV2RXJyb3IoKVxuICAgIH0pKVxuXG4gIGRpc3Bvc2FibGVzLmFkZChcbiAgICBhdG9tLmNvbW1hbmRzLmFkZCgnYXRvbS10ZXh0LWVkaXRvcltkYXRhLWdyYW1tYXJ+PVwiY2FiYWxcIl0nLCB7XG4gICAgICAnaWRlLWhhc2tlbGw6cHJldHRpZnktZmlsZSc6ICh7Y3VycmVudFRhcmdldH06IElFdmVudERlc2MpID0+IHtcbiAgICAgICAgcHJldHRpZnlGaWxlKGN1cnJlbnRUYXJnZXQuZ2V0TW9kZWwoKSAsICdjYWJhbCcpXG4gICAgICB9XG4gICAgfSkpXG5cbiAgYXRvbS5rZXltYXBzLmFkZCgnaWRlLWhhc2tlbGwnLCB7XG4gICAgJ2F0b20tdGV4dC1lZGl0b3JbZGF0YS1ncmFtbWFyfj1cImhhc2tlbGxcIl0nOlxuICAgICAge2VzY2FwZTogJ2lkZS1oYXNrZWxsOmNsb3NlLXRvb2x0aXAnfVxuICB9KVxuXG4gIG1lbnUgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG4gIG1lbnUuYWRkKGF0b20ubWVudS5hZGQoW3tcbiAgICBsYWJlbDogTUFJTl9NRU5VX0xBQkVMLFxuICAgIHN1Ym1lbnU6IFtcbiAgICAgIHtsYWJlbDogJ1ByZXR0aWZ5JywgY29tbWFuZDogJ2lkZS1oYXNrZWxsOnByZXR0aWZ5LWZpbGUnfSxcbiAgICAgIHtsYWJlbDogJ1RvZ2dsZSBQYW5lbCcsIGNvbW1hbmQ6ICdpZGUtaGFza2VsbDp0b2dnbGUtb3V0cHV0J31cbiAgICBdfV0pKVxuXG4gIHVwaTMgPSBuZXcgVVBJMy5VUEkocGx1Z2luTWFuYWdlcilcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlYWN0aXZhdGUgKCkge1xuICBwbHVnaW5NYW5hZ2VyICYmIHBsdWdpbk1hbmFnZXIuZGVhY3RpdmF0ZSgpXG4gIHVwaTMgJiYgdXBpMy5kaXNwb3NlKClcblxuICAvLyBUT0RPOiBubyBkZWZpbml0aW9uXG4gIGF0b20ua2V5bWFwcy5yZW1vdmVCaW5kaW5nc0Zyb21Tb3VyY2UoJ2lkZS1oYXNrZWxsJylcblxuICAvLyBjbGVhciBjb21tYW5kc1xuICBkaXNwb3NhYmxlcyAmJiBkaXNwb3NhYmxlcy5kaXNwb3NlKClcblxuICBtZW51ICYmIG1lbnUuZGlzcG9zZSgpXG4gIGF0b20ubWVudS51cGRhdGUoKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplICgpIHtcbiAgaWYgKHBsdWdpbk1hbmFnZXIpIHtcbiAgICAgcmV0dXJuIHBsdWdpbk1hbmFnZXIuc2VyaWFsaXplKClcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZVVwaSAoKSB7XG4gIHVwaVByb3ZpZGVkID0gdHJ1ZVxuICByZXR1cm4gbmV3IFVQSS5VUEkocGx1Z2luTWFuYWdlciEpIC8vIFRPRE86IG5vdCBlbnRpcmVseSBzdXJlIGl0J3MgT0suLi5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVVcGkzICgpIHtcbiAgdXBpUHJvdmlkZWQgPSB0cnVlXG4gIHJldHVybiB1cGkzXG59XG5cbmludGVyZmFjZSBJTGludGVyUmVnaXN0cnkge1xuICAvLyBUT0RPOiBzdGVhbCB0aGlzIGZyb20gYXRvbS10eXBlc2NyaXB0XG4gIHJlZ2lzdGVyOiBGdW5jdGlvblxufVxuXG5leHBvcnQgZnVuY3Rpb24gY29uc3VtZUxpbnRlciAoaW5kaWVSZWdpc3RyeTogSUxpbnRlclJlZ2lzdHJ5KSB7XG4gIGlmICghKGRpc3Bvc2FibGVzICYmIHBsdWdpbk1hbmFnZXIpKSB7IHJldHVybiB9XG4gIGNvbnN0IGxpbnRlciA9IGluZGllUmVnaXN0cnkucmVnaXN0ZXIoe25hbWU6ICdJREUtSGFza2VsbCd9KVxuICBkaXNwb3NhYmxlcy5hZGQobGludGVyKVxuICBwbHVnaW5NYW5hZ2VyLnNldExpbnRlcihsaW50ZXIpXG4gIHJldHVybiBsaW50ZXJcbn1cbiJdfQ==