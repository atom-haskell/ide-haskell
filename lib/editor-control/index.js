"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const utils_1 = require("../utils");
const element_listener_1 = require("./element-listener");
const tooltip_manager_1 = require("./tooltip-manager");
exports.TEventRangeType = tooltip_manager_1.TEventRangeType;
class EditorControl {
    constructor(editor, pluginManager) {
        this.editor = editor;
        this.disposables = new atom_1.CompositeDisposable();
        this.tooltips = new tooltip_manager_1.TooltipManager(this.editor);
        this.disposables.add(this.tooltips);
        this.tooltipRegistry = pluginManager.tooltipRegistry;
        this.gutter = this.editor.addGutter({
            name: 'ide-haskell-check-results',
            priority: 10
        });
        this.editorElement = atom.views.getView(this.editor);
        this.gutterElement = atom.views.getView(this.gutter);
        if (atom.config.get('ide-haskell.messageDisplayFrontend') === 'builtin') {
            this.registerGutterEvents();
        }
        const buffer = this.editor.getBuffer();
        this.disposables.add(buffer.onWillSave(() => pluginManager.willSaveBuffer(buffer)), buffer.onDidSave(() => pluginManager.didSaveBuffer(buffer)), this.editor.onDidStopChanging(() => pluginManager.didStopChanging(buffer)), this.editorElement.onDidChangeScrollLeft(() => this.tooltips.hide('mouse')), this.editorElement.onDidChangeScrollTop(() => this.tooltips.hide('mouse')), element_listener_1.listen(this.editorElement, 'mousemove', '.scroll-view', this.trackMouseBufferPosition.bind(this)), element_listener_1.listen(this.editorElement, 'mouseout', '.scroll-view', this.stopTrackingMouseBufferPosition.bind(this)), this.editor.onDidChangeSelectionRange(this.trackSelection.bind(this)));
    }
    destroy() {
        if (this.exprTypeTimeout) {
            clearTimeout(this.exprTypeTimeout);
        }
        if (this.selTimeout) {
            clearTimeout(this.selTimeout);
        }
        try {
            this.gutter.destroy();
        }
        catch (e) {
            console.warn(e);
        }
        this.disposables.dispose();
        this.lastMouseBufferPt = undefined;
    }
    getEventRange(eventType) {
        let crange, pos;
        switch (eventType) {
            case 'mouse':
            case 'gutter':
            case 'context':
                if (!this.lastMouseBufferPt) {
                    return;
                }
                pos = this.lastMouseBufferPt;
                const [selRange] = this.editor.getSelections()
                    .map((sel) => sel.getBufferRange())
                    .filter((sel) => sel.containsPoint(pos));
                crange = selRange || new atom_1.Range(pos, pos);
                break;
            case 'keyboard':
            case 'selection':
                crange = this.editor.getLastSelection().getBufferRange();
                pos = crange.start;
                break;
            default: throw new TypeError('Switch assertion failed');
        }
        return { crange, pos, eventType };
    }
    shouldShowTooltip(pos, type) {
        if ((pos.row < 0) ||
            (pos.row >= this.editor.getLineCount()) ||
            pos.isEqual(this.editor.bufferRangeForBufferRow(pos.row).end)) {
            this.tooltips.hide(type);
        }
        else {
            this.tooltipRegistry.showTooltip(this.editor, type);
        }
    }
    registerGutterEvents() {
        this.disposables.add(element_listener_1.listen(this.gutterElement, 'mouseover', '.decoration', (e) => {
            const bufferPt = utils_1.bufferPositionFromMouseEvent(this.editor, e);
            if (bufferPt) {
                this.lastMouseBufferPt = bufferPt;
                this.shouldShowTooltip(bufferPt, 'gutter');
            }
        }));
        this.disposables.add(element_listener_1.listen(this.gutterElement, 'mouseout', '.decoration', (e) => this.tooltips.hide('gutter')));
    }
    trackMouseBufferPosition(e) {
        const bufferPt = utils_1.bufferPositionFromMouseEvent(this.editor, e);
        if (!bufferPt) {
            return;
        }
        if (this.lastMouseBufferPt && this.lastMouseBufferPt.isEqual(bufferPt)) {
            return;
        }
        this.lastMouseBufferPt = bufferPt;
        if (this.exprTypeTimeout) {
            clearTimeout(this.exprTypeTimeout);
        }
        this.exprTypeTimeout = setTimeout(() => bufferPt && this.shouldShowTooltip(bufferPt, 'mouse'), atom.config.get('ide-haskell.expressionTypeInterval'));
    }
    stopTrackingMouseBufferPosition(e) {
        if (this.exprTypeTimeout) {
            return clearTimeout(this.exprTypeTimeout);
        }
    }
    trackSelection({ newBufferRange }) {
        this.handleCursorUnderTooltip(newBufferRange);
        if (this.selTimeout) {
            clearTimeout(this.selTimeout);
        }
        if (newBufferRange.isEmpty()) {
            this.tooltips.hide('selection');
            if (this.exprTypeTimeout) {
                clearTimeout(this.exprTypeTimeout);
            }
            this.tooltipRegistry.showTooltip(this.editor, 'keyboard');
        }
        else {
            this.selTimeout = setTimeout(() => this.shouldShowTooltip(newBufferRange.start, 'selection'), atom.config.get('ide-haskell.expressionTypeInterval'));
        }
    }
    handleCursorUnderTooltip(currentRange) {
        const tooltipElement = document.querySelector('ide-haskell-tooltip');
        if (!tooltipElement) {
            return;
        }
        const slcl = this.editorElement.pixelRectForScreenRange(this.editor.screenRangeForBufferRange(currentRange));
        const eecl = this.editorElement.querySelector('.scroll-view').getBoundingClientRect();
        const ttcl = tooltipElement.getBoundingClientRect();
        const div = tooltipElement.querySelector('div');
        if (!div) {
            return;
        }
        const ttcld = div.getBoundingClientRect();
        const ttbox = {
            left: ttcl.left - eecl.left,
            top: ttcld.top - eecl.top,
            width: ttcl.width,
            height: ttcld.height
        };
        const xmax = Math.round(Math.max(ttbox.left, slcl.left));
        const xmin = Math.round(Math.min(ttbox.left + ttbox.width, slcl.left +
            slcl.width));
        const ymax = Math.round(Math.max(ttbox.top, slcl.top));
        const ymin = Math.round(Math.min(ttbox.top + ttbox.height, slcl.top +
            slcl.height));
        const tt = document.querySelector('ide-haskell-tooltip');
        if (tt) {
            if ((ymax <= ymin) && (xmax <= xmin)) {
                tt.style.setProperty('opacity', '0.3');
            }
            else {
                tt.style.removeProperty('opacity');
            }
        }
    }
}
exports.EditorControl = EditorControl;
//# sourceMappingURL=data:application/json;base64,