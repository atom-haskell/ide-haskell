"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const utils_1 = require("../utils");
const element_listener_1 = require("./element-listener");
const tooltip_manager_1 = require("./tooltip-manager");
const marker_manager_1 = require("./marker-manager");
class EditorControl {
    constructor(editor, results) {
        this.editor = editor;
        this.disposables = new atom_1.CompositeDisposable();
        this.disposables.add(this.emitter = new atom_1.Emitter());
        this.tooltips = new tooltip_manager_1.TooltipManager(this.editor);
        this.disposables.add(this.tooltips);
        this.markers = new marker_manager_1.MarkerManager(this.editor, results);
        this.disposables.add(this.markers);
        this.editorElement = atom.views.getView(this.editor);
        if (atom.config.get('ide-haskell.messageDisplayFrontend') === 'builtin') {
            this.registerGutterEvents();
        }
        const buffer = this.editor.getBuffer();
        this.disposables.add(buffer.onWillSave(() => this.emitter.emit('will-save-buffer', buffer)));
        this.disposables.add(buffer.onDidSave(() => this.emitter.emit('did-save-buffer', buffer)));
        this.disposables.add(this.editor.onDidStopChanging(() => this.emitter.emit('did-stop-changing', this.editor)));
        this.disposables.add(this.editorElement.onDidChangeScrollLeft(() => this.tooltips.hide({ type: 'mouse' })));
        this.disposables.add(this.editorElement.onDidChangeScrollTop(() => this.tooltips.hide({ type: 'mouse' })));
        this.disposables.add(element_listener_1.listen(this.editorElement, 'mousemove', '.scroll-view', this.trackMouseBufferPosition.bind(this)));
        this.disposables.add(element_listener_1.listen(this.editorElement, 'mouseout', '.scroll-view', this.stopTrackingMouseBufferPosition.bind(this)));
        this.disposables.add(this.editor.onDidChangeSelectionRange(this.trackSelection.bind(this)));
    }
    deactivate() {
        if (this.exprTypeTimeout) {
            clearTimeout(this.exprTypeTimeout);
        }
        if (this.selTimeout) {
            clearTimeout(this.selTimeout);
        }
        this.disposables.dispose();
        this.lastMouseBufferPt = undefined;
    }
    onShouldShowTooltip(callback) {
        return this.emitter.on('should-show-tooltip', callback);
    }
    onWillSaveBuffer(callback) {
        return this.emitter.on('will-save-buffer', callback);
    }
    onDidSaveBuffer(callback) {
        return this.emitter.on('did-save-buffer', callback);
    }
    onDidStopChanging(callback) {
        return this.emitter.on('did-stop-changing', callback);
    }
    shouldShowTooltip(pos, type) {
        if (!type) {
            type = 'mouse';
        }
        if ((type === 'mouse' || type === 'keyboard') && this.showCheckResult(pos, type)) {
            return;
        }
        if ((pos.row < 0) ||
            (pos.row >= this.editor.getLineCount()) ||
            pos.isEqual(this.editor.bufferRangeForBufferRow(pos.row).end)) {
            this.tooltips.hide({ type, subtype: 'external' });
        }
        else if (this.rangeHasChanged(pos, type)) {
            this.emitter.emit('should-show-tooltip', {
                editor: this.editor,
                pos,
                type
            });
        }
    }
    rangeHasChanged(pos, eventType) {
        const newrange = this.getEventRange(pos, eventType).crange;
        const isFirstIteration = !(this.lastMouseBufferRangeTest && this.lastMouseBufferPtTest);
        const isSameToken = () => {
            if (!(this.lastMouseBufferRangeTest && this.lastMouseBufferPtTest)) {
                return false;
            }
            const rangesAreEmpty = this.lastMouseBufferRangeTest.isEmpty() && newrange.isEmpty();
            const isSameRow = this.lastMouseBufferPtTest.row === pos.row;
            if (!rangesAreEmpty || !isSameRow) {
                return false;
            }
            const tl = this.editor.tokenizedBuffer.tokenizedLineForRow(this.lastMouseBufferPtTest.row);
            const oldtokid = tl.tokenIndexAtBufferColumn(this.lastMouseBufferPtTest
                .column);
            const newtokid = tl.tokenIndexAtBufferColumn(pos.column);
            return oldtokid === newtokid;
        };
        const result = isFirstIteration || !(this.lastMouseBufferRangeTest.isEqual(newrange) || isSameToken());
        this.lastMouseBufferPtTest = pos;
        this.lastMouseBufferRangeTest = newrange;
        return result;
    }
    getEventRange(pos, eventType) {
        let crange;
        switch (eventType) {
            case 'mouse':
            case 'context':
                if (!pos) {
                    pos = this.lastMouseBufferPt;
                }
                const [selRange] = Array.from(this.editor.getSelections()
                    .map((sel) => sel.getBufferRange()).filter((sel) => sel.containsPoint(pos)));
                crange = selRange || new atom_1.Range(pos, pos);
                break;
            case 'keyboard':
            case 'selection':
                crange = this.editor.getLastSelection().getBufferRange();
                pos = crange.start;
                break;
            default:
                throw new Error(`unknown event type ${eventType}`);
        }
        const ppos = pos;
        return {
            crange, pos: ppos, eventType
        };
    }
    showCheckResult(pos, type) {
        const checkMessage = this.markers.getMessageAt(pos, type);
        let evt;
        if (type === 'gutter') {
            evt = 'mouse';
        }
        else {
            evt = type;
        }
        if (checkMessage.length > 0) {
            this.tooltips.show(new atom_1.Range(pos, pos), checkMessage, { type: evt, subtype: 'check-result' });
            return true;
        }
        else {
            this.tooltips.hide({ type: evt, subtype: 'check-result' });
            return false;
        }
    }
    registerGutterEvents() {
        const gutterElement = atom.views.getView(this.markers.gutter);
        this.disposables.add(element_listener_1.listen(gutterElement, 'mouseover', '.decoration', (e) => {
            const bufferPt = utils_1.bufferPositionFromMouseEvent(this.editor, e);
            if (bufferPt) {
                this.lastMouseBufferPt = bufferPt;
                this.showCheckResult(bufferPt, 'gutter');
            }
        }));
        this.disposables.add(element_listener_1.listen(gutterElement, 'mouseout', '.decoration', (e) => this.tooltips.hide({ type: 'mouse', subtype: 'check-result' })));
    }
    trackMouseBufferPosition(e) {
        const bufferPt = utils_1.bufferPositionFromMouseEvent(this.editor, e);
        if (!bufferPt) {
            return;
        }
        if (this.lastMouseBufferPt && this.lastMouseBufferPt.isEqual(bufferPt)) {
            return;
        }
        this.lastMouseBufferPt = bufferPt;
        if (this.exprTypeTimeout) {
            clearTimeout(this.exprTypeTimeout);
        }
        this.exprTypeTimeout = setTimeout(() => bufferPt && this.shouldShowTooltip(bufferPt), atom.config.get('ide-haskell.expressionTypeInterval'));
    }
    stopTrackingMouseBufferPosition(e) {
        if (this.exprTypeTimeout) {
            return clearTimeout(this.exprTypeTimeout);
        }
    }
    trackSelection({ newBufferRange }) {
        this.handleCursorUnderTooltip(newBufferRange);
        if (this.selTimeout) {
            clearTimeout(this.selTimeout);
        }
        if (newBufferRange.isEmpty()) {
            this.tooltips.hide({ type: 'selection' });
            switch (atom.config.get('ide-haskell.onCursorMove')) {
                case 'Show Tooltip':
                    if (this.exprTypeTimeout) {
                        clearTimeout(this.exprTypeTimeout);
                    }
                    if (!this.showCheckResult(newBufferRange.start, 'keyboard')) {
                        return this.tooltips.hide({ persistOnCursorMove: false });
                    }
                    break;
                case 'Hide Tooltip':
                    if (this.exprTypeTimeout) {
                        clearTimeout(this.exprTypeTimeout);
                    }
                    return this.tooltips.hide({ persistOnCursorMove: false });
                default:
            }
        }
        else {
            this.selTimeout = setTimeout(() => this.shouldShowTooltip(newBufferRange.start, 'selection'), atom.config.get('ide-haskell.expressionTypeInterval'));
        }
    }
    handleCursorUnderTooltip(currentRange) {
        const tooltipElement = document.querySelector('ide-haskell-tooltip');
        if (tooltipElement) {
            const slcl = this.editorElement.pixelRectForScreenRange(this.editor.screenRangeForBufferRange(currentRange));
            const eecl = this.editorElement.querySelector('.scroll-view').getBoundingClientRect();
            const ttcl = tooltipElement.getBoundingClientRect();
            const ttcld = tooltipElement.querySelector('div').getBoundingClientRect();
            const ttbox = {
                left: ttcl.left - eecl.left,
                top: ttcld.top - eecl.top,
                width: ttcl.width,
                height: ttcld.height
            };
            const xmax = Math.round(Math.max(ttbox.left, slcl.left));
            const xmin = Math.round(Math.min(ttbox.left + ttbox.width, slcl.left +
                slcl.width));
            const ymax = Math.round(Math.max(ttbox.top, slcl.top));
            const ymin = Math.round(Math.min(ttbox.top + ttbox.height, slcl.top +
                slcl.height));
            const tt = document.querySelector('ide-haskell-tooltip');
            if (tt) {
                if ((ymax <= ymin) && (xmax <= xmin)) {
                    tt.style.setProperty('opacity', '0.3');
                }
                else {
                    tt.style.removeProperty('opacity');
                }
            }
        }
    }
}
exports.EditorControl = EditorControl;
//# sourceMappingURL=data:application/json;base64,