"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function strEnum(o) {
    return o.reduce((res, key) => {
        res[key] = key;
        return res;
    }, Object.create(null));
}
exports.TEventRangeType = strEnum([
    'keyboard', 'context', 'mouse', 'selection', 'gutter'
]);
function isTEventRangeType(x) {
    return typeof x === 'string' && Object.keys(exports.TEventRangeType).includes(x);
}
exports.isTEventRangeType = isTEventRangeType;
class EventTable {
    constructor(editor, groups) {
        this.editor = editor;
        this.table = Object.create(null);
        for (const i of this.keys()) {
            this.table[i] = new Map();
        }
        this.layers = new Set();
        for (const i of groups) {
            const layer = this.editor.addMarkerLayer();
            this.layers.add(layer);
            for (const { type, source } of i) {
                this.table[type].set(source, layer);
            }
        }
    }
    destroy() {
        for (const i of this.layers.values()) {
            i.destroy();
        }
        for (const i of this.values()) {
            i.clear();
        }
    }
    get(type, source) {
        let res = this.table[type].get(source);
        if (!res) {
            res = this.table[type].get(undefined);
        }
        if (!res) {
            throw new Error(`Failed to classify ${type}:${source}`);
        }
        return res;
    }
    clear() {
        for (const i of this.layers.values()) {
            i.clear();
        }
    }
    getMarkerCount() {
        let count = 0;
        for (const i of this.layers.values()) {
            count += i.getMarkerCount();
        }
        return count;
    }
    keys() {
        return Object.keys(exports.TEventRangeType);
    }
    *values() {
        for (const i of this.keys()) {
            yield this.table[i];
        }
    }
    *entries() {
        for (const i of this.keys()) {
            yield [i, this.table[i]];
        }
    }
}
exports.EventTable = EventTable;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtdGFibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZWRpdG9yLWNvbnRyb2wvZXZlbnQtdGFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFLQSxpQkFBb0MsQ0FBTTtJQUN4QyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FDYixDQUFDLEdBQUcsRUFBRSxHQUFHO1FBQ1AsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQTtRQUNkLE1BQU0sQ0FBQyxHQUFHLENBQUE7SUFDWixDQUFDLEVBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FDcEIsQ0FBQTtBQUNILENBQUM7QUFHWSxRQUFBLGVBQWUsR0FBRyxPQUFPLENBQUM7SUFDckMsVUFBVSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFFBQVE7Q0FDdEQsQ0FBQyxDQUFBO0FBRUYsMkJBQW1DLENBQU07SUFDdkMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLFFBQVEsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLHVCQUFlLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDMUUsQ0FBQztBQUZELDhDQUVDO0FBS0Q7SUFLRSxZQUFxQixNQUFrQixFQUFFLE1BQXNCO1FBQTFDLFdBQU0sR0FBTixNQUFNLENBQVk7UUFFckMsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ2hDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDNUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFBO1FBQzNCLENBQUM7UUFDRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7UUFDdkIsR0FBRyxDQUFDLENB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eWVyXG59IGZyb20gJ2F0b20nXG5cbi8qKiBVdGlsaXR5IGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIEs6ViBmcm9tIGEgbGlzdCBvZiBzdHJpbmdzICovXG5mdW5jdGlvbiBzdHJFbnVtPFQgZXh0ZW5kcyBzdHJpbmc+IChvOiBUW10pOiB7W0sgaW4gVF06IEt9IHtcbiAgcmV0dXJuIG8ucmVkdWNlKFxuICAgIChyZXMsIGtleSkgPT4ge1xuICAgICAgcmVzW2tleV0gPSBrZXlcbiAgICAgIHJldHVybiByZXNcbiAgICB9LFxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1udWxsLWtleXdvcmRcbiAgICBPYmplY3QuY3JlYXRlKG51bGwpXG4gIClcbn1cblxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnZhcmlhYmxlLW5hbWVcbmV4cG9ydCBjb25zdCBURXZlbnRSYW5nZVR5cGUgPSBzdHJFbnVtKFtcbiAgJ2tleWJvYXJkJywgJ2NvbnRleHQnLCAnbW91c2UnLCAnc2VsZWN0aW9uJywgJ2d1dHRlcidcbl0pXG5cbmV4cG9ydCBmdW5jdGlvbiBpc1RFdmVudFJhbmdlVHlwZSAoeDogYW55KTogeCBpcyBURXZlbnRSYW5nZVR5cGUge1xuICByZXR1cm4gdHlwZW9mIHggPT09ICdzdHJpbmcnICYmIE9iamVjdC5rZXlzKFRFdmVudFJhbmdlVHlwZSkuaW5jbHVkZXMoeClcbn1cblxuZXhwb3J0IHR5cGUgVEV2ZW50UmFuZ2VUeXBlID0ga2V5b2YgdHlwZW9mIFRFdmVudFJhbmdlVHlwZVxuZXhwb3J0IHR5cGUgSU1hcmtlckdyb3VwID0gQXJyYXk8e3R5cGU6IFRFdmVudFJhbmdlVHlwZSwgc291cmNlPzogc3RyaW5nfT5cblxuZXhwb3J0IGNsYXNzIEV2ZW50VGFibGUge1xuICBwcml2YXRlIHRhYmxlOiB7XG4gICAgW0sgaW4gVEV2ZW50UmFuZ2VUeXBlXTogTWFwPHN0cmluZyB8IHVuZGVmaW5lZCwgRGlzcGxheU1hcmtlckxheWVyPlxuICB9XG4gIHByaXZhdGUgbGF5ZXJzOiBTZXQ8RGlzcGxheU1hcmtlckxheWVyPlxuICBjb25zdHJ1Y3RvciAocHJpdmF0ZSBlZGl0b3I6IFRleHRFZGl0b3IsIGdyb3VwczogSU1hcmtlckdyb3VwW10pIHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tbnVsbC1rZXl3b3JkXG4gICAgdGhpcy50YWJsZSA9IE9iamVjdC5jcmVhdGUobnVsbClcbiAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy5rZXlzKCkpIHtcbiAgICAgIHRoaXMudGFibGVbaV0gPSBuZXcgTWFwKClcbiAgICB9XG4gICAgdGhpcy5sYXllcnMgPSBuZXcgU2V0KClcbiAgICBmb3IgKGNvbnN0IGkgb2YgZ3JvdXBzKSB7XG4gICAgICBjb25zdCBsYXllciA9IHRoaXMuZWRpdG9yLmFkZE1hcmtlckxheWVyKClcbiAgICAgIHRoaXMubGF5ZXJzLmFkZChsYXllcilcbiAgICAgIGZvciAoY29uc3Qge3R5cGUsIHNvdXJjZX0gb2YgaSkge1xuICAgICAgICB0aGlzLnRhYmxlW3R5cGVdLnNldChzb3VyY2UsIGxheWVyKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBkZXN0cm95ICgpIHtcbiAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy5sYXllcnMudmFsdWVzKCkpIHtcbiAgICAgIGkuZGVzdHJveSgpXG4gICAgfVxuICAgIGZvciAoY29uc3QgaSBvZiB0aGlzLnZhbHVlcygpKSB7XG4gICAgICBpLmNsZWFyKClcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZ2V0ICh0eXBlOiBURXZlbnRSYW5nZVR5cGUsIHNvdXJjZT86IHN0cmluZykge1xuICAgIGxldCByZXMgPSB0aGlzLnRhYmxlW3R5cGVdLmdldChzb3VyY2UpXG4gICAgaWYgKCFyZXMpIHtcbiAgICAgIHJlcyA9IHRoaXMudGFibGVbdHlwZV0uZ2V0KHVuZGVmaW5lZClcbiAgICB9XG4gICAgaWYgKCFyZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGNsYXNzaWZ5ICR7dHlwZX06JHtzb3VyY2V9YClcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG5cbiAgcHVibGljIGNsZWFyICgpIHtcbiAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy5sYXllcnMudmFsdWVzKCkpIHtcbiAgICAgIGkuY2xlYXIoKVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBnZXRNYXJrZXJDb3VudCAoKSB7XG4gICAgbGV0IGNvdW50ID0gMFxuICAgIGZvciAoY29uc3QgaSBvZiB0aGlzLmxheWVycy52YWx1ZXMoKSkge1xuICAgICAgY291bnQgKz0gaS5nZXRNYXJrZXJDb3VudCgpXG4gICAgfVxuICAgIHJldHVybiBjb3VudFxuICB9XG5cbiAgcHVibGljIGtleXMgKCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhURXZlbnRSYW5nZVR5cGUpXG4gIH1cblxuICBwdWJsaWMgKiB2YWx1ZXMgKCkge1xuICAgIGZvciAoY29uc3QgaSBvZiB0aGlzLmtleXMoKSl7XG4gICAgICB5aWVsZCB0aGlzLnRhYmxlW2ldXG4gICAgfVxuICB9XG5cbiAgcHVibGljICogZW50cmllcyAoKSB7XG4gICAgZm9yIChjb25zdCBpIG9mIHRoaXMua2V5cygpKXtcbiAgICAgIHlpZWxkIFtpLCB0aGlzLnRhYmxlW2ldXVxuICAgIH1cbiAgfVxufVxuIl19