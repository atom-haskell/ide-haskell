"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function strEnum(o) {
    return o.reduce((res, key) => {
        res[key] = key;
        return res;
    }, Object.create(null));
}
exports.TEventRangeType = strEnum([
    'keyboard', 'context', 'mouse', 'selection', 'gutter'
]);
class EventTable {
    constructor(editor, groups) {
        this.editor = editor;
        this.table = Object.create(null);
        for (const i of this.keys()) {
            this.table[i] = new Map();
        }
        this.layers = new Set();
        for (const i of groups) {
            const layer = this.editor.addMarkerLayer();
            this.layers.add(layer);
            for (const { type, source } of i) {
                this.table[type].set(source, layer);
            }
        }
    }
    destroy() {
        for (const i of this.layers.values()) {
            i.destroy();
        }
        for (const i of this.values()) {
            i.clear();
        }
    }
    get(type, source) {
        let res = this.table[type].get(source);
        if (!res) {
            res = this.table[type].get(undefined);
        }
        if (!res) {
            throw new Error(`Failed to classify ${type}:${source}`);
        }
        return res;
    }
    clear() {
        for (const i of this.layers.values()) {
            i.clear();
        }
    }
    getMarkerCount() {
        let count = 0;
        for (const i of this.layers.values()) {
            count += i.getMarkerCount();
        }
        return count;
    }
    keys() {
        return Object.keys(exports.TEventRangeType);
    }
    *values() {
        for (const i of this.keys()) {
            yield this.table[i];
        }
    }
    *entries() {
        for (const i of this.keys()) {
            yield [i, this.table[i]];
        }
    }
}
exports.EventTable = EventTable;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtdGFibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZWRpdG9yLWNvbnRyb2wvZXZlbnQtdGFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFLQSxpQkFBb0MsQ0FBTTtJQUN4QyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FDYixDQUFDLEdBQUcsRUFBRSxHQUFHO1FBQ1AsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQTtRQUNkLE1BQU0sQ0FBQyxHQUFHLENBQUE7SUFDWixDQUFDLEVBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FDcEIsQ0FBQTtBQUNILENBQUM7QUFHWSxRQUFBLGVBQWUsR0FBRyxPQUFPLENBQUM7SUFDckMsVUFBVSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFFBQVE7Q0FDdEQsQ0FBQyxDQUFBO0FBS0Y7SUFLRSxZQUFxQixNQUFrQixFQUFFLE1BQXNCO1FBQTFDLFdBQU0sR0FBTixNQUFNLENBQVk7UUFFckMsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ2hDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDNUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFBO1FBQzNCLENBQUM7UUFDRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7UUFDdkIsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQztZQUN2QixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFBO1lBQzFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFBO1lBQ3RCLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDL0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFBO1lBQ3JDLENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUVNLE9BQU87UUFDWixHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNyQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUE7UUFDYixDQUFDO1FBQ0QsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztZQUM5QixDQUFDLENBQUMsS0FBSyxFQUFFLENBQUE7UUFDWCxDQUFDO0lBQ0gsQ0FBQztJQUVNLEdBQUcsQ0FBRSxJQUFxQixFQUFFLE1BQWU7UUFDaEQsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDdEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ1QsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ3ZDLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDVCxNQUFNLElBQUksS0FBSyxDQUFDLHNCQUFzQixJQUFJLElBQUksTUFBTSxFQUFFLENBQUMsQ0FBQTtRQUN6RCxDQUFDO1FBQ0QsTUFBTSxDQUFDLEdBQUcsQ0FBQTtJQUNaLENBQUM7SUFFTSxLQUFLO1FBQ1YsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDckMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ1gsQ0FBQztJQUNILENBQUM7SUFFTSxjQUFjO1FBQ25CLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQTtRQUNiLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3JDLEtBQUssSUFBSSxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUE7UUFDN0IsQ0FBQztRQUNELE1BQU0sQ0FBQyxLQUFLLENBQUE7SUFDZCxDQUFDO0lBRU0sSUFBSTtRQUNULE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHVCQUFlLENBQUMsQ0FBQTtJQUNyQyxDQUFDO0lBRUQsQ0FBUyxNQUFNO1FBQ2IsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUEsQ0FBQztZQUMzQixNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDckIsQ0FBQztJQUNILENBQUM7SUFFRCxDQUFTLE9BQU87UUFDZCxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQSxDQUFDO1lBQzNCLE1BQU0sQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQzFCLENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUF0RUQsZ0NBc0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgVGV4dEVkaXRvciwgRGlzcGxheU1hcmtlckxheWVyXG59IGZyb20gJ2F0b20nXG5cbi8qKiBVdGlsaXR5IGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIEs6ViBmcm9tIGEgbGlzdCBvZiBzdHJpbmdzICovXG5mdW5jdGlvbiBzdHJFbnVtPFQgZXh0ZW5kcyBzdHJpbmc+IChvOiBUW10pOiB7W0sgaW4gVF06IEt9IHtcbiAgcmV0dXJuIG8ucmVkdWNlKFxuICAgIChyZXMsIGtleSkgPT4ge1xuICAgICAgcmVzW2tleV0gPSBrZXlcbiAgICAgIHJldHVybiByZXNcbiAgICB9LFxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1udWxsLWtleXdvcmRcbiAgICBPYmplY3QuY3JlYXRlKG51bGwpXG4gIClcbn1cblxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnZhcmlhYmxlLW5hbWVcbmV4cG9ydCBjb25zdCBURXZlbnRSYW5nZVR5cGUgPSBzdHJFbnVtKFtcbiAgJ2tleWJvYXJkJywgJ2NvbnRleHQnLCAnbW91c2UnLCAnc2VsZWN0aW9uJywgJ2d1dHRlcidcbl0pXG5cbmV4cG9ydCB0eXBlIFRFdmVudFJhbmdlVHlwZSA9IGtleW9mIHR5cGVvZiBURXZlbnRSYW5nZVR5cGVcbmV4cG9ydCB0eXBlIElNYXJrZXJHcm91cCA9IEFycmF5PHt0eXBlOiBURXZlbnRSYW5nZVR5cGUsIHNvdXJjZT86IHN0cmluZ30+XG5cbmV4cG9ydCBjbGFzcyBFdmVudFRhYmxlIHtcbiAgcHJpdmF0ZSB0YWJsZToge1xuICAgIFtLIGluIFRFdmVudFJhbmdlVHlwZV06IE1hcDxzdHJpbmcgfCB1bmRlZmluZWQsIERpc3BsYXlNYXJrZXJMYXllcj5cbiAgfVxuICBwcml2YXRlIGxheWVyczogU2V0PERpc3BsYXlNYXJrZXJMYXllcj5cbiAgY29uc3RydWN0b3IgKHByaXZhdGUgZWRpdG9yOiBUZXh0RWRpdG9yLCBncm91cHM6IElNYXJrZXJHcm91cFtdKSB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLW51bGwta2V5d29yZFxuICAgIHRoaXMudGFibGUgPSBPYmplY3QuY3JlYXRlKG51bGwpXG4gICAgZm9yIChjb25zdCBpIG9mIHRoaXMua2V5cygpKSB7XG4gICAgICB0aGlzLnRhYmxlW2ldID0gbmV3IE1hcCgpXG4gICAgfVxuICAgIHRoaXMubGF5ZXJzID0gbmV3IFNldCgpXG4gICAgZm9yIChjb25zdCBpIG9mIGdyb3Vwcykge1xuICAgICAgY29uc3QgbGF5ZXIgPSB0aGlzLmVkaXRvci5hZGRNYXJrZXJMYXllcigpXG4gICAgICB0aGlzLmxheWVycy5hZGQobGF5ZXIpXG4gICAgICBmb3IgKGNvbnN0IHt0eXBlLCBzb3VyY2V9IG9mIGkpIHtcbiAgICAgICAgdGhpcy50YWJsZVt0eXBlXS5zZXQoc291cmNlLCBsYXllcilcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZGVzdHJveSAoKSB7XG4gICAgZm9yIChjb25zdCBpIG9mIHRoaXMubGF5ZXJzLnZhbHVlcygpKSB7XG4gICAgICBpLmRlc3Ryb3koKVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy52YWx1ZXMoKSkge1xuICAgICAgaS5jbGVhcigpXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldCAodHlwZTogVEV2ZW50UmFuZ2VUeXBlLCBzb3VyY2U/OiBzdHJpbmcpIHtcbiAgICBsZXQgcmVzID0gdGhpcy50YWJsZVt0eXBlXS5nZXQoc291cmNlKVxuICAgIGlmICghcmVzKSB7XG4gICAgICByZXMgPSB0aGlzLnRhYmxlW3R5cGVdLmdldCh1bmRlZmluZWQpXG4gICAgfVxuICAgIGlmICghcmVzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBjbGFzc2lmeSAke3R5cGV9OiR7c291cmNlfWApXG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfVxuXG4gIHB1YmxpYyBjbGVhciAoKSB7XG4gICAgZm9yIChjb25zdCBpIG9mIHRoaXMubGF5ZXJzLnZhbHVlcygpKSB7XG4gICAgICBpLmNsZWFyKClcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZ2V0TWFya2VyQ291bnQgKCkge1xuICAgIGxldCBjb3VudCA9IDBcbiAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy5sYXllcnMudmFsdWVzKCkpIHtcbiAgICAgIGNvdW50ICs9IGkuZ2V0TWFya2VyQ291bnQoKVxuICAgIH1cbiAgICByZXR1cm4gY291bnRcbiAgfVxuXG4gIHB1YmxpYyBrZXlzICgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoVEV2ZW50UmFuZ2VUeXBlKVxuICB9XG5cbiAgcHVibGljICogdmFsdWVzICgpIHtcbiAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy5rZXlzKCkpe1xuICAgICAgeWllbGQgdGhpcy50YWJsZVtpXVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyAqIGVudHJpZXMgKCkge1xuICAgIGZvciAoY29uc3QgaSBvZiB0aGlzLmtleXMoKSl7XG4gICAgICB5aWVsZCBbaSwgdGhpcy50YWJsZVtpXV1cbiAgICB9XG4gIH1cbn1cbiJdfQ==