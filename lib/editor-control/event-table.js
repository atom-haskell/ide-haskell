"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function strEnum(o) {
    return o.reduce((res, key) => {
        res[key] = key;
        return res;
    }, Object.create(null));
}
exports.TEventRangeType = strEnum([
    'keyboard', 'context', 'mouse', 'selection'
]);
function isTEventRangeType(x) {
    return typeof x === 'string' && Object.keys(exports.TEventRangeType).includes(x);
}
exports.isTEventRangeType = isTEventRangeType;
class EventTable {
    constructor(editor, groups) {
        this.editor = editor;
        this.table = Object.create(null);
        for (const i of this.keys()) {
            this.table[i] = new Map();
        }
        this.layers = new Set();
        for (const i of groups) {
            const layer = this.editor.addMarkerLayer();
            this.layers.add(layer);
            for (const { type, source } of i) {
                this.table[type].set(source, layer);
            }
        }
    }
    destroy() {
        for (const i of this.layers.values()) {
            i.destroy();
        }
        for (const i of this.values()) {
            i.clear();
        }
    }
    get(type, source) {
        let res = this.table[type].get(source);
        if (!res) {
            res = this.table[type].get(undefined);
        }
        if (!res) {
            throw new Error(`Failed to classify ${type}:${source}`);
        }
        return res;
    }
    clear() {
        for (const i of this.layers.values()) {
            i.clear();
        }
    }
    getMarkerCount() {
        let count = 0;
        for (const i of this.layers.values()) {
            count += i.getMarkerCount();
        }
        return count;
    }
    keys() {
        return Object.keys(exports.TEventRangeType);
    }
    *values() {
        for (const i of this.keys()) {
            yield this.table[i];
        }
    }
    *entries() {
        for (const i of this.keys()) {
            yield [i, this.table[i]];
        }
    }
}
exports.EventTable = EventTable;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtdGFibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZWRpdG9yLWNvbnRyb2wvZXZlbnQtdGFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFLQSxpQkFBb0MsQ0FBTTtJQUN4QyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FDYixDQUFDLEdBQUcsRUFBRSxHQUFHO1FBQ1AsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQTtRQUNkLE1BQU0sQ0FBQyxHQUFHLENBQUE7SUFDWixDQUFDLEVBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FDcEIsQ0FBQTtBQUNILENBQUM7QUFHWSxRQUFBLGVBQWUsR0FBRyxPQUFPLENBQUM7SUFDckMsVUFBVSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsV0FBVztDQUM1QyxDQUFDLENBQUE7QUFFRiwyQkFBbUMsQ0FBUztJQUMxQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssUUFBUSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsdUJBQWUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUMxRSxDQUFDO0FBRkQsOENBRUM7QUFLRDtJQUtFLFlBQXFCLE1BQWtCLEVBQUUsTUFBc0I7UUFBMUMsV0FBTSxHQUFOLE1BQU0sQ0FBWTtRQUVyQyxJQUFJLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDaEMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztZQUM1QixJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7UUFDM0IsQ0FBQztRQUNELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQTtRQUN2QixHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUE7WUFDMUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUE7WUFDdEIsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFDLElBQUksRUFBRSxNQUFNLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMvQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUE7WUFDckMsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0lBRU0sT0FBTztRQUNaLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3JDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUNiLENBQUM7UUFDRCxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzlCLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUNYLENBQUM7SUFDSCxDQUFDO0lBRU0sR0FBRyxDQUFFLElBQXFCLEVBQUUsTUFBZTtRQUNoRCxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUN0QyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDVCxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUE7UUFDdkMsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNULE1BQU0sSUFBSSxLQUFLLENBQUMsc0JBQXNCLElBQUksSUFBSSxNQUFNLEVBQUUsQ0FBQyxDQUFBO1FBQ3pELENBQUM7UUFDRCxNQUFNLENBQUMsR0FBRyxDQUFBO0lBQ1osQ0FBQztJQUVNLEtBQUs7UUFDVixHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNyQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUE7UUFDWCxDQUFDO0lBQ0gsQ0FBQztJQUVNLGNBQWM7UUFDbkIsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFBO1FBQ2IsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDckMsS0FBSyxJQUFJLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQTtRQUM3QixDQUFDO1FBQ0QsTUFBTSxDQUFDLEtBQUssQ0FBQTtJQUNkLENBQUM7SUFFTSxJQUFJO1FBQ1QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsdUJBQWUsQ0FBQyxDQUFBO0lBQ3JDLENBQUM7SUFFRCxDQUFTLE1BQU07UUFDYixHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQSxDQUFDO1lBQzNCLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNyQixDQUFDO0lBQ0gsQ0FBQztJQUVELENBQVMsT0FBTztRQUNkLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFBLENBQUM7WUFDM0IsTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDMUIsQ0FBQztJQUNILENBQUM7Q0FDRjtBQXRFRCxnQ0FzRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBUZXh0RWRpdG9yLCBEaXNwbGF5TWFya2VyTGF5ZXJcbn0gZnJvbSAnYXRvbSdcblxuLyoqIFV0aWxpdHkgZnVuY3Rpb24gdG8gY3JlYXRlIGEgSzpWIGZyb20gYSBsaXN0IG9mIHN0cmluZ3MgKi9cbmZ1bmN0aW9uIHN0ckVudW08VCBleHRlbmRzIHN0cmluZz4gKG86IFRbXSk6IHtbSyBpbiBUXTogS30ge1xuICByZXR1cm4gby5yZWR1Y2UoXG4gICAgKHJlcywga2V5KSA9PiB7XG4gICAgICByZXNba2V5XSA9IGtleVxuICAgICAgcmV0dXJuIHJlc1xuICAgIH0sXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLW51bGwta2V5d29yZFxuICAgIE9iamVjdC5jcmVhdGUobnVsbClcbiAgKVxufVxuXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dmFyaWFibGUtbmFtZVxuZXhwb3J0IGNvbnN0IFRFdmVudFJhbmdlVHlwZSA9IHN0ckVudW0oW1xuICAna2V5Ym9hcmQnLCAnY29udGV4dCcsICdtb3VzZScsICdzZWxlY3Rpb24nXG5dKVxuXG5leHBvcnQgZnVuY3Rpb24gaXNURXZlbnRSYW5nZVR5cGUgKHg6IE9iamVjdCk6IHggaXMgVEV2ZW50UmFuZ2VUeXBlIHtcbiAgcmV0dXJuIHR5cGVvZiB4ID09PSAnc3RyaW5nJyAmJiBPYmplY3Qua2V5cyhURXZlbnRSYW5nZVR5cGUpLmluY2x1ZGVzKHgpXG59XG5cbmV4cG9ydCB0eXBlIFRFdmVudFJhbmdlVHlwZSA9IGtleW9mIHR5cGVvZiBURXZlbnRSYW5nZVR5cGVcbmV4cG9ydCB0eXBlIElNYXJrZXJHcm91cCA9IEFycmF5PHt0eXBlOiBURXZlbnRSYW5nZVR5cGUsIHNvdXJjZT86IHN0cmluZ30+XG5cbmV4cG9ydCBjbGFzcyBFdmVudFRhYmxlIHtcbiAgcHJpdmF0ZSB0YWJsZToge1xuICAgIFtLIGluIFRFdmVudFJhbmdlVHlwZV06IE1hcDxzdHJpbmcgfCB1bmRlZmluZWQsIERpc3BsYXlNYXJrZXJMYXllcj5cbiAgfVxuICBwcml2YXRlIGxheWVyczogU2V0PERpc3BsYXlNYXJrZXJMYXllcj5cbiAgY29uc3RydWN0b3IgKHByaXZhdGUgZWRpdG9yOiBUZXh0RWRpdG9yLCBncm91cHM6IElNYXJrZXJHcm91cFtdKSB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLW51bGwta2V5d29yZFxuICAgIHRoaXMudGFibGUgPSBPYmplY3QuY3JlYXRlKG51bGwpXG4gICAgZm9yIChjb25zdCBpIG9mIHRoaXMua2V5cygpKSB7XG4gICAgICB0aGlzLnRhYmxlW2ldID0gbmV3IE1hcCgpXG4gICAgfVxuICAgIHRoaXMubGF5ZXJzID0gbmV3IFNldCgpXG4gICAgZm9yIChjb25zdCBpIG9mIGdyb3Vwcykge1xuICAgICAgY29uc3QgbGF5ZXIgPSB0aGlzLmVkaXRvci5hZGRNYXJrZXJMYXllcigpXG4gICAgICB0aGlzLmxheWVycy5hZGQobGF5ZXIpXG4gICAgICBmb3IgKGNvbnN0IHt0eXBlLCBzb3VyY2V9IG9mIGkpIHtcbiAgICAgICAgdGhpcy50YWJsZVt0eXBlXS5zZXQoc291cmNlLCBsYXllcilcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZGVzdHJveSAoKSB7XG4gICAgZm9yIChjb25zdCBpIG9mIHRoaXMubGF5ZXJzLnZhbHVlcygpKSB7XG4gICAgICBpLmRlc3Ryb3koKVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy52YWx1ZXMoKSkge1xuICAgICAgaS5jbGVhcigpXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldCAodHlwZTogVEV2ZW50UmFuZ2VUeXBlLCBzb3VyY2U/OiBzdHJpbmcpIHtcbiAgICBsZXQgcmVzID0gdGhpcy50YWJsZVt0eXBlXS5nZXQoc291cmNlKVxuICAgIGlmICghcmVzKSB7XG4gICAgICByZXMgPSB0aGlzLnRhYmxlW3R5cGVdLmdldCh1bmRlZmluZWQpXG4gICAgfVxuICAgIGlmICghcmVzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBjbGFzc2lmeSAke3R5cGV9OiR7c291cmNlfWApXG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfVxuXG4gIHB1YmxpYyBjbGVhciAoKSB7XG4gICAgZm9yIChjb25zdCBpIG9mIHRoaXMubGF5ZXJzLnZhbHVlcygpKSB7XG4gICAgICBpLmNsZWFyKClcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZ2V0TWFya2VyQ291bnQgKCkge1xuICAgIGxldCBjb3VudCA9IDBcbiAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy5sYXllcnMudmFsdWVzKCkpIHtcbiAgICAgIGNvdW50ICs9IGkuZ2V0TWFya2VyQ291bnQoKVxuICAgIH1cbiAgICByZXR1cm4gY291bnRcbiAgfVxuXG4gIHB1YmxpYyBrZXlzICgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoVEV2ZW50UmFuZ2VUeXBlKVxuICB9XG5cbiAgcHVibGljICogdmFsdWVzICgpIHtcbiAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy5rZXlzKCkpe1xuICAgICAgeWllbGQgdGhpcy50YWJsZVtpXVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyAqIGVudHJpZXMgKCkge1xuICAgIGZvciAoY29uc3QgaSBvZiB0aGlzLmtleXMoKSl7XG4gICAgICB5aWVsZCBbaSwgdGhpcy50YWJsZVtpXV1cbiAgICB9XG4gIH1cbn1cbiJdfQ==