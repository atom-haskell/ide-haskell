"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tooltip_view_1 = require("./tooltip-view");
class TooltipManager {
    constructor(editor) {
        this.editor = editor;
        this.markers = this.editor.addMarkerLayer();
    }
    dispose() {
        this.markers.destroy();
        this.lastMouseBufferPt = undefined;
    }
    show(range, text, detail) {
        if (this.tooltipHighlightRange && range.isEqual(this.tooltipHighlightRange)) {
            return;
        }
        this.hide();
        if (detail.type === 'mouse') {
            if (this.lastMouseBufferPt && !range.containsPoint(this.lastMouseBufferPt)) {
                return;
            }
        }
        if (detail.type === 'selection') {
            const lastSel = this.editor.getLastSelection();
            if (!range.containsRange(lastSel.getBufferRange()) || !!lastSel.isEmpty()) {
                return;
            }
        }
        this.tooltipHighlightRange = range;
        const highlightMarker = this.markers.markBufferRange(range);
        highlightMarker.setProperties(detail);
        this.editor.decorateMarker(highlightMarker, {
            type: 'overlay',
            position: 'tail',
            item: new tooltip_view_1.TooltipMessage(text)
        });
        return this.editor.decorateMarker(highlightMarker, {
            type: 'highlight',
            class: 'ide-haskell-type'
        });
    }
    hide(template) {
        if (!template) {
            this.markers.clear();
            return;
        }
        this.tooltipHighlightRange = undefined;
        this.markers.findMarkers(template).forEach((m) => m.destroy());
    }
    has(template) {
        if (!template) {
            return this.markers.getMarkerCount() > 0;
        }
        return this.markers.findMarkers(template).length > 0;
    }
}
exports.TooltipManager = TooltipManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC1tYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2VkaXRvci1jb250cm9sL3Rvb2x0aXAtbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQU1BLGlEQUE2QztBQWU3QztJQUlFLFlBQW9CLE1BQWtCO1FBQWxCLFdBQU0sR0FBTixNQUFNLENBQVk7UUFDcEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFBO0lBQzdDLENBQUM7SUFFTSxPQUFPO1FBQ1osSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUN0QixJQUFJLENBQUMsaUJBQWlCLEdBQUcsU0FBUyxDQUFBO0lBQ3BDLENBQUM7SUFFRCxJQUFJLENBQ0YsS0FBWSxFQUFFLElBQXFDLEVBQ25ELE1BQXlCO1FBRXpCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1RSxNQUFNLENBQUE7UUFDUixDQUFDO1FBQ0QsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFBO1FBRVgsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQzVCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMzRSxNQUFNLENBQUE7WUFDUixDQUFDO1FBQ0gsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQztZQUNoQyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixFQUFFLENBQUE7WUFDOUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUMxRSxNQUFNLENBQUE7WUFDUixDQUFDO1FBQ0gsQ0FBQztRQUNELElBQUksQ0FBQyxxQkFBcUIsR0FBRyxLQUFLLENBQUE7UUFDbEMsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDM0QsZUFBZSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUNyQyxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxlQUFlLEVBQUU7WUFDMUMsSUFBSSxFQUFFLFNBQVM7WUFDZixRQUFRLEVBQUUsTUFBTTtZQUNoQixJQUFJLEVBQUUsSUFBSSw2QkFBYyxDQUFDLElBQUksQ0FBQztTQUMvQixDQUFDLENBQUE7UUFDRixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsZUFBZSxFQUFFO1lBQ2pELElBQUksRUFBRSxXQUFXO1lBQ2pCLEtBQUssRUFBRSxrQkFBa0I7U0FDMUIsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVELElBQUksQ0FBRSxRQUEwQjtRQUM5QixFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDZCxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFBO1lBQ3BCLE1BQU0sQ0FBQTtRQUNSLENBQUM7UUFDRCxJQUFJLENBQUMscUJBQXFCLEdBQUcsU0FBUyxDQUFBO1FBQ3RDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQTtJQUNoRSxDQUFDO0lBRUQsR0FBRyxDQUFFLFFBQTBCO1FBQzdCLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNkLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxHQUFHLENBQUMsQ0FBQTtRQUMxQyxDQUFDO1FBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUE7SUFDdEQsQ0FBQztDQUNGO0FBOURELHdDQThEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIFJhbmdlLCBFbWl0dGVyLCBUZXh0RWRpdG9yLCBQb2ludCwgQ29tcG9zaXRlRGlzcG9zYWJsZSwgR3V0dGVyLCBEaXNwbGF5TWFya2VyLCBUZXh0QnVmZmVyLFxuICBEaXNwbGF5TWFya2VyTGF5ZXJcbn0gZnJvbSAnYXRvbSdcblxuaW1wb3J0IHtSZXN1bHRJdGVtLCBUU2V2ZXJpdHl9IGZyb20gJy4uL3Jlc3VsdHMtZGInXG5pbXBvcnQge1Rvb2x0aXBNZXNzYWdlfSBmcm9tICcuL3Rvb2x0aXAtdmlldydcbmltcG9ydCB7VE1lc3NhZ2UsIE1lc3NhZ2VPYmplY3R9IGZyb20gJy4uL3V0aWxzJ1xuXG5leHBvcnQgdHlwZSBURXZlbnRSYW5nZVR5cGUgPSAna2V5Ym9hcmQnIHwgJ2NvbnRleHQnIHwgJ21vdXNlJyB8ICdzZWxlY3Rpb24nXG5leHBvcnQgaW50ZXJmYWNlIElNYXJrZXJQcm9wZXJ0aWVzIHtcbiAgdHlwZTogVEV2ZW50UmFuZ2VUeXBlXG4gIHN1YnR5cGU6ICdjaGVjay1yZXN1bHQnIHwgJ2V4dGVybmFsJ1xuICBwZXJzaXN0T25DdXJzb3JNb3ZlPzogYm9vbGVhblxufVxuZXhwb3J0IGludGVyZmFjZSBJTWFya2VyVGVtcGxhdGUge1xuICB0eXBlPzogVEV2ZW50UmFuZ2VUeXBlXG4gIHN1YnR5cGU/OiAnY2hlY2stcmVzdWx0JyB8ICdleHRlcm5hbCdcbiAgcGVyc2lzdE9uQ3Vyc29yTW92ZT86IGJvb2xlYW5cbn1cblxuZXhwb3J0IGNsYXNzIFRvb2x0aXBNYW5hZ2VyIHtcbiAgcHJpdmF0ZSB0b29sdGlwSGlnaGxpZ2h0UmFuZ2U/OiBSYW5nZVxuICBwcml2YXRlIGxhc3RNb3VzZUJ1ZmZlclB0PzogUG9pbnRcbiAgcHJpdmF0ZSBtYXJrZXJzOiBEaXNwbGF5TWFya2VyTGF5ZXJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlZGl0b3I6IFRleHRFZGl0b3IpIHtcbiAgICB0aGlzLm1hcmtlcnMgPSB0aGlzLmVkaXRvci5hZGRNYXJrZXJMYXllcigpXG4gIH1cblxuICBwdWJsaWMgZGlzcG9zZSAoKSB7XG4gICAgdGhpcy5tYXJrZXJzLmRlc3Ryb3koKVxuICAgIHRoaXMubGFzdE1vdXNlQnVmZmVyUHQgPSB1bmRlZmluZWRcbiAgfVxuXG4gIHNob3cgKFxuICAgIHJhbmdlOiBSYW5nZSwgdGV4dDogTWVzc2FnZU9iamVjdCB8IE1lc3NhZ2VPYmplY3RbXSxcbiAgICBkZXRhaWw6IElNYXJrZXJQcm9wZXJ0aWVzXG4gICkge1xuICAgIGlmICh0aGlzLnRvb2x0aXBIaWdobGlnaHRSYW5nZSAmJiByYW5nZS5pc0VxdWFsKHRoaXMudG9vbHRpcEhpZ2hsaWdodFJhbmdlKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHRoaXMuaGlkZSgpXG4gICAgICAvLyBleGl0IGlmIG1vdXNlIG1vdmVkIGF3YXlcbiAgICBpZiAoZGV0YWlsLnR5cGUgPT09ICdtb3VzZScpIHtcbiAgICAgIGlmICh0aGlzLmxhc3RNb3VzZUJ1ZmZlclB0ICYmICFyYW5nZS5jb250YWluc1BvaW50KHRoaXMubGFzdE1vdXNlQnVmZmVyUHQpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZGV0YWlsLnR5cGUgPT09ICdzZWxlY3Rpb24nKSB7XG4gICAgICBjb25zdCBsYXN0U2VsID0gdGhpcy5lZGl0b3IuZ2V0TGFzdFNlbGVjdGlvbigpXG4gICAgICBpZiAoIXJhbmdlLmNvbnRhaW5zUmFuZ2UobGFzdFNlbC5nZXRCdWZmZXJSYW5nZSgpKSB8fCAhIWxhc3RTZWwuaXNFbXB0eSgpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnRvb2x0aXBIaWdobGlnaHRSYW5nZSA9IHJhbmdlXG4gICAgY29uc3QgaGlnaGxpZ2h0TWFya2VyID0gdGhpcy5tYXJrZXJzLm1hcmtCdWZmZXJSYW5nZShyYW5nZSlcbiAgICBoaWdobGlnaHRNYXJrZXIuc2V0UHJvcGVydGllcyhkZXRhaWwpXG4gICAgdGhpcy5lZGl0b3IuZGVjb3JhdGVNYXJrZXIoaGlnaGxpZ2h0TWFya2VyLCB7XG4gICAgICB0eXBlOiAnb3ZlcmxheScsXG4gICAgICBwb3NpdGlvbjogJ3RhaWwnLFxuICAgICAgaXRlbTogbmV3IFRvb2x0aXBNZXNzYWdlKHRleHQpXG4gICAgfSlcbiAgICByZXR1cm4gdGhpcy5lZGl0b3IuZGVjb3JhdGVNYXJrZXIoaGlnaGxpZ2h0TWFya2VyLCB7XG4gICAgICB0eXBlOiAnaGlnaGxpZ2h0JyxcbiAgICAgIGNsYXNzOiAnaWRlLWhhc2tlbGwtdHlwZSdcbiAgICB9KVxuICB9XG5cbiAgaGlkZSAodGVtcGxhdGU/OiBJTWFya2VyVGVtcGxhdGUpIHtcbiAgICBpZiAoIXRlbXBsYXRlKSB7XG4gICAgICB0aGlzLm1hcmtlcnMuY2xlYXIoKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHRoaXMudG9vbHRpcEhpZ2hsaWdodFJhbmdlID0gdW5kZWZpbmVkXG4gICAgdGhpcy5tYXJrZXJzLmZpbmRNYXJrZXJzKHRlbXBsYXRlKS5mb3JFYWNoKChtKSA9PiBtLmRlc3Ryb3koKSlcbiAgfVxuXG4gIGhhcyAodGVtcGxhdGU/OiBJTWFya2VyVGVtcGxhdGUpIHtcbiAgICBpZiAoIXRlbXBsYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5tYXJrZXJzLmdldE1hcmtlckNvdW50KCkgPiAwXG4gICAgfVxuICAgIHJldHVybiB0aGlzLm1hcmtlcnMuZmluZE1hcmtlcnModGVtcGxhdGUpLmxlbmd0aCA+IDBcbiAgfVxufVxuIl19