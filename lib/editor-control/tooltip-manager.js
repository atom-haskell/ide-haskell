"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tooltip_view_1 = require("./tooltip-view");
const event_table_1 = require("./event-table");
exports.TEventRangeType = event_table_1.TEventRangeType;
class TooltipManager {
    constructor(editor) {
        this.editor = editor;
        this.markers = new event_table_1.EventTable(editor, [
            [{ type: 'keyboard' }, { type: 'context' }],
            [{ type: 'mouse' }, { type: 'selection' }, { type: 'gutter' }],
        ]);
    }
    dispose() {
        this.markers.destroy();
    }
    show(range, text, type, source, detail) {
        this.hide(type, source);
        const highlightMarker = this.markers.get(type, source).markBufferRange(range);
        highlightMarker.setProperties(detail);
        this.decorate(highlightMarker, new tooltip_view_1.TooltipMessage(text));
    }
    hide(type, source, template) {
        if (!type) {
            this.markers.clear();
            return;
        }
        if (!template) {
            this.markers.get(type, source).clear();
        }
        else {
            this.markers.get(type, source).findMarkers(template).forEach((m) => m.destroy());
        }
    }
    has(type, source, template) {
        if (!type) {
            return this.markers.getMarkerCount() > 0;
        }
        if (!template) {
            return this.markers.get(type, source).getMarkerCount();
        }
        else {
            return this.markers.get(type, source).findMarkers(template).length > 0;
        }
    }
    decorate(marker, tooltipView) {
        this.editor.decorateMarker(marker, {
            type: 'overlay',
            position: 'tail',
            item: tooltipView
        });
        this.editor.decorateMarker(marker, {
            type: 'highlight',
            class: 'ide-haskell-type'
        });
    }
}
exports.TooltipManager = TooltipManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC1tYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2VkaXRvci1jb250cm9sL3Rvb2x0aXAtbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUlBLGlEQUE2QztBQUU3QywrQ0FBeUQ7QUFDakQsd0RBQWU7QUFLdkI7SUFFRSxZQUFxQixNQUFrQjtRQUFsQixXQUFNLEdBQU4sTUFBTSxDQUFZO1FBQ3JDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSx3QkFBVSxDQUFDLE1BQU0sRUFBRTtZQUNwQyxDQUFDLEVBQUMsSUFBSSxFQUFFLFVBQVUsRUFBQyxFQUFFLEVBQUMsSUFBSSxFQUFFLFNBQVMsRUFBQyxDQUFDO1lBQ3ZDLENBQUMsRUFBQyxJQUFJLEVBQUUsT0FBTyxFQUFDLEVBQUUsRUFBQyxJQUFJLEVBQUUsV0FBVyxFQUFDLEVBQUUsRUFBQyxJQUFJLEVBQUUsUUFBUSxFQUFDLENBQUM7U0FDekQsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVNLE9BQU87UUFDWixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQ3hCLENBQUM7SUFFTSxJQUFJLENBQ1QsS0FBWSxFQUFFLElBQXFDLEVBQ25ELElBQXFCLEVBQUUsTUFBYyxFQUFFLE1BQXlCO1FBRWhFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFBO1FBQ3ZCLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDN0UsZUFBZSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUNyQyxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxJQUFJLDZCQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtJQUMxRCxDQUFDO0lBRU0sSUFBSSxDQUFFLElBQXNCLEVBQUUsTUFBZSxFQUFFLFFBQTRCO1FBQ2hGLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNWLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUE7WUFDcEIsTUFBTSxDQUFBO1FBQ1IsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNkLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUN4QyxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQTtRQUNsRixDQUFDO0lBQ0gsQ0FBQztJQUVNLEdBQUcsQ0FBRSxJQUFzQixFQUFFLE1BQWUsRUFBRSxRQUE0QjtRQUMvRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDVixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsR0FBRyxDQUFDLENBQUE7UUFDMUMsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNkLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUE7UUFDeEQsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQTtRQUN4RSxDQUFDO0lBQ0gsQ0FBQztJQUVPLFFBQVEsQ0FBRSxNQUFxQixFQUFFLFdBQTJCO1FBQ2xFLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRTtZQUNqQyxJQUFJLEVBQUUsU0FBUztZQUNmLFFBQVEsRUFBRSxNQUFNO1lBQ2hCLElBQUksRUFBRSxXQUFXO1NBQ2xCLENBQUMsQ0FBQTtRQUNGLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRTtZQUNqQyxJQUFJLEVBQUUsV0FBVztZQUNqQixLQUFLLEVBQUUsa0JBQWtCO1NBQzFCLENBQUMsQ0FBQTtJQUNKLENBQUM7Q0FDRjtBQXpERCx3Q0F5REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBSYW5nZSwgVGV4dEVkaXRvciwgRGlzcGxheU1hcmtlcixcbn0gZnJvbSAnYXRvbSdcblxuaW1wb3J0IHtUb29sdGlwTWVzc2FnZX0gZnJvbSAnLi90b29sdGlwLXZpZXcnXG5pbXBvcnQge01lc3NhZ2VPYmplY3R9IGZyb20gJy4uL3V0aWxzJ1xuaW1wb3J0IHtFdmVudFRhYmxlLCBURXZlbnRSYW5nZVR5cGV9IGZyb20gJy4vZXZlbnQtdGFibGUnXG5leHBvcnQge1RFdmVudFJhbmdlVHlwZX1cbmV4cG9ydCBpbnRlcmZhY2UgSU1hcmtlclByb3BlcnRpZXMge1xuICBwZXJzaXN0T25DdXJzb3JNb3ZlOiBib29sZWFuXG59XG5cbmV4cG9ydCBjbGFzcyBUb29sdGlwTWFuYWdlciB7XG4gIHByaXZhdGUgbWFya2VyczogRXZlbnRUYWJsZVxuICBjb25zdHJ1Y3RvciAocHJpdmF0ZSBlZGl0b3I6IFRleHRFZGl0b3IpIHtcbiAgICB0aGlzLm1hcmtlcnMgPSBuZXcgRXZlbnRUYWJsZShlZGl0b3IsIFtcbiAgICAgIFt7dHlwZTogJ2tleWJvYXJkJ30sIHt0eXBlOiAnY29udGV4dCd9XSxcbiAgICAgIFt7dHlwZTogJ21vdXNlJ30sIHt0eXBlOiAnc2VsZWN0aW9uJ30sIHt0eXBlOiAnZ3V0dGVyJ31dLFxuICAgIF0pXG4gIH1cblxuICBwdWJsaWMgZGlzcG9zZSAoKSB7XG4gICAgdGhpcy5tYXJrZXJzLmRlc3Ryb3koKVxuICB9XG5cbiAgcHVibGljIHNob3cgKFxuICAgIHJhbmdlOiBSYW5nZSwgdGV4dDogTWVzc2FnZU9iamVjdCB8IE1lc3NhZ2VPYmplY3RbXSxcbiAgICB0eXBlOiBURXZlbnRSYW5nZVR5cGUsIHNvdXJjZTogc3RyaW5nLCBkZXRhaWw6IElNYXJrZXJQcm9wZXJ0aWVzXG4gICkge1xuICAgIHRoaXMuaGlkZSh0eXBlLCBzb3VyY2UpXG4gICAgY29uc3QgaGlnaGxpZ2h0TWFya2VyID0gdGhpcy5tYXJrZXJzLmdldCh0eXBlLCBzb3VyY2UpLm1hcmtCdWZmZXJSYW5nZShyYW5nZSlcbiAgICBoaWdobGlnaHRNYXJrZXIuc2V0UHJvcGVydGllcyhkZXRhaWwpXG4gICAgdGhpcy5kZWNvcmF0ZShoaWdobGlnaHRNYXJrZXIsIG5ldyBUb29sdGlwTWVzc2FnZSh0ZXh0KSlcbiAgfVxuXG4gIHB1YmxpYyBoaWRlICh0eXBlPzogVEV2ZW50UmFuZ2VUeXBlLCBzb3VyY2U/OiBzdHJpbmcsIHRlbXBsYXRlPzogSU1hcmtlclByb3BlcnRpZXMpIHtcbiAgICBpZiAoIXR5cGUpIHtcbiAgICAgIHRoaXMubWFya2Vycy5jbGVhcigpXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKCF0ZW1wbGF0ZSkge1xuICAgICAgdGhpcy5tYXJrZXJzLmdldCh0eXBlLCBzb3VyY2UpLmNsZWFyKClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5tYXJrZXJzLmdldCh0eXBlLCBzb3VyY2UpLmZpbmRNYXJrZXJzKHRlbXBsYXRlKS5mb3JFYWNoKChtKSA9PiBtLmRlc3Ryb3koKSlcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgaGFzICh0eXBlPzogVEV2ZW50UmFuZ2VUeXBlLCBzb3VyY2U/OiBzdHJpbmcsIHRlbXBsYXRlPzogSU1hcmtlclByb3BlcnRpZXMpIHtcbiAgICBpZiAoIXR5cGUpIHtcbiAgICAgIHJldHVybiB0aGlzLm1hcmtlcnMuZ2V0TWFya2VyQ291bnQoKSA+IDBcbiAgICB9XG4gICAgaWYgKCF0ZW1wbGF0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMubWFya2Vycy5nZXQodHlwZSwgc291cmNlKS5nZXRNYXJrZXJDb3VudCgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLm1hcmtlcnMuZ2V0KHR5cGUsIHNvdXJjZSkuZmluZE1hcmtlcnModGVtcGxhdGUpLmxlbmd0aCA+IDBcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGRlY29yYXRlIChtYXJrZXI6IERpc3BsYXlNYXJrZXIsIHRvb2x0aXBWaWV3OiBUb29sdGlwTWVzc2FnZSkge1xuICAgIHRoaXMuZWRpdG9yLmRlY29yYXRlTWFya2VyKG1hcmtlciwge1xuICAgICAgdHlwZTogJ292ZXJsYXknLFxuICAgICAgcG9zaXRpb246ICd0YWlsJyxcbiAgICAgIGl0ZW06IHRvb2x0aXBWaWV3XG4gICAgfSlcbiAgICB0aGlzLmVkaXRvci5kZWNvcmF0ZU1hcmtlcihtYXJrZXIsIHtcbiAgICAgIHR5cGU6ICdoaWdobGlnaHQnLFxuICAgICAgY2xhc3M6ICdpZGUtaGFza2VsbC10eXBlJ1xuICAgIH0pXG4gIH1cbn1cbiJdfQ==